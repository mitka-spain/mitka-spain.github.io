"use strict";
(self["webpackChunkinqviz_excel"] = self["webpackChunkinqviz_excel"] || []).push([["vendors-node_modules_langchain_dist_chains_llm_chain_js"],{

/***/ "./node_modules/@langchain/core/dist/documents/document.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/documents/document.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Document: function() { return /* binding */ Document; }
/* harmony export */ });
/**
 * Interface for interacting with a document.
 */
class Document {
    constructor(fields) {
        Object.defineProperty(this, "pageContent", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "metadata", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.pageContent = fields.pageContent
            ? fields.pageContent.toString()
            : this.pageContent;
        this.metadata = fields.metadata ?? {};
    }
}


/***/ }),

/***/ "./node_modules/@langchain/core/dist/example_selectors/base.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/example_selectors/base.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseExampleSelector: function() { return /* binding */ BaseExampleSelector; }
/* harmony export */ });
/* harmony import */ var _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../load/serializable.js */ "./node_modules/@langchain/core/dist/load/serializable.js");

/**
 * Base class for example selectors.
 */
class BaseExampleSelector extends _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__.Serializable {
    constructor() {
        super(...arguments);
        Object.defineProperty(this, "lc_namespace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ["langchain_core", "example_selectors", "base"]
        });
    }
}


/***/ }),

/***/ "./node_modules/@langchain/core/dist/example_selectors/conditional.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/example_selectors/conditional.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BasePromptSelector: function() { return /* binding */ BasePromptSelector; },
/* harmony export */   ConditionalPromptSelector: function() { return /* binding */ ConditionalPromptSelector; },
/* harmony export */   isChatModel: function() { return /* binding */ isChatModel; },
/* harmony export */   isLLM: function() { return /* binding */ isLLM; }
/* harmony export */ });
/**
 * Abstract class that defines the interface for selecting a prompt for a
 * given language model.
 */
class BasePromptSelector {
    /**
     * Asynchronous version of `getPrompt` that also accepts an options object
     * for partial variables.
     * @param llm The language model for which to get a prompt.
     * @param options Optional object for partial variables.
     * @returns A Promise that resolves to a prompt template.
     */
    async getPromptAsync(llm, options) {
        const prompt = this.getPrompt(llm);
        return prompt.partial(options?.partialVariables ?? {});
    }
}
/**
 * Concrete implementation of `BasePromptSelector` that selects a prompt
 * based on a set of conditions. It has a default prompt that it returns
 * if none of the conditions are met.
 */
class ConditionalPromptSelector extends BasePromptSelector {
    constructor(default_prompt, conditionals = []) {
        super();
        Object.defineProperty(this, "defaultPrompt", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "conditionals", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.defaultPrompt = default_prompt;
        this.conditionals = conditionals;
    }
    /**
     * Method that selects a prompt based on a set of conditions. If none of
     * the conditions are met, it returns the default prompt.
     * @param llm The language model for which to get a prompt.
     * @returns A prompt template.
     */
    getPrompt(llm) {
        for (const [condition, prompt] of this.conditionals) {
            if (condition(llm)) {
                return prompt;
            }
        }
        return this.defaultPrompt;
    }
}
/**
 * Type guard function that checks if a given language model is of type
 * `BaseLLM`.
 */
function isLLM(llm) {
    return llm._modelType() === "base_llm";
}
/**
 * Type guard function that checks if a given language model is of type
 * `BaseChatModel`.
 */
function isChatModel(llm) {
    return llm._modelType() === "base_chat_model";
}


/***/ }),

/***/ "./node_modules/@langchain/core/dist/example_selectors/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/example_selectors/index.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseExampleSelector: function() { return /* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseExampleSelector; },
/* harmony export */   BasePromptSelector: function() { return /* reexport safe */ _conditional_js__WEBPACK_IMPORTED_MODULE_1__.BasePromptSelector; },
/* harmony export */   ConditionalPromptSelector: function() { return /* reexport safe */ _conditional_js__WEBPACK_IMPORTED_MODULE_1__.ConditionalPromptSelector; },
/* harmony export */   LengthBasedExampleSelector: function() { return /* reexport safe */ _length_based_js__WEBPACK_IMPORTED_MODULE_2__.LengthBasedExampleSelector; },
/* harmony export */   SemanticSimilarityExampleSelector: function() { return /* reexport safe */ _semantic_similarity_js__WEBPACK_IMPORTED_MODULE_3__.SemanticSimilarityExampleSelector; },
/* harmony export */   isChatModel: function() { return /* reexport safe */ _conditional_js__WEBPACK_IMPORTED_MODULE_1__.isChatModel; },
/* harmony export */   isLLM: function() { return /* reexport safe */ _conditional_js__WEBPACK_IMPORTED_MODULE_1__.isLLM; }
/* harmony export */ });
/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ "./node_modules/@langchain/core/dist/example_selectors/base.js");
/* harmony import */ var _conditional_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./conditional.js */ "./node_modules/@langchain/core/dist/example_selectors/conditional.js");
/* harmony import */ var _length_based_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./length_based.js */ "./node_modules/@langchain/core/dist/example_selectors/length_based.js");
/* harmony import */ var _semantic_similarity_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./semantic_similarity.js */ "./node_modules/@langchain/core/dist/example_selectors/semantic_similarity.js");






/***/ }),

/***/ "./node_modules/@langchain/core/dist/example_selectors/length_based.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/example_selectors/length_based.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LengthBasedExampleSelector: function() { return /* binding */ LengthBasedExampleSelector; }
/* harmony export */ });
/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ "./node_modules/@langchain/core/dist/example_selectors/base.js");

/**
 * Calculates the length of a text based on the number of words and lines.
 */
function getLengthBased(text) {
    return text.split(/\n| /).length;
}
/**
 * A specialized example selector that selects examples based on their
 * length, ensuring that the total length of the selected examples does
 * not exceed a specified maximum length.
 * @example
 * ```typescript
 * const exampleSelector = new LengthBasedExampleSelector(
 *   [
 *     { input: "happy", output: "sad" },
 *     { input: "tall", output: "short" },
 *     { input: "energetic", output: "lethargic" },
 *     { input: "sunny", output: "gloomy" },
 *     { input: "windy", output: "calm" },
 *   ],
 *   {
 *     examplePrompt: new PromptTemplate({
 *       inputVariables: ["input", "output"],
 *       template: "Input: {input}\nOutput: {output}",
 *     }),
 *     maxLength: 25,
 *   },
 * );
 * const dynamicPrompt = new FewShotPromptTemplate({
 *   exampleSelector,
 *   examplePrompt: new PromptTemplate({
 *     inputVariables: ["input", "output"],
 *     template: "Input: {input}\nOutput: {output}",
 *   }),
 *   prefix: "Give the antonym of every input",
 *   suffix: "Input: {adjective}\nOutput:",
 *   inputVariables: ["adjective"],
 * });
 * console.log(dynamicPrompt.format({ adjective: "big" }));
 * console.log(
 *   dynamicPrompt.format({
 *     adjective:
 *       "big and huge and massive and large and gigantic and tall and much much much much much bigger than everything else",
 *   }),
 * );
 * ```
 */
class LengthBasedExampleSelector extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseExampleSelector {
    constructor(data) {
        super(data);
        Object.defineProperty(this, "examples", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "examplePrompt", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "getTextLength", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: getLengthBased
        });
        Object.defineProperty(this, "maxLength", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 2048
        });
        Object.defineProperty(this, "exampleTextLengths", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        this.examplePrompt = data.examplePrompt;
        this.maxLength = data.maxLength ?? 2048;
        this.getTextLength = data.getTextLength ?? getLengthBased;
    }
    /**
     * Adds an example to the list of examples and calculates its length.
     * @param example The example to be added.
     * @returns Promise that resolves when the example has been added and its length calculated.
     */
    async addExample(example) {
        this.examples.push(example);
        const stringExample = await this.examplePrompt.format(example);
        this.exampleTextLengths.push(this.getTextLength(stringExample));
    }
    /**
     * Calculates the lengths of the examples.
     * @param v Array of lengths of the examples.
     * @param values Instance of LengthBasedExampleSelector.
     * @returns Promise that resolves with an array of lengths of the examples.
     */
    async calculateExampleTextLengths(v, values) {
        if (v.length > 0) {
            return v;
        }
        const { examples, examplePrompt } = values;
        const stringExamples = await Promise.all(examples.map((eg) => examplePrompt.format(eg)));
        return stringExamples.map((eg) => this.getTextLength(eg));
    }
    /**
     * Selects examples until the total length of the selected examples
     * reaches the maxLength.
     * @param inputVariables The input variables for the examples.
     * @returns Promise that resolves with an array of selected examples.
     */
    async selectExamples(inputVariables) {
        const inputs = Object.values(inputVariables).join(" ");
        let remainingLength = this.maxLength - this.getTextLength(inputs);
        let i = 0;
        const examples = [];
        while (remainingLength > 0 && i < this.examples.length) {
            const newLength = remainingLength - this.exampleTextLengths[i];
            if (newLength < 0) {
                break;
            }
            else {
                examples.push(this.examples[i]);
                remainingLength = newLength;
            }
            i += 1;
        }
        return examples;
    }
    /**
     * Creates a new instance of LengthBasedExampleSelector and adds a list of
     * examples to it.
     * @param examples Array of examples to be added.
     * @param args Input parameters for the LengthBasedExampleSelector.
     * @returns Promise that resolves with a new instance of LengthBasedExampleSelector with the examples added.
     */
    static async fromExamples(examples, args) {
        const selector = new LengthBasedExampleSelector(args);
        await Promise.all(examples.map((eg) => selector.addExample(eg)));
        return selector;
    }
}


/***/ }),

/***/ "./node_modules/@langchain/core/dist/example_selectors/semantic_similarity.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/example_selectors/semantic_similarity.js ***!
  \************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SemanticSimilarityExampleSelector: function() { return /* binding */ SemanticSimilarityExampleSelector; }
/* harmony export */ });
/* harmony import */ var _documents_document_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../documents/document.js */ "./node_modules/@langchain/core/dist/documents/document.js");
/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ "./node_modules/@langchain/core/dist/example_selectors/base.js");


function sortedValues(values) {
    return Object.keys(values)
        .sort()
        .map((key) => values[key]);
}
/**
 * Class that selects examples based on semantic similarity. It extends
 * the BaseExampleSelector class.
 * @example
 * ```typescript
 * const exampleSelector = await SemanticSimilarityExampleSelector.fromExamples(
 *   [
 *     { input: "happy", output: "sad" },
 *     { input: "tall", output: "short" },
 *     { input: "energetic", output: "lethargic" },
 *     { input: "sunny", output: "gloomy" },
 *     { input: "windy", output: "calm" },
 *   ],
 *   new OpenAIEmbeddings(),
 *   HNSWLib,
 *   { k: 1 },
 * );
 * const dynamicPrompt = new FewShotPromptTemplate({
 *   exampleSelector,
 *   examplePrompt: PromptTemplate.fromTemplate(
 *     "Input: {input}\nOutput: {output}",
 *   ),
 *   prefix: "Give the antonym of every input",
 *   suffix: "Input: {adjective}\nOutput:",
 *   inputVariables: ["adjective"],
 * });
 * console.log(await dynamicPrompt.format({ adjective: "rainy" }));
 * ```
 */
class SemanticSimilarityExampleSelector extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseExampleSelector {
    constructor(data) {
        super(data);
        Object.defineProperty(this, "vectorStoreRetriever", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "exampleKeys", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "inputKeys", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.exampleKeys = data.exampleKeys;
        this.inputKeys = data.inputKeys;
        if (data.vectorStore !== undefined) {
            this.vectorStoreRetriever = data.vectorStore.asRetriever({
                k: data.k ?? 4,
                filter: data.filter,
            });
        }
        else if (data.vectorStoreRetriever) {
            this.vectorStoreRetriever = data.vectorStoreRetriever;
        }
        else {
            throw new Error(`You must specify one of "vectorStore" and "vectorStoreRetriever".`);
        }
    }
    /**
     * Method that adds a new example to the vectorStore. The example is
     * converted to a string and added to the vectorStore as a document.
     * @param example The example to be added to the vectorStore.
     * @returns Promise that resolves when the example has been added to the vectorStore.
     */
    async addExample(example) {
        const inputKeys = this.inputKeys ?? Object.keys(example);
        const stringExample = sortedValues(inputKeys.reduce((acc, key) => ({ ...acc, [key]: example[key] }), {})).join(" ");
        await this.vectorStoreRetriever.addDocuments([
            new _documents_document_js__WEBPACK_IMPORTED_MODULE_0__.Document({
                pageContent: stringExample,
                metadata: example,
            }),
        ]);
    }
    /**
     * Method that selects which examples to use based on semantic similarity.
     * It performs a similarity search in the vectorStore using the input
     * variables and returns the examples with the highest similarity.
     * @param inputVariables The input variables used for the similarity search.
     * @returns Promise that resolves with an array of the selected examples.
     */
    async selectExamples(inputVariables) {
        const inputKeys = this.inputKeys ?? Object.keys(inputVariables);
        const query = sortedValues(inputKeys.reduce((acc, key) => ({ ...acc, [key]: inputVariables[key] }), {})).join(" ");
        const exampleDocs = await this.vectorStoreRetriever.invoke(query);
        const examples = exampleDocs.map((doc) => doc.metadata);
        if (this.exampleKeys) {
            // If example keys are provided, filter examples to those keys.
            return examples.map((example) => this.exampleKeys.reduce((acc, key) => ({ ...acc, [key]: example[key] }), {}));
        }
        return examples;
    }
    /**
     * Static method that creates a new instance of
     * SemanticSimilarityExampleSelector. It takes a list of examples, an
     * instance of Embeddings, a VectorStore class, and an options object as
     * parameters. It converts the examples to strings, creates a VectorStore
     * from the strings and the embeddings, and returns a new
     * SemanticSimilarityExampleSelector with the created VectorStore and the
     * options provided.
     * @param examples The list of examples to be used.
     * @param embeddings The instance of Embeddings to be used.
     * @param vectorStoreCls The VectorStore class to be used.
     * @param options The options object for the SemanticSimilarityExampleSelector.
     * @returns Promise that resolves with a new instance of SemanticSimilarityExampleSelector.
     */
    static async fromExamples(examples, embeddings, vectorStoreCls, options = {}) {
        const inputKeys = options.inputKeys ?? null;
        const stringExamples = examples.map((example) => sortedValues(inputKeys
            ? inputKeys.reduce((acc, key) => ({ ...acc, [key]: example[key] }), {})
            : example).join(" "));
        const vectorStore = await vectorStoreCls.fromTexts(stringExamples, examples, // metadatas
        embeddings, options);
        return new SemanticSimilarityExampleSelector({
            vectorStore,
            k: options.k ?? 4,
            exampleKeys: options.exampleKeys,
            inputKeys: options.inputKeys,
        });
    }
}


/***/ }),

/***/ "./node_modules/@langchain/core/dist/output_parsers/base.js":
/*!******************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/base.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseLLMOutputParser: function() { return /* binding */ BaseLLMOutputParser; },
/* harmony export */   BaseOutputParser: function() { return /* binding */ BaseOutputParser; },
/* harmony export */   OutputParserException: function() { return /* binding */ OutputParserException; }
/* harmony export */ });
/* harmony import */ var _runnables_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../runnables/index.js */ "./node_modules/@langchain/core/dist/runnables/index.js");

/**
 * Abstract base class for parsing the output of a Large Language Model
 * (LLM) call. It provides methods for parsing the result of an LLM call
 * and invoking the parser with a given input.
 */
class BaseLLMOutputParser extends _runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.Runnable {
    /**
     * Parses the result of an LLM call with a given prompt. By default, it
     * simply calls `parseResult`.
     * @param generations The generations from an LLM call.
     * @param _prompt The prompt used in the LLM call.
     * @param callbacks Optional callbacks.
     * @returns A promise of the parsed output.
     */
    parseResultWithPrompt(generations, _prompt, callbacks) {
        return this.parseResult(generations, callbacks);
    }
    /**
     * Calls the parser with a given input and optional configuration options.
     * If the input is a string, it creates a generation with the input as
     * text and calls `parseResult`. If the input is a `BaseMessage`, it
     * creates a generation with the input as a message and the content of the
     * input as text, and then calls `parseResult`.
     * @param input The input to the parser, which can be a string or a `BaseMessage`.
     * @param options Optional configuration options.
     * @returns A promise of the parsed output.
     */
    async invoke(input, options) {
        if (typeof input === "string") {
            return this._callWithConfig(async (input) => this.parseResult([{ text: input }]), input, { ...options, runType: "parser" });
        }
        else {
            return this._callWithConfig(async (input) => this.parseResult([
                {
                    message: input,
                    text: typeof input.content === "string"
                        ? input.content
                        : JSON.stringify(input.content),
                },
            ]), input, { ...options, runType: "parser" });
        }
    }
}
/**
 * Class to parse the output of an LLM call.
 */
class BaseOutputParser extends BaseLLMOutputParser {
    parseResult(generations, callbacks) {
        return this.parse(generations[0].text, callbacks);
    }
    async parseWithPrompt(text, _prompt, callbacks) {
        return this.parse(text, callbacks);
    }
    /**
     * Return the string type key uniquely identifying this class of parser
     */
    _type() {
        throw new Error("_type not implemented");
    }
}
/**
 * Exception that output parsers should raise to signify a parsing error.
 *
 * This exists to differentiate parsing errors from other code or execution errors
 * that also may arise inside the output parser. OutputParserExceptions will be
 * available to catch and handle in ways to fix the parsing error, while other
 * errors will be raised.
 *
 * @param message - The error that's being re-raised or an error message.
 * @param llmOutput - String model output which is error-ing.
 * @param observation - String explanation of error which can be passed to a
 *     model to try and remediate the issue.
 * @param sendToLLM - Whether to send the observation and llm_output back to an Agent
 *     after an OutputParserException has been raised. This gives the underlying
 *     model driving the agent the context that the previous output was improperly
 *     structured, in the hopes that it will update the output to the correct
 *     format.
 */
class OutputParserException extends Error {
    constructor(message, llmOutput, observation, sendToLLM = false) {
        super(message);
        Object.defineProperty(this, "llmOutput", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "observation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "sendToLLM", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.llmOutput = llmOutput;
        this.observation = observation;
        this.sendToLLM = sendToLLM;
        if (sendToLLM) {
            if (observation === undefined || llmOutput === undefined) {
                throw new Error("Arguments 'observation' & 'llmOutput' are required if 'sendToLlm' is true");
            }
        }
    }
}


/***/ }),

/***/ "./node_modules/@langchain/core/dist/output_parsers/bytes.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/bytes.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BytesOutputParser: function() { return /* binding */ BytesOutputParser; }
/* harmony export */ });
/* harmony import */ var _transform_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transform.js */ "./node_modules/@langchain/core/dist/output_parsers/transform.js");

/**
 * OutputParser that parses LLMResult into the top likely string and
 * encodes it into bytes.
 */
class BytesOutputParser extends _transform_js__WEBPACK_IMPORTED_MODULE_0__.BaseTransformOutputParser {
    constructor() {
        super(...arguments);
        Object.defineProperty(this, "lc_namespace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ["langchain_core", "output_parsers", "bytes"]
        });
        Object.defineProperty(this, "lc_serializable", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.defineProperty(this, "textEncoder", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new TextEncoder()
        });
    }
    static lc_name() {
        return "BytesOutputParser";
    }
    parse(text) {
        return Promise.resolve(this.textEncoder.encode(text));
    }
    getFormatInstructions() {
        return "";
    }
}


/***/ }),

/***/ "./node_modules/@langchain/core/dist/output_parsers/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/index.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseCumulativeTransformOutputParser: function() { return /* reexport safe */ _transform_js__WEBPACK_IMPORTED_MODULE_4__.BaseCumulativeTransformOutputParser; },
/* harmony export */   BaseLLMOutputParser: function() { return /* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseLLMOutputParser; },
/* harmony export */   BaseOutputParser: function() { return /* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseOutputParser; },
/* harmony export */   BaseTransformOutputParser: function() { return /* reexport safe */ _transform_js__WEBPACK_IMPORTED_MODULE_4__.BaseTransformOutputParser; },
/* harmony export */   BytesOutputParser: function() { return /* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_1__.BytesOutputParser; },
/* harmony export */   CommaSeparatedListOutputParser: function() { return /* reexport safe */ _list_js__WEBPACK_IMPORTED_MODULE_2__.CommaSeparatedListOutputParser; },
/* harmony export */   CustomListOutputParser: function() { return /* reexport safe */ _list_js__WEBPACK_IMPORTED_MODULE_2__.CustomListOutputParser; },
/* harmony export */   ListOutputParser: function() { return /* reexport safe */ _list_js__WEBPACK_IMPORTED_MODULE_2__.ListOutputParser; },
/* harmony export */   OutputParserException: function() { return /* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.OutputParserException; },
/* harmony export */   StringOutputParser: function() { return /* reexport safe */ _string_js__WEBPACK_IMPORTED_MODULE_3__.StringOutputParser; }
/* harmony export */ });
/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ "./node_modules/@langchain/core/dist/output_parsers/base.js");
/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bytes.js */ "./node_modules/@langchain/core/dist/output_parsers/bytes.js");
/* harmony import */ var _list_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./list.js */ "./node_modules/@langchain/core/dist/output_parsers/list.js");
/* harmony import */ var _string_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./string.js */ "./node_modules/@langchain/core/dist/output_parsers/string.js");
/* harmony import */ var _transform_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./transform.js */ "./node_modules/@langchain/core/dist/output_parsers/transform.js");







/***/ }),

/***/ "./node_modules/@langchain/core/dist/output_parsers/list.js":
/*!******************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/list.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CommaSeparatedListOutputParser: function() { return /* binding */ CommaSeparatedListOutputParser; },
/* harmony export */   CustomListOutputParser: function() { return /* binding */ CustomListOutputParser; },
/* harmony export */   ListOutputParser: function() { return /* binding */ ListOutputParser; }
/* harmony export */ });
/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ "./node_modules/@langchain/core/dist/output_parsers/base.js");

/**
 * Class to parse the output of an LLM call to a list.
 * @augments BaseOutputParser
 */
class ListOutputParser extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseOutputParser {
}
/**
 * Class to parse the output of an LLM call as a comma-separated list.
 * @augments ListOutputParser
 */
class CommaSeparatedListOutputParser extends ListOutputParser {
    constructor() {
        super(...arguments);
        Object.defineProperty(this, "lc_namespace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ["langchain_core", "output_parsers", "list"]
        });
        Object.defineProperty(this, "lc_serializable", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
    }
    static lc_name() {
        return "CommaSeparatedListOutputParser";
    }
    /**
     * Parses the given text into an array of strings, using a comma as the
     * separator. If the parsing fails, throws an OutputParserException.
     * @param text The text to parse.
     * @returns An array of strings obtained by splitting the input text at each comma.
     */
    async parse(text) {
        try {
            return text
                .trim()
                .split(",")
                .map((s) => s.trim());
        }
        catch (e) {
            throw new _base_js__WEBPACK_IMPORTED_MODULE_0__.OutputParserException(`Could not parse output: ${text}`, text);
        }
    }
    /**
     * Provides instructions on the expected format of the response for the
     * CommaSeparatedListOutputParser.
     * @returns A string containing instructions on the expected format of the response.
     */
    getFormatInstructions() {
        return `Your response should be a list of comma separated values, eg: \`foo, bar, baz\``;
    }
}
/**
 * Class to parse the output of an LLM call to a list with a specific length and separator.
 * @augments ListOutputParser
 */
class CustomListOutputParser extends ListOutputParser {
    constructor({ length, separator }) {
        super(...arguments);
        Object.defineProperty(this, "lc_namespace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ["langchain_core", "output_parsers", "list"]
        });
        Object.defineProperty(this, "length", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "separator", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.length = length;
        this.separator = separator || ",";
    }
    /**
     * Parses the given text into an array of strings, using the specified
     * separator. If the parsing fails or the number of items in the list
     * doesn't match the expected length, throws an OutputParserException.
     * @param text The text to parse.
     * @returns An array of strings obtained by splitting the input text at each occurrence of the specified separator.
     */
    async parse(text) {
        try {
            const items = text
                .trim()
                .split(this.separator)
                .map((s) => s.trim());
            if (this.length !== undefined && items.length !== this.length) {
                throw new _base_js__WEBPACK_IMPORTED_MODULE_0__.OutputParserException(`Incorrect number of items. Expected ${this.length}, got ${items.length}.`);
            }
            return items;
        }
        catch (e) {
            if (Object.getPrototypeOf(e) === _base_js__WEBPACK_IMPORTED_MODULE_0__.OutputParserException.prototype) {
                throw e;
            }
            throw new _base_js__WEBPACK_IMPORTED_MODULE_0__.OutputParserException(`Could not parse output: ${text}`);
        }
    }
    /**
     * Provides instructions on the expected format of the response for the
     * CustomListOutputParser, including the number of items and the
     * separator.
     * @returns A string containing instructions on the expected format of the response.
     */
    getFormatInstructions() {
        return `Your response should be a list of ${this.length === undefined ? "" : `${this.length} `}items separated by "${this.separator}" (eg: \`foo${this.separator} bar${this.separator} baz\`)`;
    }
}


/***/ }),

/***/ "./node_modules/@langchain/core/dist/output_parsers/string.js":
/*!********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/string.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StringOutputParser: function() { return /* binding */ StringOutputParser; }
/* harmony export */ });
/* harmony import */ var _transform_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transform.js */ "./node_modules/@langchain/core/dist/output_parsers/transform.js");

/**
 * OutputParser that parses LLMResult into the top likely string.
 * @example
 * ```typescript
 * const promptTemplate = PromptTemplate.fromTemplate(
 *   "Tell me a joke about {topic}",
 * );
 *
 * const chain = RunnableSequence.from([
 *   promptTemplate,
 *   new ChatOpenAI({}),
 *   new StringOutputParser(),
 * ]);
 *
 * const result = await chain.invoke({ topic: "bears" });
 * console.log("What do you call a bear with no teeth? A gummy bear!");
 * ```
 */
class StringOutputParser extends _transform_js__WEBPACK_IMPORTED_MODULE_0__.BaseTransformOutputParser {
    constructor() {
        super(...arguments);
        Object.defineProperty(this, "lc_namespace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ["langchain_core", "output_parsers", "string"]
        });
        Object.defineProperty(this, "lc_serializable", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
    }
    static lc_name() {
        return "StrOutputParser";
    }
    /**
     * Parses a string output from an LLM call. This method is meant to be
     * implemented by subclasses to define how a string output from an LLM
     * should be parsed.
     * @param text The string output from an LLM call.
     * @param callbacks Optional callbacks.
     * @returns A promise of the parsed output.
     */
    parse(text) {
        return Promise.resolve(text);
    }
    getFormatInstructions() {
        return "";
    }
}


/***/ }),

/***/ "./node_modules/@langchain/core/dist/output_parsers/transform.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/transform.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseCumulativeTransformOutputParser: function() { return /* binding */ BaseCumulativeTransformOutputParser; },
/* harmony export */   BaseTransformOutputParser: function() { return /* binding */ BaseTransformOutputParser; }
/* harmony export */ });
/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ "./node_modules/@langchain/core/dist/output_parsers/base.js");
/* harmony import */ var _messages_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../messages/index.js */ "./node_modules/@langchain/core/dist/messages/index.js");
/* harmony import */ var _outputs_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../outputs.js */ "./node_modules/@langchain/core/dist/outputs.js");
/* harmony import */ var _utils_cfworker_json_schema_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/@cfworker/json-schema/index.js */ "./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/index.js");




/**
 * Class to parse the output of an LLM call that also allows streaming inputs.
 */
class BaseTransformOutputParser extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseOutputParser {
    async *_transform(inputGenerator) {
        for await (const chunk of inputGenerator) {
            if (typeof chunk === "string") {
                yield this.parseResult([{ text: chunk }]);
            }
            else {
                yield this.parseResult([
                    {
                        message: chunk,
                        text: typeof chunk.content === "string"
                            ? chunk.content
                            : JSON.stringify(chunk.content),
                    },
                ]);
            }
        }
    }
    /**
     * Transforms an asynchronous generator of input into an asynchronous
     * generator of parsed output.
     * @param inputGenerator An asynchronous generator of input.
     * @param options A configuration object.
     * @returns An asynchronous generator of parsed output.
     */
    async *transform(inputGenerator, options) {
        yield* this._transformStreamWithConfig(inputGenerator, this._transform.bind(this), {
            ...options,
            runType: "parser",
        });
    }
}
/**
 * A base class for output parsers that can handle streaming input. It
 * extends the `BaseTransformOutputParser` class and provides a method for
 * converting parsed outputs into a diff format.
 */
class BaseCumulativeTransformOutputParser extends BaseTransformOutputParser {
    constructor(fields) {
        super(fields);
        Object.defineProperty(this, "diff", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        this.diff = fields?.diff ?? this.diff;
    }
    async *_transform(inputGenerator) {
        let prevParsed;
        let accGen;
        for await (const chunk of inputGenerator) {
            if (typeof chunk !== "string" && typeof chunk.content !== "string") {
                throw new Error("Cannot handle non-string output.");
            }
            let chunkGen;
            if ((0,_messages_index_js__WEBPACK_IMPORTED_MODULE_1__.isBaseMessageChunk)(chunk)) {
                if (typeof chunk.content !== "string") {
                    throw new Error("Cannot handle non-string message output.");
                }
                chunkGen = new _outputs_js__WEBPACK_IMPORTED_MODULE_2__.ChatGenerationChunk({
                    message: chunk,
                    text: chunk.content,
                });
            }
            else if ((0,_messages_index_js__WEBPACK_IMPORTED_MODULE_1__.isBaseMessage)(chunk)) {
                if (typeof chunk.content !== "string") {
                    throw new Error("Cannot handle non-string message output.");
                }
                chunkGen = new _outputs_js__WEBPACK_IMPORTED_MODULE_2__.ChatGenerationChunk({
                    message: chunk.toChunk(),
                    text: chunk.content,
                });
            }
            else {
                chunkGen = new _outputs_js__WEBPACK_IMPORTED_MODULE_2__.GenerationChunk({ text: chunk });
            }
            if (accGen === undefined) {
                accGen = chunkGen;
            }
            else {
                accGen = accGen.concat(chunkGen);
            }
            const parsed = await this.parsePartialResult([accGen]);
            if (parsed !== undefined &&
                parsed !== null &&
                !(0,_utils_cfworker_json_schema_index_js__WEBPACK_IMPORTED_MODULE_3__.deepCompareStrict)(parsed, prevParsed)) {
                if (this.diff) {
                    yield this._diff(prevParsed, parsed);
                }
                else {
                    yield parsed;
                }
                prevParsed = parsed;
            }
        }
    }
}


/***/ }),

/***/ "./node_modules/@langchain/core/dist/prompts/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/prompts/index.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AIMessagePromptTemplate: function() { return /* reexport safe */ _chat_js__WEBPACK_IMPORTED_MODULE_1__.AIMessagePromptTemplate; },
/* harmony export */   BaseChatPromptTemplate: function() { return /* reexport safe */ _chat_js__WEBPACK_IMPORTED_MODULE_1__.BaseChatPromptTemplate; },
/* harmony export */   BaseMessagePromptTemplate: function() { return /* reexport safe */ _chat_js__WEBPACK_IMPORTED_MODULE_1__.BaseMessagePromptTemplate; },
/* harmony export */   BaseMessageStringPromptTemplate: function() { return /* reexport safe */ _chat_js__WEBPACK_IMPORTED_MODULE_1__.BaseMessageStringPromptTemplate; },
/* harmony export */   BasePromptTemplate: function() { return /* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.BasePromptTemplate; },
/* harmony export */   BaseStringPromptTemplate: function() { return /* reexport safe */ _string_js__WEBPACK_IMPORTED_MODULE_6__.BaseStringPromptTemplate; },
/* harmony export */   ChatMessagePromptTemplate: function() { return /* reexport safe */ _chat_js__WEBPACK_IMPORTED_MODULE_1__.ChatMessagePromptTemplate; },
/* harmony export */   ChatPromptTemplate: function() { return /* reexport safe */ _chat_js__WEBPACK_IMPORTED_MODULE_1__.ChatPromptTemplate; },
/* harmony export */   DEFAULT_FORMATTER_MAPPING: function() { return /* reexport safe */ _template_js__WEBPACK_IMPORTED_MODULE_7__.DEFAULT_FORMATTER_MAPPING; },
/* harmony export */   DEFAULT_PARSER_MAPPING: function() { return /* reexport safe */ _template_js__WEBPACK_IMPORTED_MODULE_7__.DEFAULT_PARSER_MAPPING; },
/* harmony export */   FewShotChatMessagePromptTemplate: function() { return /* reexport safe */ _few_shot_js__WEBPACK_IMPORTED_MODULE_2__.FewShotChatMessagePromptTemplate; },
/* harmony export */   FewShotPromptTemplate: function() { return /* reexport safe */ _few_shot_js__WEBPACK_IMPORTED_MODULE_2__.FewShotPromptTemplate; },
/* harmony export */   HumanMessagePromptTemplate: function() { return /* reexport safe */ _chat_js__WEBPACK_IMPORTED_MODULE_1__.HumanMessagePromptTemplate; },
/* harmony export */   MessagesPlaceholder: function() { return /* reexport safe */ _chat_js__WEBPACK_IMPORTED_MODULE_1__.MessagesPlaceholder; },
/* harmony export */   PipelinePromptTemplate: function() { return /* reexport safe */ _pipeline_js__WEBPACK_IMPORTED_MODULE_3__.PipelinePromptTemplate; },
/* harmony export */   PromptTemplate: function() { return /* reexport safe */ _prompt_js__WEBPACK_IMPORTED_MODULE_4__.PromptTemplate; },
/* harmony export */   SystemMessagePromptTemplate: function() { return /* reexport safe */ _chat_js__WEBPACK_IMPORTED_MODULE_1__.SystemMessagePromptTemplate; },
/* harmony export */   checkValidTemplate: function() { return /* reexport safe */ _template_js__WEBPACK_IMPORTED_MODULE_7__.checkValidTemplate; },
/* harmony export */   interpolateFString: function() { return /* reexport safe */ _template_js__WEBPACK_IMPORTED_MODULE_7__.interpolateFString; },
/* harmony export */   parseFString: function() { return /* reexport safe */ _template_js__WEBPACK_IMPORTED_MODULE_7__.parseFString; },
/* harmony export */   parseTemplate: function() { return /* reexport safe */ _template_js__WEBPACK_IMPORTED_MODULE_7__.parseTemplate; },
/* harmony export */   renderTemplate: function() { return /* reexport safe */ _template_js__WEBPACK_IMPORTED_MODULE_7__.renderTemplate; }
/* harmony export */ });
/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ "./node_modules/@langchain/core/dist/prompts/base.js");
/* harmony import */ var _chat_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chat.js */ "./node_modules/@langchain/core/dist/prompts/chat.js");
/* harmony import */ var _few_shot_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./few_shot.js */ "./node_modules/@langchain/core/dist/prompts/few_shot.js");
/* harmony import */ var _pipeline_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pipeline.js */ "./node_modules/@langchain/core/dist/prompts/pipeline.js");
/* harmony import */ var _prompt_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./prompt.js */ "./node_modules/@langchain/core/dist/prompts/prompt.js");
/* harmony import */ var _serde_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./serde.js */ "./node_modules/@langchain/core/dist/prompts/serde.js");
/* harmony import */ var _string_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./string.js */ "./node_modules/@langchain/core/dist/prompts/string.js");
/* harmony import */ var _template_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./template.js */ "./node_modules/@langchain/core/dist/prompts/template.js");










/***/ }),

/***/ "./node_modules/@langchain/core/dist/prompts/pipeline.js":
/*!***************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/prompts/pipeline.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PipelinePromptTemplate: function() { return /* binding */ PipelinePromptTemplate; }
/* harmony export */ });
/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ "./node_modules/@langchain/core/dist/prompts/base.js");
/* harmony import */ var _chat_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chat.js */ "./node_modules/@langchain/core/dist/prompts/chat.js");


/**
 * Class that handles a sequence of prompts, each of which may require
 * different input variables. Includes methods for formatting these
 * prompts, extracting required input values, and handling partial
 * prompts.
 * @example
 * ```typescript
 * const composedPrompt = new PipelinePromptTemplate({
 *   pipelinePrompts: [
 *     {
 *       name: "introduction",
 *       prompt: PromptTemplate.fromTemplate(`You are impersonating {person}.`),
 *     },
 *     {
 *       name: "example",
 *       prompt: PromptTemplate.fromTemplate(
 *         `Here's an example of an interaction:
 * Q: {example_q}
 * A: {example_a}`,
 *       ),
 *     },
 *     {
 *       name: "start",
 *       prompt: PromptTemplate.fromTemplate(
 *         `Now, do this for real!
 * Q: {input}
 * A:`,
 *       ),
 *     },
 *   ],
 *   finalPrompt: PromptTemplate.fromTemplate(
 *     `{introduction}
 * {example}
 * {start}`,
 *   ),
 * });
 *
 * const formattedPrompt = await composedPrompt.format({
 *   person: "Elon Musk",
 *   example_q: `What's your favorite car?`,
 *   example_a: "Tesla",
 *   input: `What's your favorite social media site?`,
 * });
 * ```
 */
class PipelinePromptTemplate extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BasePromptTemplate {
    static lc_name() {
        return "PipelinePromptTemplate";
    }
    constructor(input) {
        super({ ...input, inputVariables: [] });
        Object.defineProperty(this, "pipelinePrompts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "finalPrompt", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.pipelinePrompts = input.pipelinePrompts;
        this.finalPrompt = input.finalPrompt;
        this.inputVariables = this.computeInputValues();
    }
    /**
     * Computes the input values required by the pipeline prompts.
     * @returns Array of input values required by the pipeline prompts.
     */
    computeInputValues() {
        const intermediateValues = this.pipelinePrompts.map((pipelinePrompt) => pipelinePrompt.name);
        const inputValues = this.pipelinePrompts
            .map((pipelinePrompt) => pipelinePrompt.prompt.inputVariables.filter((inputValue) => !intermediateValues.includes(inputValue)))
            .flat();
        return [...new Set(inputValues)];
    }
    static extractRequiredInputValues(allValues, requiredValueNames) {
        return requiredValueNames.reduce((requiredValues, valueName) => {
            // eslint-disable-next-line no-param-reassign
            requiredValues[valueName] = allValues[valueName];
            return requiredValues;
        }, {});
    }
    /**
     * Formats the pipeline prompts based on the provided input values.
     * @param values Input values to format the pipeline prompts.
     * @returns Promise that resolves with the formatted input values.
     */
    async formatPipelinePrompts(values) {
        const allValues = await this.mergePartialAndUserVariables(values);
        for (const { name: pipelinePromptName, prompt: pipelinePrompt } of this
            .pipelinePrompts) {
            const pipelinePromptInputValues = PipelinePromptTemplate.extractRequiredInputValues(allValues, pipelinePrompt.inputVariables);
            // eslint-disable-next-line no-instanceof/no-instanceof
            if (pipelinePrompt instanceof _chat_js__WEBPACK_IMPORTED_MODULE_1__.ChatPromptTemplate) {
                allValues[pipelinePromptName] = await pipelinePrompt.formatMessages(pipelinePromptInputValues);
            }
            else {
                allValues[pipelinePromptName] = await pipelinePrompt.format(pipelinePromptInputValues);
            }
        }
        return PipelinePromptTemplate.extractRequiredInputValues(allValues, this.finalPrompt.inputVariables);
    }
    /**
     * Formats the final prompt value based on the provided input values.
     * @param values Input values to format the final prompt value.
     * @returns Promise that resolves with the formatted final prompt value.
     */
    async formatPromptValue(values) {
        return this.finalPrompt.formatPromptValue(await this.formatPipelinePrompts(values));
    }
    async format(values) {
        return this.finalPrompt.format(await this.formatPipelinePrompts(values));
    }
    /**
     * Handles partial prompts, which are prompts that have been partially
     * filled with input values.
     * @param values Partial input values.
     * @returns Promise that resolves with a new PipelinePromptTemplate instance with updated input variables.
     */
    async partial(values) {
        const promptDict = { ...this };
        promptDict.inputVariables = this.inputVariables.filter((iv) => !(iv in values));
        promptDict.partialVariables = {
            ...(this.partialVariables ?? {}),
            ...values,
        };
        return new PipelinePromptTemplate(promptDict);
    }
    serialize() {
        throw new Error("Not implemented.");
    }
    _getPromptType() {
        return "pipeline";
    }
}


/***/ }),

/***/ "./node_modules/@langchain/core/dist/prompts/serde.js":
/*!************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/prompts/serde.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/@langchain/core/dist/runnables/branch.js":
/*!***************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/branch.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RunnableBranch: function() { return /* binding */ RunnableBranch; }
/* harmony export */ });
/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ "./node_modules/@langchain/core/dist/runnables/base.js");

/**
 * Class that represents a runnable branch. The RunnableBranch is
 * initialized with an array of branches and a default branch. When invoked,
 * it evaluates the condition of each branch in order and executes the
 * corresponding branch if the condition is true. If none of the conditions
 * are true, it executes the default branch.
 * @example
 * ```typescript
 * const branch = RunnableBranch.from([
 *   [
 *     (x: { topic: string; question: string }) =>
 *       x.topic.toLowerCase().includes("anthropic"),
 *     anthropicChain,
 *   ],
 *   [
 *     (x: { topic: string; question: string }) =>
 *       x.topic.toLowerCase().includes("langchain"),
 *     langChainChain,
 *   ],
 *   generalChain,
 * ]);
 *
 * const fullChain = RunnableSequence.from([
 *   {
 *     topic: classificationChain,
 *     question: (input: { question: string }) => input.question,
 *   },
 *   branch,
 * ]);
 *
 * const result = await fullChain.invoke({
 *   question: "how do I use LangChain?",
 * });
 * ```
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
class RunnableBranch extends _base_js__WEBPACK_IMPORTED_MODULE_0__.Runnable {
    static lc_name() {
        return "RunnableBranch";
    }
    constructor(fields) {
        super(fields);
        Object.defineProperty(this, "lc_namespace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ["langchain_core", "runnables"]
        });
        Object.defineProperty(this, "lc_serializable", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.defineProperty(this, "default", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "branches", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.branches = fields.branches;
        this.default = fields.default;
    }
    /**
     * Convenience method for instantiating a RunnableBranch from
     * RunnableLikes (objects, functions, or Runnables).
     *
     * Each item in the input except for the last one should be a
     * tuple with two items. The first is a "condition" RunnableLike that
     * returns "true" if the second RunnableLike in the tuple should run.
     *
     * The final item in the input should be a RunnableLike that acts as a
     * default branch if no other branches match.
     *
     * @example
     * ```ts
     * import { RunnableBranch } from "langchain/schema/runnable";
     *
     * const branch = RunnableBranch.from([
     *   [(x: number) => x > 0, (x: number) => x + 1],
     *   [(x: number) => x < 0, (x: number) => x - 1],
     *   (x: number) => x
     * ]);
     * ```
     * @param branches An array where the every item except the last is a tuple of [condition, runnable]
     *   pairs. The last item is a default runnable which is invoked if no other condition matches.
     * @returns A new RunnableBranch.
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    static from(branches) {
        if (branches.length < 1) {
            throw new Error("RunnableBranch requires at least one branch");
        }
        const branchLikes = branches.slice(0, -1);
        const coercedBranches = branchLikes.map(([condition, runnable]) => [
            (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._coerceToRunnable)(condition),
            (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._coerceToRunnable)(runnable),
        ]);
        const defaultBranch = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._coerceToRunnable)(branches[branches.length - 1]);
        return new this({
            branches: coercedBranches,
            default: defaultBranch,
        });
    }
    async _invoke(input, config, runManager) {
        let result;
        for (let i = 0; i < this.branches.length; i += 1) {
            const [condition, branchRunnable] = this.branches[i];
            const conditionValue = await condition.invoke(input, this._patchConfig(config, runManager?.getChild(`condition:${i + 1}`)));
            if (conditionValue) {
                result = await branchRunnable.invoke(input, this._patchConfig(config, runManager?.getChild(`branch:${i + 1}`)));
                break;
            }
        }
        if (!result) {
            result = await this.default.invoke(input, this._patchConfig(config, runManager?.getChild("default")));
        }
        return result;
    }
    async invoke(input, config = {}) {
        return this._callWithConfig(this._invoke, input, config);
    }
}


/***/ }),

/***/ "./node_modules/@langchain/core/dist/runnables/history.js":
/*!****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/history.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RunnableWithMessageHistory: function() { return /* binding */ RunnableWithMessageHistory; }
/* harmony export */ });
/* harmony import */ var _messages_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../messages/index.js */ "./node_modules/@langchain/core/dist/messages/index.js");
/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ "./node_modules/@langchain/core/dist/runnables/base.js");
/* harmony import */ var _passthrough_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./passthrough.js */ "./node_modules/@langchain/core/dist/runnables/passthrough.js");



class RunnableWithMessageHistory extends _base_js__WEBPACK_IMPORTED_MODULE_1__.RunnableBinding {
    constructor(fields) {
        let historyChain = new _base_js__WEBPACK_IMPORTED_MODULE_1__.RunnableLambda({
            func: (input, options) => this._enterHistory(input, options ?? {}),
        }).withConfig({ runName: "loadHistory" });
        const messagesKey = fields.historyMessagesKey ?? fields.inputMessagesKey;
        if (messagesKey) {
            historyChain = _passthrough_js__WEBPACK_IMPORTED_MODULE_2__.RunnablePassthrough.assign({
                [messagesKey]: historyChain,
            }).withConfig({ runName: "insertHistory" });
        }
        const bound = historyChain
            .pipe(fields.runnable.withListeners({
            onEnd: (run, config) => this._exitHistory(run, config ?? {}),
        }))
            .withConfig({ runName: "RunnableWithMessageHistory" });
        const config = fields.config ?? {};
        super({
            ...fields,
            config,
            bound,
        });
        Object.defineProperty(this, "runnable", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "inputMessagesKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "outputMessagesKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "historyMessagesKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "getMessageHistory", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.runnable = fields.runnable;
        this.getMessageHistory = fields.getMessageHistory;
        this.inputMessagesKey = fields.inputMessagesKey;
        this.outputMessagesKey = fields.outputMessagesKey;
        this.historyMessagesKey = fields.historyMessagesKey;
    }
    _getInputMessages(inputValue) {
        if (typeof inputValue === "string") {
            return [new _messages_index_js__WEBPACK_IMPORTED_MODULE_0__.HumanMessage(inputValue)];
        }
        else if (Array.isArray(inputValue)) {
            return inputValue;
        }
        else {
            return [inputValue];
        }
    }
    _getOutputMessages(
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    outputValue) {
        let newOutputValue = outputValue;
        if (!Array.isArray(outputValue) &&
            !(0,_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isBaseMessage)(outputValue) &&
            typeof outputValue !== "string") {
            newOutputValue = outputValue[this.outputMessagesKey ?? "output"];
        }
        if (typeof newOutputValue === "string") {
            return [new _messages_index_js__WEBPACK_IMPORTED_MODULE_0__.AIMessage(newOutputValue)];
        }
        else if (Array.isArray(newOutputValue)) {
            return newOutputValue;
        }
        else if ((0,_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isBaseMessage)(newOutputValue)) {
            return [newOutputValue];
        }
        throw new Error(`Expected a string, BaseMessage, or array of BaseMessages. Received: ${JSON.stringify(newOutputValue, null, 2)}`);
    }
    _enterHistory(
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    input, kwargs) {
        const history = kwargs?.config?.configurable?.messageHistory;
        if (this.historyMessagesKey) {
            return history.messages;
        }
        const inputVal = input ||
            (this.inputMessagesKey ? input[this.inputMessagesKey] : undefined);
        const historyMessages = history ? history.messages : [];
        const returnType = [
            ...historyMessages,
            ...this._getInputMessages(inputVal),
        ];
        return returnType;
    }
    async _exitHistory(run, config) {
        const history = config.configurable?.messageHistory;
        // Get input messages
        const { inputs } = run;
        const inputValue = inputs[this.inputMessagesKey ?? "input"];
        const inputMessages = this._getInputMessages(inputValue);
        // Get output messages
        const outputValue = run.outputs;
        if (!outputValue) {
            throw new Error(`Output values from 'Run' undefined. Run: ${JSON.stringify(run, null, 2)}`);
        }
        const outputMessages = this._getOutputMessages(outputValue);
        for await (const message of [...inputMessages, ...outputMessages]) {
            await history.addMessage(message);
        }
    }
    async _mergeConfig(...configs) {
        const config = await super._mergeConfig(...configs);
        // Extract sessionId
        if (!config.configurable || !config.configurable.sessionId) {
            const exampleInput = {
                [this.inputMessagesKey ?? "input"]: "foo",
            };
            const exampleConfig = { configurable: { sessionId: "123" } };
            throw new Error(`sessionId is required. Pass it in as part of the config argument to .invoke() or .stream()\n` +
                `eg. chain.invoke(${JSON.stringify(exampleInput)}, ${JSON.stringify(exampleConfig)})`);
        }
        // attach messageHistory
        const { sessionId } = config.configurable;
        config.configurable.messageHistory = await this.getMessageHistory(sessionId);
        return config;
    }
}


/***/ }),

/***/ "./node_modules/@langchain/core/dist/runnables/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/index.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RouterRunnable: function() { return /* reexport safe */ _router_js__WEBPACK_IMPORTED_MODULE_2__.RouterRunnable; },
/* harmony export */   Runnable: function() { return /* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.Runnable; },
/* harmony export */   RunnableAssign: function() { return /* reexport safe */ _passthrough_js__WEBPACK_IMPORTED_MODULE_1__.RunnableAssign; },
/* harmony export */   RunnableBinding: function() { return /* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableBinding; },
/* harmony export */   RunnableBranch: function() { return /* reexport safe */ _branch_js__WEBPACK_IMPORTED_MODULE_3__.RunnableBranch; },
/* harmony export */   RunnableEach: function() { return /* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableEach; },
/* harmony export */   RunnableLambda: function() { return /* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableLambda; },
/* harmony export */   RunnableMap: function() { return /* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableMap; },
/* harmony export */   RunnableParallel: function() { return /* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableParallel; },
/* harmony export */   RunnablePassthrough: function() { return /* reexport safe */ _passthrough_js__WEBPACK_IMPORTED_MODULE_1__.RunnablePassthrough; },
/* harmony export */   RunnableRetry: function() { return /* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableRetry; },
/* harmony export */   RunnableSequence: function() { return /* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableSequence; },
/* harmony export */   RunnableWithFallbacks: function() { return /* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableWithFallbacks; },
/* harmony export */   RunnableWithMessageHistory: function() { return /* reexport safe */ _history_js__WEBPACK_IMPORTED_MODULE_4__.RunnableWithMessageHistory; },
/* harmony export */   _coerceToRunnable: function() { return /* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__._coerceToRunnable; }
/* harmony export */ });
/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ "./node_modules/@langchain/core/dist/runnables/base.js");
/* harmony import */ var _passthrough_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./passthrough.js */ "./node_modules/@langchain/core/dist/runnables/passthrough.js");
/* harmony import */ var _router_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./router.js */ "./node_modules/@langchain/core/dist/runnables/router.js");
/* harmony import */ var _branch_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./branch.js */ "./node_modules/@langchain/core/dist/runnables/branch.js");
/* harmony import */ var _history_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./history.js */ "./node_modules/@langchain/core/dist/runnables/history.js");







/***/ }),

/***/ "./node_modules/@langchain/core/dist/runnables/passthrough.js":
/*!********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/passthrough.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RunnableAssign: function() { return /* binding */ RunnableAssign; },
/* harmony export */   RunnablePassthrough: function() { return /* binding */ RunnablePassthrough; }
/* harmony export */ });
/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ "./node_modules/@langchain/core/dist/runnables/base.js");

/**
 * A runnable that assigns key-value pairs to inputs of type `Record<string, unknown>`.
 */
class RunnableAssign extends _base_js__WEBPACK_IMPORTED_MODULE_0__.Runnable {
    constructor(mapper) {
        super();
        Object.defineProperty(this, "lc_namespace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ["langchain_core", "runnables"]
        });
        Object.defineProperty(this, "mapper", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.mapper = mapper;
    }
    async invoke(input, options) {
        const mapperResult = await this.mapper.invoke(input, options);
        return {
            ...input,
            ...mapperResult,
        };
    }
}
/**
 * A runnable to passthrough inputs unchanged or with additional keys.
 *
 * This runnable behaves almost like the identity function, except that it
 * can be configured to add additional keys to the output, if the input is
 * an object.
 *
 * The example below demonstrates how to use `RunnablePassthrough to
 * passthrough the input from the `.invoke()`
 *
 * @example
 * ```typescript
 * const chain = RunnableSequence.from([
 *   {
 *     question: new RunnablePassthrough(),
 *     context: async () => loadContextFromStore(),
 *   },
 *   prompt,
 *   llm,
 *   outputParser,
 * ]);
 * const response = await chain.invoke(
 *   "I can pass a single string instead of an object since I'm using `RunnablePassthrough`."
 * );
 * ```
 */
class RunnablePassthrough extends _base_js__WEBPACK_IMPORTED_MODULE_0__.Runnable {
    constructor() {
        super(...arguments);
        Object.defineProperty(this, "lc_namespace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ["langchain_core", "runnables"]
        });
        Object.defineProperty(this, "lc_serializable", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
    }
    static lc_name() {
        return "RunnablePassthrough";
    }
    async invoke(input, options) {
        return this._callWithConfig((input) => Promise.resolve(input), input, options);
    }
    /**
     * A runnable that assigns key-value pairs to the input.
     *
     * The example below shows how you could use it with an inline function.
     *
     * @example
     * ```typescript
     * const prompt =
     *   PromptTemplate.fromTemplate(`Write a SQL query to answer the question using the following schema: {schema}
     * Question: {question}
     * SQL Query:`);
     *
     * // The `RunnablePassthrough.assign()` is used here to passthrough the input from the `.invoke()`
     * // call (in this example it's the question), along with any inputs passed to the `.assign()` method.
     * // In this case, we're passing the schema.
     * const sqlQueryGeneratorChain = RunnableSequence.from([
     *   RunnablePassthrough.assign({
     *     schema: async () => db.getTableInfo(),
     *   }),
     *   prompt,
     *   new ChatOpenAI({}).bind({ stop: ["\nSQLResult:"] }),
     *   new StringOutputParser(),
     * ]);
     * const result = await sqlQueryGeneratorChain.invoke({
     *   question: "How many employees are there?",
     * });
     * ```
     */
    static assign(
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    mapping) {
        return new RunnableAssign(new _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableMap({ steps: mapping }));
    }
}


/***/ }),

/***/ "./node_modules/@langchain/core/dist/runnables/router.js":
/*!***************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/router.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RouterRunnable: function() { return /* binding */ RouterRunnable; }
/* harmony export */ });
/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ "./node_modules/@langchain/core/dist/runnables/base.js");

/**
 * A runnable that routes to a set of runnables based on Input['key'].
 * Returns the output of the selected runnable.
 */
class RouterRunnable extends _base_js__WEBPACK_IMPORTED_MODULE_0__.Runnable {
    static lc_name() {
        return "RouterRunnable";
    }
    constructor(fields) {
        super(fields);
        Object.defineProperty(this, "lc_namespace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ["langchain_core", "runnables"]
        });
        Object.defineProperty(this, "lc_serializable", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.defineProperty(this, "runnables", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.runnables = fields.runnables;
    }
    async invoke(input, options) {
        const { key, input: actualInput } = input;
        const runnable = this.runnables[key];
        if (runnable === undefined) {
            throw new Error(`No runnable associated with key "${key}".`);
        }
        return runnable.invoke(actualInput, options);
    }
    async batch(inputs, options, batchOptions) {
        const keys = inputs.map((input) => input.key);
        const actualInputs = inputs.map((input) => input.input);
        const missingKey = keys.find((key) => this.runnables[key] === undefined);
        if (missingKey !== undefined) {
            throw new Error(`One or more keys do not have a corresponding runnable.`);
        }
        const runnables = keys.map((key) => this.runnables[key]);
        const optionsList = this._getOptionsList(options ?? {}, inputs.length);
        const batchSize = batchOptions?.maxConcurrency && batchOptions.maxConcurrency > 0
            ? batchOptions?.maxConcurrency
            : inputs.length;
        const batchResults = [];
        for (let i = 0; i < actualInputs.length; i += batchSize) {
            const batchPromises = actualInputs
                .slice(i, i + batchSize)
                .map((actualInput, i) => runnables[i].invoke(actualInput, optionsList[i]));
            const batchResult = await Promise.all(batchPromises);
            batchResults.push(batchResult);
        }
        return batchResults.flat();
    }
    async stream(input, options) {
        const { key, input: actualInput } = input;
        const runnable = this.runnables[key];
        if (runnable === undefined) {
            throw new Error(`No runnable associated with key "${key}".`);
        }
        return runnable.stream(actualInput, options);
    }
}


/***/ }),

/***/ "./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/index.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Validator: function() { return /* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_0__.Validator; },
/* harmony export */   deepCompareStrict: function() { return /* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_0__.deepCompareStrict; },
/* harmony export */   dereference: function() { return /* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_0__.dereference; },
/* harmony export */   encodePointer: function() { return /* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_0__.encodePointer; },
/* harmony export */   escapePointer: function() { return /* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_0__.escapePointer; },
/* harmony export */   fastFormat: function() { return /* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_0__.fastFormat; },
/* harmony export */   fullFormat: function() { return /* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_0__.fullFormat; },
/* harmony export */   ignoredKeyword: function() { return /* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_0__.ignoredKeyword; },
/* harmony export */   initialBaseURI: function() { return /* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_0__.initialBaseURI; },
/* harmony export */   schemaArrayKeyword: function() { return /* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_0__.schemaArrayKeyword; },
/* harmony export */   schemaKeyword: function() { return /* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_0__.schemaKeyword; },
/* harmony export */   schemaMapKeyword: function() { return /* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_0__.schemaMapKeyword; },
/* harmony export */   ucs2length: function() { return /* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_0__.ucs2length; },
/* harmony export */   validate: function() { return /* reexport safe */ _src_index_js__WEBPACK_IMPORTED_MODULE_0__.validate; }
/* harmony export */ });
/* harmony import */ var _src_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/index.js */ "./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/index.js");



/***/ }),

/***/ "./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/deep-compare-strict.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/deep-compare-strict.js ***!
  \**************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   deepCompareStrict: function() { return /* binding */ deepCompareStrict; }
/* harmony export */ });
function deepCompareStrict(a, b) {
    const typeofa = typeof a;
    if (typeofa !== typeof b) {
        return false;
    }
    if (Array.isArray(a)) {
        if (!Array.isArray(b)) {
            return false;
        }
        const length = a.length;
        if (length !== b.length) {
            return false;
        }
        for (let i = 0; i < length; i++) {
            if (!deepCompareStrict(a[i], b[i])) {
                return false;
            }
        }
        return true;
    }
    if (typeofa === "object") {
        if (!a || !b) {
            return a === b;
        }
        const aKeys = Object.keys(a);
        const bKeys = Object.keys(b);
        const length = aKeys.length;
        if (length !== bKeys.length) {
            return false;
        }
        for (const k of aKeys) {
            if (!deepCompareStrict(a[k], b[k])) {
                return false;
            }
        }
        return true;
    }
    return a === b;
}


/***/ }),

/***/ "./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/dereference.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/dereference.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   dereference: function() { return /* binding */ dereference; },
/* harmony export */   ignoredKeyword: function() { return /* binding */ ignoredKeyword; },
/* harmony export */   initialBaseURI: function() { return /* binding */ initialBaseURI; },
/* harmony export */   schemaArrayKeyword: function() { return /* binding */ schemaArrayKeyword; },
/* harmony export */   schemaKeyword: function() { return /* binding */ schemaKeyword; },
/* harmony export */   schemaMapKeyword: function() { return /* binding */ schemaMapKeyword; }
/* harmony export */ });
/* harmony import */ var _pointer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pointer.js */ "./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/pointer.js");

const schemaKeyword = {
    additionalItems: true,
    unevaluatedItems: true,
    items: true,
    contains: true,
    additionalProperties: true,
    unevaluatedProperties: true,
    propertyNames: true,
    not: true,
    if: true,
    then: true,
    else: true,
};
const schemaArrayKeyword = {
    prefixItems: true,
    items: true,
    allOf: true,
    anyOf: true,
    oneOf: true,
};
const schemaMapKeyword = {
    $defs: true,
    definitions: true,
    properties: true,
    patternProperties: true,
    dependentSchemas: true,
};
const ignoredKeyword = {
    id: true,
    $id: true,
    $ref: true,
    $schema: true,
    $anchor: true,
    $vocabulary: true,
    $comment: true,
    default: true,
    enum: true,
    const: true,
    required: true,
    type: true,
    maximum: true,
    minimum: true,
    exclusiveMaximum: true,
    exclusiveMinimum: true,
    multipleOf: true,
    maxLength: true,
    minLength: true,
    pattern: true,
    format: true,
    maxItems: true,
    minItems: true,
    uniqueItems: true,
    maxProperties: true,
    minProperties: true,
};
/**
 * Default base URI for schemas without an $id.
 * https://json-schema.org/draft/2019-09/json-schema-core.html#initial-base
 * https://tools.ietf.org/html/rfc3986#section-5.1
 */
let initialBaseURI = 
// @ts-ignore
typeof self !== "undefined" && self.location
    ? //@ts-ignore
        /* #__PURE__ */ new URL(self.location.origin + self.location.pathname + location.search)
    : /* #__PURE__ */ new URL("https://github.com/cfworker");
function dereference(schema, lookup = Object.create(null), baseURI = initialBaseURI, basePointer = "") {
    if (schema && typeof schema === "object" && !Array.isArray(schema)) {
        const id = schema.$id || schema.id;
        if (id) {
            const url = new URL(id, baseURI.href);
            if (url.hash.length > 1) {
                lookup[url.href] = schema;
            }
            else {
                url.hash = ""; // normalize hash https://url.spec.whatwg.org/#dom-url-hash
                if (basePointer === "") {
                    baseURI = url;
                }
                else {
                    dereference(schema, lookup, baseURI);
                }
            }
        }
    }
    else if (schema !== true && schema !== false) {
        return lookup;
    }
    // compute the schema's URI and add it to the mapping.
    const schemaURI = baseURI.href + (basePointer ? "#" + basePointer : "");
    if (lookup[schemaURI] !== undefined) {
        throw new Error(`Duplicate schema URI "${schemaURI}".`);
    }
    lookup[schemaURI] = schema;
    // exit early if this is a boolean schema.
    if (schema === true || schema === false) {
        return lookup;
    }
    // set the schema's absolute URI.
    if (schema.__absolute_uri__ === undefined) {
        Object.defineProperty(schema, "__absolute_uri__", {
            enumerable: false,
            value: schemaURI,
        });
    }
    // if a $ref is found, resolve it's absolute URI.
    if (schema.$ref && schema.__absolute_ref__ === undefined) {
        const url = new URL(schema.$ref, baseURI.href);
        url.hash = url.hash; // normalize hash https://url.spec.whatwg.org/#dom-url-hash
        Object.defineProperty(schema, "__absolute_ref__", {
            enumerable: false,
            value: url.href,
        });
    }
    // if a $recursiveRef is found, resolve it's absolute URI.
    if (schema.$recursiveRef && schema.__absolute_recursive_ref__ === undefined) {
        const url = new URL(schema.$recursiveRef, baseURI.href);
        url.hash = url.hash; // normalize hash https://url.spec.whatwg.org/#dom-url-hash
        Object.defineProperty(schema, "__absolute_recursive_ref__", {
            enumerable: false,
            value: url.href,
        });
    }
    // if an $anchor is found, compute it's URI and add it to the mapping.
    if (schema.$anchor) {
        const url = new URL("#" + schema.$anchor, baseURI.href);
        lookup[url.href] = schema;
    }
    // process subschemas.
    for (let key in schema) {
        if (ignoredKeyword[key]) {
            continue;
        }
        const keyBase = `${basePointer}/${(0,_pointer_js__WEBPACK_IMPORTED_MODULE_0__.encodePointer)(key)}`;
        const subSchema = schema[key];
        if (Array.isArray(subSchema)) {
            if (schemaArrayKeyword[key]) {
                const length = subSchema.length;
                for (let i = 0; i < length; i++) {
                    dereference(subSchema[i], lookup, baseURI, `${keyBase}/${i}`);
                }
            }
        }
        else if (schemaMapKeyword[key]) {
            for (let subKey in subSchema) {
                dereference(subSchema[subKey], lookup, baseURI, `${keyBase}/${(0,_pointer_js__WEBPACK_IMPORTED_MODULE_0__.encodePointer)(subKey)}`);
            }
        }
        else {
            dereference(subSchema, lookup, baseURI, keyBase);
        }
    }
    return lookup;
}
// schema identification examples
// https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.appendix.A
// $ref delegation
// https://github.com/json-schema-org/json-schema-spec/issues/514
// output format
// https://json-schema.org/draft/2019-09/json-schema-core.html#output
// JSON pointer
// https://tools.ietf.org/html/rfc6901
// JSON relative pointer
// https://tools.ietf.org/html/draft-handrews-relative-json-pointer-01


/***/ }),

/***/ "./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/format.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/format.js ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   fastFormat: function() { return /* binding */ fastFormat; },
/* harmony export */   fullFormat: function() { return /* binding */ fullFormat; }
/* harmony export */ });
// based on https://github.com/epoberezkin/ajv/blob/master/lib/compile/formats.js
const DATE = /^(\d\d\d\d)-(\d\d)-(\d\d)$/;
const DAYS = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
const TIME = /^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d(?::?\d\d)?)?$/i;
const HOSTNAME = /^(?=.{1,253}\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\.?$/i;
// const URI = /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
const URIREF = /^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
// uri-template: https://tools.ietf.org/html/rfc6570
const URITEMPLATE = /^(?:(?:[^\x00-\x20"'<>%\\^`{|}]|%[0-9a-f]{2})|\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?)*\})*$/i;
// For the source: https://gist.github.com/dperini/729294
// For test cases: https://mathiasbynens.be/demo/url-regex
const URL_ = /^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u{00a1}-\u{ffff}0-9]+-?)*[a-z\u{00a1}-\u{ffff}0-9]+)(?:\.(?:[a-z\u{00a1}-\u{ffff}0-9]+-?)*[a-z\u{00a1}-\u{ffff}0-9]+)*(?:\.(?:[a-z\u{00a1}-\u{ffff}]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/iu;
const UUID = /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i;
const JSON_POINTER = /^(?:\/(?:[^~/]|~0|~1)*)*$/;
const JSON_POINTER_URI_FRAGMENT = /^#(?:\/(?:[a-z0-9_\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i;
const RELATIVE_JSON_POINTER = /^(?:0|[1-9][0-9]*)(?:#|(?:\/(?:[^~/]|~0|~1)*)*)$/;
// date: http://tools.ietf.org/html/rfc3339#section-5.6
const FASTDATE = /^\d\d\d\d-[0-1]\d-[0-3]\d$/;
// date-time: http://tools.ietf.org/html/rfc3339#section-5.6
const FASTTIME = /^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)?$/i;
const FASTDATETIME = /^\d\d\d\d-[0-1]\d-[0-3]\d[t\s](?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)$/i;
// uri: https://github.com/mafintosh/is-my-json-valid/blob/master/formats.js
// const FASTURI = /^(?:[a-z][a-z0-9+-.]*:)(?:\/?\/)?[^\s]*$/i;
const FASTURIREFERENCE = /^(?:(?:[a-z][a-z0-9+-.]*:)?\/?\/)?(?:[^\\\s#][^\s#]*)?(?:#[^\\\s]*)?$/i;
// https://github.com/ExodusMovement/schemasafe/blob/master/src/formats.js
const EMAIL = (input) => {
    if (input[0] === '"')
        return false;
    const [name, host, ...rest] = input.split("@");
    if (!name ||
        !host ||
        rest.length !== 0 ||
        name.length > 64 ||
        host.length > 253)
        return false;
    if (name[0] === "." || name.endsWith(".") || name.includes(".."))
        return false;
    if (!/^[a-z0-9.-]+$/i.test(host) ||
        !/^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+$/i.test(name))
        return false;
    return host
        .split(".")
        .every((part) => /^[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?$/i.test(part));
};
// optimized https://www.safaribooksonline.com/library/view/regular-expressions-cookbook/9780596802837/ch07s16.html
const IPV4 = /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/;
// optimized http://stackoverflow.com/questions/53497/regular-expression-that-matches-valid-ipv6-addresses
const IPV6 = /^((([0-9a-f]{1,4}:){7}([0-9a-f]{1,4}|:))|(([0-9a-f]{1,4}:){6}(:[0-9a-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9a-f]{1,4}:){5}(((:[0-9a-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9a-f]{1,4}:){4}(((:[0-9a-f]{1,4}){1,3})|((:[0-9a-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){3}(((:[0-9a-f]{1,4}){1,4})|((:[0-9a-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){2}(((:[0-9a-f]{1,4}){1,5})|((:[0-9a-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){1}(((:[0-9a-f]{1,4}){1,6})|((:[0-9a-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9a-f]{1,4}){1,7})|((:[0-9a-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))$/i;
// https://github.com/ExodusMovement/schemasafe/blob/master/src/formats.js
const DURATION = (input) => input.length > 1 &&
    input.length < 80 &&
    (/^P\d+([.,]\d+)?W$/.test(input) ||
        (/^P[\dYMDTHS]*(\d[.,]\d+)?[YMDHS]$/.test(input) &&
            /^P([.,\d]+Y)?([.,\d]+M)?([.,\d]+D)?(T([.,\d]+H)?([.,\d]+M)?([.,\d]+S)?)?$/.test(input)));
function bind(r) {
    return r.test.bind(r);
}
const fullFormat = {
    date,
    time: /* #__PURE__ */ time.bind(undefined, false),
    "date-time": date_time,
    duration: DURATION,
    uri,
    "uri-reference": /* #__PURE__ */ bind(URIREF),
    "uri-template": /* #__PURE__ */ bind(URITEMPLATE),
    url: /* #__PURE__ */ bind(URL_),
    email: EMAIL,
    hostname: /* #__PURE__ */ bind(HOSTNAME),
    ipv4: /* #__PURE__ */ bind(IPV4),
    ipv6: /* #__PURE__ */ bind(IPV6),
    regex: regex,
    uuid: /* #__PURE__ */ bind(UUID),
    "json-pointer": /* #__PURE__ */ bind(JSON_POINTER),
    "json-pointer-uri-fragment": /* #__PURE__ */ bind(JSON_POINTER_URI_FRAGMENT),
    "relative-json-pointer": /* #__PURE__ */ bind(RELATIVE_JSON_POINTER),
};
const fastFormat = {
    ...fullFormat,
    date: /* #__PURE__ */ bind(FASTDATE),
    time: /* #__PURE__ */ bind(FASTTIME),
    "date-time": /* #__PURE__ */ bind(FASTDATETIME),
    "uri-reference": /* #__PURE__ */ bind(FASTURIREFERENCE),
};
function isLeapYear(year) {
    // https://tools.ietf.org/html/rfc3339#appendix-C
    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
}
function date(str) {
    // full-date from http://tools.ietf.org/html/rfc3339#section-5.6
    const matches = str.match(DATE);
    if (!matches)
        return false;
    const year = +matches[1];
    const month = +matches[2];
    const day = +matches[3];
    return (month >= 1 &&
        month <= 12 &&
        day >= 1 &&
        day <= (month == 2 && isLeapYear(year) ? 29 : DAYS[month]));
}
function time(full, str) {
    const matches = str.match(TIME);
    if (!matches)
        return false;
    const hour = +matches[1];
    const minute = +matches[2];
    const second = +matches[3];
    const timeZone = !!matches[5];
    return (((hour <= 23 && minute <= 59 && second <= 59) ||
        (hour == 23 && minute == 59 && second == 60)) &&
        (!full || timeZone));
}
const DATE_TIME_SEPARATOR = /t|\s/i;
function date_time(str) {
    // http://tools.ietf.org/html/rfc3339#section-5.6
    const dateTime = str.split(DATE_TIME_SEPARATOR);
    return dateTime.length == 2 && date(dateTime[0]) && time(true, dateTime[1]);
}
const NOT_URI_FRAGMENT = /\/|:/;
const URI_PATTERN = /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
function uri(str) {
    // http://jmrware.com/articles/2009/uri_regexp/URI_regex.html + optional protocol + required "."
    return NOT_URI_FRAGMENT.test(str) && URI_PATTERN.test(str);
}
const Z_ANCHOR = /[^\\]\\Z/;
function regex(str) {
    if (Z_ANCHOR.test(str))
        return false;
    try {
        new RegExp(str);
        return true;
    }
    catch (e) {
        return false;
    }
}


/***/ }),

/***/ "./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/index.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/index.js ***!
  \************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Validator: function() { return /* reexport safe */ _validator_js__WEBPACK_IMPORTED_MODULE_7__.Validator; },
/* harmony export */   deepCompareStrict: function() { return /* reexport safe */ _deep_compare_strict_js__WEBPACK_IMPORTED_MODULE_0__.deepCompareStrict; },
/* harmony export */   dereference: function() { return /* reexport safe */ _dereference_js__WEBPACK_IMPORTED_MODULE_1__.dereference; },
/* harmony export */   encodePointer: function() { return /* reexport safe */ _pointer_js__WEBPACK_IMPORTED_MODULE_3__.encodePointer; },
/* harmony export */   escapePointer: function() { return /* reexport safe */ _pointer_js__WEBPACK_IMPORTED_MODULE_3__.escapePointer; },
/* harmony export */   fastFormat: function() { return /* reexport safe */ _format_js__WEBPACK_IMPORTED_MODULE_2__.fastFormat; },
/* harmony export */   fullFormat: function() { return /* reexport safe */ _format_js__WEBPACK_IMPORTED_MODULE_2__.fullFormat; },
/* harmony export */   ignoredKeyword: function() { return /* reexport safe */ _dereference_js__WEBPACK_IMPORTED_MODULE_1__.ignoredKeyword; },
/* harmony export */   initialBaseURI: function() { return /* reexport safe */ _dereference_js__WEBPACK_IMPORTED_MODULE_1__.initialBaseURI; },
/* harmony export */   schemaArrayKeyword: function() { return /* reexport safe */ _dereference_js__WEBPACK_IMPORTED_MODULE_1__.schemaArrayKeyword; },
/* harmony export */   schemaKeyword: function() { return /* reexport safe */ _dereference_js__WEBPACK_IMPORTED_MODULE_1__.schemaKeyword; },
/* harmony export */   schemaMapKeyword: function() { return /* reexport safe */ _dereference_js__WEBPACK_IMPORTED_MODULE_1__.schemaMapKeyword; },
/* harmony export */   ucs2length: function() { return /* reexport safe */ _ucs2_length_js__WEBPACK_IMPORTED_MODULE_5__.ucs2length; },
/* harmony export */   validate: function() { return /* reexport safe */ _validate_js__WEBPACK_IMPORTED_MODULE_6__.validate; }
/* harmony export */ });
/* harmony import */ var _deep_compare_strict_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deep-compare-strict.js */ "./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/deep-compare-strict.js");
/* harmony import */ var _dereference_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dereference.js */ "./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/dereference.js");
/* harmony import */ var _format_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./format.js */ "./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/format.js");
/* harmony import */ var _pointer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pointer.js */ "./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/pointer.js");
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./types.js */ "./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/types.js");
/* harmony import */ var _ucs2_length_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ucs2-length.js */ "./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/ucs2-length.js");
/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./validate.js */ "./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/validate.js");
/* harmony import */ var _validator_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./validator.js */ "./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/validator.js");










/***/ }),

/***/ "./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/pointer.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/pointer.js ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   encodePointer: function() { return /* binding */ encodePointer; },
/* harmony export */   escapePointer: function() { return /* binding */ escapePointer; }
/* harmony export */ });
function encodePointer(p) {
    return encodeURI(escapePointer(p));
}
function escapePointer(p) {
    return p.replace(/~/g, "~0").replace(/\//g, "~1");
}


/***/ }),

/***/ "./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/types.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/types.js ***!
  \************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/ucs2-length.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/ucs2-length.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ucs2length: function() { return /* binding */ ucs2length; }
/* harmony export */ });
/**
 * Get UCS-2 length of a string
 * https://mathiasbynens.be/notes/javascript-encoding
 * https://github.com/bestiejs/punycode.js - punycode.ucs2.decode
 */
function ucs2length(s) {
    let result = 0;
    let length = s.length;
    let index = 0;
    let charCode;
    while (index < length) {
        result++;
        charCode = s.charCodeAt(index++);
        if (charCode >= 0xd800 && charCode <= 0xdbff && index < length) {
            // high surrogate, and there is a next character
            charCode = s.charCodeAt(index);
            if ((charCode & 0xfc00) == 0xdc00) {
                // low surrogate
                index++;
            }
        }
    }
    return result;
}


/***/ }),

/***/ "./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/validate.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/validate.js ***!
  \***************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   validate: function() { return /* binding */ validate; }
/* harmony export */ });
/* harmony import */ var _deep_compare_strict_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deep-compare-strict.js */ "./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/deep-compare-strict.js");
/* harmony import */ var _dereference_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dereference.js */ "./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/dereference.js");
/* harmony import */ var _format_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./format.js */ "./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/format.js");
/* harmony import */ var _pointer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pointer.js */ "./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/pointer.js");
/* harmony import */ var _ucs2_length_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ucs2-length.js */ "./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/ucs2-length.js");





function validate(instance, schema, draft = "2019-09", lookup = (0,_dereference_js__WEBPACK_IMPORTED_MODULE_1__.dereference)(schema), shortCircuit = true, recursiveAnchor = null, instanceLocation = "#", schemaLocation = "#", evaluated = Object.create(null)) {
    if (schema === true) {
        return { valid: true, errors: [] };
    }
    if (schema === false) {
        return {
            valid: false,
            errors: [
                {
                    instanceLocation,
                    keyword: "false",
                    keywordLocation: instanceLocation,
                    error: "False boolean schema.",
                },
            ],
        };
    }
    const rawInstanceType = typeof instance;
    let instanceType;
    switch (rawInstanceType) {
        case "boolean":
        case "number":
        case "string":
            instanceType = rawInstanceType;
            break;
        case "object":
            if (instance === null) {
                instanceType = "null";
            }
            else if (Array.isArray(instance)) {
                instanceType = "array";
            }
            else {
                instanceType = "object";
            }
            break;
        default:
            // undefined, bigint, function, symbol
            throw new Error(`Instances of "${rawInstanceType}" type are not supported.`);
    }
    const { $ref, $recursiveRef, $recursiveAnchor, type: $type, const: $const, enum: $enum, required: $required, not: $not, anyOf: $anyOf, allOf: $allOf, oneOf: $oneOf, if: $if, then: $then, else: $else, format: $format, properties: $properties, patternProperties: $patternProperties, additionalProperties: $additionalProperties, unevaluatedProperties: $unevaluatedProperties, minProperties: $minProperties, maxProperties: $maxProperties, propertyNames: $propertyNames, dependentRequired: $dependentRequired, dependentSchemas: $dependentSchemas, dependencies: $dependencies, prefixItems: $prefixItems, items: $items, additionalItems: $additionalItems, unevaluatedItems: $unevaluatedItems, contains: $contains, minContains: $minContains, maxContains: $maxContains, minItems: $minItems, maxItems: $maxItems, uniqueItems: $uniqueItems, minimum: $minimum, maximum: $maximum, exclusiveMinimum: $exclusiveMinimum, exclusiveMaximum: $exclusiveMaximum, multipleOf: $multipleOf, minLength: $minLength, maxLength: $maxLength, pattern: $pattern, __absolute_ref__, __absolute_recursive_ref__, } = schema;
    const errors = [];
    if ($recursiveAnchor === true && recursiveAnchor === null) {
        recursiveAnchor = schema;
    }
    if ($recursiveRef === "#") {
        const refSchema = recursiveAnchor === null
            ? lookup[__absolute_recursive_ref__]
            : recursiveAnchor;
        const keywordLocation = `${schemaLocation}/$recursiveRef`;
        const result = validate(instance, recursiveAnchor === null ? schema : recursiveAnchor, draft, lookup, shortCircuit, refSchema, instanceLocation, keywordLocation, evaluated);
        if (!result.valid) {
            errors.push({
                instanceLocation,
                keyword: "$recursiveRef",
                keywordLocation,
                error: "A subschema had errors.",
            }, ...result.errors);
        }
    }
    if ($ref !== undefined) {
        const uri = __absolute_ref__ || $ref;
        const refSchema = lookup[uri];
        if (refSchema === undefined) {
            let message = `Unresolved $ref "${$ref}".`;
            if (__absolute_ref__ && __absolute_ref__ !== $ref) {
                message += `  Absolute URI "${__absolute_ref__}".`;
            }
            message += `\nKnown schemas:\n- ${Object.keys(lookup).join("\n- ")}`;
            throw new Error(message);
        }
        const keywordLocation = `${schemaLocation}/$ref`;
        const result = validate(instance, refSchema, draft, lookup, shortCircuit, recursiveAnchor, instanceLocation, keywordLocation, evaluated);
        if (!result.valid) {
            errors.push({
                instanceLocation,
                keyword: "$ref",
                keywordLocation,
                error: "A subschema had errors.",
            }, ...result.errors);
        }
        if (draft === "4" || draft === "7") {
            return { valid: errors.length === 0, errors };
        }
    }
    if (Array.isArray($type)) {
        let length = $type.length;
        let valid = false;
        for (let i = 0; i < length; i++) {
            if (instanceType === $type[i] ||
                ($type[i] === "integer" &&
                    instanceType === "number" &&
                    instance % 1 === 0 &&
                    instance === instance)) {
                valid = true;
                break;
            }
        }
        if (!valid) {
            errors.push({
                instanceLocation,
                keyword: "type",
                keywordLocation: `${schemaLocation}/type`,
                error: `Instance type "${instanceType}" is invalid. Expected "${$type.join('", "')}".`,
            });
        }
    }
    else if ($type === "integer") {
        if (instanceType !== "number" || instance % 1 || instance !== instance) {
            errors.push({
                instanceLocation,
                keyword: "type",
                keywordLocation: `${schemaLocation}/type`,
                error: `Instance type "${instanceType}" is invalid. Expected "${$type}".`,
            });
        }
    }
    else if ($type !== undefined && instanceType !== $type) {
        errors.push({
            instanceLocation,
            keyword: "type",
            keywordLocation: `${schemaLocation}/type`,
            error: `Instance type "${instanceType}" is invalid. Expected "${$type}".`,
        });
    }
    if ($const !== undefined) {
        if (instanceType === "object" || instanceType === "array") {
            if (!(0,_deep_compare_strict_js__WEBPACK_IMPORTED_MODULE_0__.deepCompareStrict)(instance, $const)) {
                errors.push({
                    instanceLocation,
                    keyword: "const",
                    keywordLocation: `${schemaLocation}/const`,
                    error: `Instance does not match ${JSON.stringify($const)}.`,
                });
            }
        }
        else if (instance !== $const) {
            errors.push({
                instanceLocation,
                keyword: "const",
                keywordLocation: `${schemaLocation}/const`,
                error: `Instance does not match ${JSON.stringify($const)}.`,
            });
        }
    }
    if ($enum !== undefined) {
        if (instanceType === "object" || instanceType === "array") {
            if (!$enum.some((value) => (0,_deep_compare_strict_js__WEBPACK_IMPORTED_MODULE_0__.deepCompareStrict)(instance, value))) {
                errors.push({
                    instanceLocation,
                    keyword: "enum",
                    keywordLocation: `${schemaLocation}/enum`,
                    error: `Instance does not match any of ${JSON.stringify($enum)}.`,
                });
            }
        }
        else if (!$enum.some((value) => instance === value)) {
            errors.push({
                instanceLocation,
                keyword: "enum",
                keywordLocation: `${schemaLocation}/enum`,
                error: `Instance does not match any of ${JSON.stringify($enum)}.`,
            });
        }
    }
    if ($not !== undefined) {
        const keywordLocation = `${schemaLocation}/not`;
        const result = validate(instance, $not, draft, lookup, shortCircuit, recursiveAnchor, instanceLocation, keywordLocation /*,
        evaluated*/);
        if (result.valid) {
            errors.push({
                instanceLocation,
                keyword: "not",
                keywordLocation,
                error: 'Instance matched "not" schema.',
            });
        }
    }
    let subEvaluateds = [];
    if ($anyOf !== undefined) {
        const keywordLocation = `${schemaLocation}/anyOf`;
        const errorsLength = errors.length;
        let anyValid = false;
        for (let i = 0; i < $anyOf.length; i++) {
            const subSchema = $anyOf[i];
            const subEvaluated = Object.create(evaluated);
            const result = validate(instance, subSchema, draft, lookup, shortCircuit, $recursiveAnchor === true ? recursiveAnchor : null, instanceLocation, `${keywordLocation}/${i}`, subEvaluated);
            errors.push(...result.errors);
            anyValid = anyValid || result.valid;
            if (result.valid) {
                subEvaluateds.push(subEvaluated);
            }
        }
        if (anyValid) {
            errors.length = errorsLength;
        }
        else {
            errors.splice(errorsLength, 0, {
                instanceLocation,
                keyword: "anyOf",
                keywordLocation,
                error: "Instance does not match any subschemas.",
            });
        }
    }
    if ($allOf !== undefined) {
        const keywordLocation = `${schemaLocation}/allOf`;
        const errorsLength = errors.length;
        let allValid = true;
        for (let i = 0; i < $allOf.length; i++) {
            const subSchema = $allOf[i];
            const subEvaluated = Object.create(evaluated);
            const result = validate(instance, subSchema, draft, lookup, shortCircuit, $recursiveAnchor === true ? recursiveAnchor : null, instanceLocation, `${keywordLocation}/${i}`, subEvaluated);
            errors.push(...result.errors);
            allValid = allValid && result.valid;
            if (result.valid) {
                subEvaluateds.push(subEvaluated);
            }
        }
        if (allValid) {
            errors.length = errorsLength;
        }
        else {
            errors.splice(errorsLength, 0, {
                instanceLocation,
                keyword: "allOf",
                keywordLocation,
                error: `Instance does not match every subschema.`,
            });
        }
    }
    if ($oneOf !== undefined) {
        const keywordLocation = `${schemaLocation}/oneOf`;
        const errorsLength = errors.length;
        const matches = $oneOf.filter((subSchema, i) => {
            const subEvaluated = Object.create(evaluated);
            const result = validate(instance, subSchema, draft, lookup, shortCircuit, $recursiveAnchor === true ? recursiveAnchor : null, instanceLocation, `${keywordLocation}/${i}`, subEvaluated);
            errors.push(...result.errors);
            if (result.valid) {
                subEvaluateds.push(subEvaluated);
            }
            return result.valid;
        }).length;
        if (matches === 1) {
            errors.length = errorsLength;
        }
        else {
            errors.splice(errorsLength, 0, {
                instanceLocation,
                keyword: "oneOf",
                keywordLocation,
                error: `Instance does not match exactly one subschema (${matches} matches).`,
            });
        }
    }
    if (instanceType === "object" || instanceType === "array") {
        Object.assign(evaluated, ...subEvaluateds);
    }
    if ($if !== undefined) {
        const keywordLocation = `${schemaLocation}/if`;
        const conditionResult = validate(instance, $if, draft, lookup, shortCircuit, recursiveAnchor, instanceLocation, keywordLocation, evaluated).valid;
        if (conditionResult) {
            if ($then !== undefined) {
                const thenResult = validate(instance, $then, draft, lookup, shortCircuit, recursiveAnchor, instanceLocation, `${schemaLocation}/then`, evaluated);
                if (!thenResult.valid) {
                    errors.push({
                        instanceLocation,
                        keyword: "if",
                        keywordLocation,
                        error: `Instance does not match "then" schema.`,
                    }, ...thenResult.errors);
                }
            }
        }
        else if ($else !== undefined) {
            const elseResult = validate(instance, $else, draft, lookup, shortCircuit, recursiveAnchor, instanceLocation, `${schemaLocation}/else`, evaluated);
            if (!elseResult.valid) {
                errors.push({
                    instanceLocation,
                    keyword: "if",
                    keywordLocation,
                    error: `Instance does not match "else" schema.`,
                }, ...elseResult.errors);
            }
        }
    }
    if (instanceType === "object") {
        if ($required !== undefined) {
            for (const key of $required) {
                if (!(key in instance)) {
                    errors.push({
                        instanceLocation,
                        keyword: "required",
                        keywordLocation: `${schemaLocation}/required`,
                        error: `Instance does not have required property "${key}".`,
                    });
                }
            }
        }
        const keys = Object.keys(instance);
        if ($minProperties !== undefined && keys.length < $minProperties) {
            errors.push({
                instanceLocation,
                keyword: "minProperties",
                keywordLocation: `${schemaLocation}/minProperties`,
                error: `Instance does not have at least ${$minProperties} properties.`,
            });
        }
        if ($maxProperties !== undefined && keys.length > $maxProperties) {
            errors.push({
                instanceLocation,
                keyword: "maxProperties",
                keywordLocation: `${schemaLocation}/maxProperties`,
                error: `Instance does not have at least ${$maxProperties} properties.`,
            });
        }
        if ($propertyNames !== undefined) {
            const keywordLocation = `${schemaLocation}/propertyNames`;
            for (const key in instance) {
                const subInstancePointer = `${instanceLocation}/${(0,_pointer_js__WEBPACK_IMPORTED_MODULE_3__.encodePointer)(key)}`;
                const result = validate(key, $propertyNames, draft, lookup, shortCircuit, recursiveAnchor, subInstancePointer, keywordLocation);
                if (!result.valid) {
                    errors.push({
                        instanceLocation,
                        keyword: "propertyNames",
                        keywordLocation,
                        error: `Property name "${key}" does not match schema.`,
                    }, ...result.errors);
                }
            }
        }
        if ($dependentRequired !== undefined) {
            const keywordLocation = `${schemaLocation}/dependantRequired`;
            for (const key in $dependentRequired) {
                if (key in instance) {
                    const required = $dependentRequired[key];
                    for (const dependantKey of required) {
                        if (!(dependantKey in instance)) {
                            errors.push({
                                instanceLocation,
                                keyword: "dependentRequired",
                                keywordLocation,
                                error: `Instance has "${key}" but does not have "${dependantKey}".`,
                            });
                        }
                    }
                }
            }
        }
        if ($dependentSchemas !== undefined) {
            for (const key in $dependentSchemas) {
                const keywordLocation = `${schemaLocation}/dependentSchemas`;
                if (key in instance) {
                    const result = validate(instance, $dependentSchemas[key], draft, lookup, shortCircuit, recursiveAnchor, instanceLocation, `${keywordLocation}/${(0,_pointer_js__WEBPACK_IMPORTED_MODULE_3__.encodePointer)(key)}`, evaluated);
                    if (!result.valid) {
                        errors.push({
                            instanceLocation,
                            keyword: "dependentSchemas",
                            keywordLocation,
                            error: `Instance has "${key}" but does not match dependant schema.`,
                        }, ...result.errors);
                    }
                }
            }
        }
        if ($dependencies !== undefined) {
            const keywordLocation = `${schemaLocation}/dependencies`;
            for (const key in $dependencies) {
                if (key in instance) {
                    const propsOrSchema = $dependencies[key];
                    if (Array.isArray(propsOrSchema)) {
                        for (const dependantKey of propsOrSchema) {
                            if (!(dependantKey in instance)) {
                                errors.push({
                                    instanceLocation,
                                    keyword: "dependencies",
                                    keywordLocation,
                                    error: `Instance has "${key}" but does not have "${dependantKey}".`,
                                });
                            }
                        }
                    }
                    else {
                        const result = validate(instance, propsOrSchema, draft, lookup, shortCircuit, recursiveAnchor, instanceLocation, `${keywordLocation}/${(0,_pointer_js__WEBPACK_IMPORTED_MODULE_3__.encodePointer)(key)}`);
                        if (!result.valid) {
                            errors.push({
                                instanceLocation,
                                keyword: "dependencies",
                                keywordLocation,
                                error: `Instance has "${key}" but does not match dependant schema.`,
                            }, ...result.errors);
                        }
                    }
                }
            }
        }
        const thisEvaluated = Object.create(null);
        let stop = false;
        if ($properties !== undefined) {
            const keywordLocation = `${schemaLocation}/properties`;
            for (const key in $properties) {
                if (!(key in instance)) {
                    continue;
                }
                const subInstancePointer = `${instanceLocation}/${(0,_pointer_js__WEBPACK_IMPORTED_MODULE_3__.encodePointer)(key)}`;
                const result = validate(instance[key], $properties[key], draft, lookup, shortCircuit, recursiveAnchor, subInstancePointer, `${keywordLocation}/${(0,_pointer_js__WEBPACK_IMPORTED_MODULE_3__.encodePointer)(key)}`);
                if (result.valid) {
                    evaluated[key] = thisEvaluated[key] = true;
                }
                else {
                    stop = shortCircuit;
                    errors.push({
                        instanceLocation,
                        keyword: "properties",
                        keywordLocation,
                        error: `Property "${key}" does not match schema.`,
                    }, ...result.errors);
                    if (stop)
                        break;
                }
            }
        }
        if (!stop && $patternProperties !== undefined) {
            const keywordLocation = `${schemaLocation}/patternProperties`;
            for (const pattern in $patternProperties) {
                const regex = new RegExp(pattern);
                const subSchema = $patternProperties[pattern];
                for (const key in instance) {
                    if (!regex.test(key)) {
                        continue;
                    }
                    const subInstancePointer = `${instanceLocation}/${(0,_pointer_js__WEBPACK_IMPORTED_MODULE_3__.encodePointer)(key)}`;
                    const result = validate(instance[key], subSchema, draft, lookup, shortCircuit, recursiveAnchor, subInstancePointer, `${keywordLocation}/${(0,_pointer_js__WEBPACK_IMPORTED_MODULE_3__.encodePointer)(pattern)}`);
                    if (result.valid) {
                        evaluated[key] = thisEvaluated[key] = true;
                    }
                    else {
                        stop = shortCircuit;
                        errors.push({
                            instanceLocation,
                            keyword: "patternProperties",
                            keywordLocation,
                            error: `Property "${key}" matches pattern "${pattern}" but does not match associated schema.`,
                        }, ...result.errors);
                    }
                }
            }
        }
        if (!stop && $additionalProperties !== undefined) {
            const keywordLocation = `${schemaLocation}/additionalProperties`;
            for (const key in instance) {
                if (thisEvaluated[key]) {
                    continue;
                }
                const subInstancePointer = `${instanceLocation}/${(0,_pointer_js__WEBPACK_IMPORTED_MODULE_3__.encodePointer)(key)}`;
                const result = validate(instance[key], $additionalProperties, draft, lookup, shortCircuit, recursiveAnchor, subInstancePointer, keywordLocation);
                if (result.valid) {
                    evaluated[key] = true;
                }
                else {
                    stop = shortCircuit;
                    errors.push({
                        instanceLocation,
                        keyword: "additionalProperties",
                        keywordLocation,
                        error: `Property "${key}" does not match additional properties schema.`,
                    }, ...result.errors);
                }
            }
        }
        else if (!stop && $unevaluatedProperties !== undefined) {
            const keywordLocation = `${schemaLocation}/unevaluatedProperties`;
            for (const key in instance) {
                if (!evaluated[key]) {
                    const subInstancePointer = `${instanceLocation}/${(0,_pointer_js__WEBPACK_IMPORTED_MODULE_3__.encodePointer)(key)}`;
                    const result = validate(instance[key], $unevaluatedProperties, draft, lookup, shortCircuit, recursiveAnchor, subInstancePointer, keywordLocation);
                    if (result.valid) {
                        evaluated[key] = true;
                    }
                    else {
                        errors.push({
                            instanceLocation,
                            keyword: "unevaluatedProperties",
                            keywordLocation,
                            error: `Property "${key}" does not match unevaluated properties schema.`,
                        }, ...result.errors);
                    }
                }
            }
        }
    }
    else if (instanceType === "array") {
        if ($maxItems !== undefined && instance.length > $maxItems) {
            errors.push({
                instanceLocation,
                keyword: "maxItems",
                keywordLocation: `${schemaLocation}/maxItems`,
                error: `Array has too many items (${instance.length} > ${$maxItems}).`,
            });
        }
        if ($minItems !== undefined && instance.length < $minItems) {
            errors.push({
                instanceLocation,
                keyword: "minItems",
                keywordLocation: `${schemaLocation}/minItems`,
                error: `Array has too few items (${instance.length} < ${$minItems}).`,
            });
        }
        const length = instance.length;
        let i = 0;
        let stop = false;
        if ($prefixItems !== undefined) {
            const keywordLocation = `${schemaLocation}/prefixItems`;
            const length2 = Math.min($prefixItems.length, length);
            for (; i < length2; i++) {
                const result = validate(instance[i], $prefixItems[i], draft, lookup, shortCircuit, recursiveAnchor, `${instanceLocation}/${i}`, `${keywordLocation}/${i}`);
                evaluated[i] = true;
                if (!result.valid) {
                    stop = shortCircuit;
                    errors.push({
                        instanceLocation,
                        keyword: "prefixItems",
                        keywordLocation,
                        error: `Items did not match schema.`,
                    }, ...result.errors);
                    if (stop)
                        break;
                }
            }
        }
        if ($items !== undefined) {
            const keywordLocation = `${schemaLocation}/items`;
            if (Array.isArray($items)) {
                const length2 = Math.min($items.length, length);
                for (; i < length2; i++) {
                    const result = validate(instance[i], $items[i], draft, lookup, shortCircuit, recursiveAnchor, `${instanceLocation}/${i}`, `${keywordLocation}/${i}`);
                    evaluated[i] = true;
                    if (!result.valid) {
                        stop = shortCircuit;
                        errors.push({
                            instanceLocation,
                            keyword: "items",
                            keywordLocation,
                            error: `Items did not match schema.`,
                        }, ...result.errors);
                        if (stop)
                            break;
                    }
                }
            }
            else {
                for (; i < length; i++) {
                    const result = validate(instance[i], $items, draft, lookup, shortCircuit, recursiveAnchor, `${instanceLocation}/${i}`, keywordLocation);
                    evaluated[i] = true;
                    if (!result.valid) {
                        stop = shortCircuit;
                        errors.push({
                            instanceLocation,
                            keyword: "items",
                            keywordLocation,
                            error: `Items did not match schema.`,
                        }, ...result.errors);
                        if (stop)
                            break;
                    }
                }
            }
            if (!stop && $additionalItems !== undefined) {
                const keywordLocation = `${schemaLocation}/additionalItems`;
                for (; i < length; i++) {
                    const result = validate(instance[i], $additionalItems, draft, lookup, shortCircuit, recursiveAnchor, `${instanceLocation}/${i}`, keywordLocation);
                    evaluated[i] = true;
                    if (!result.valid) {
                        stop = shortCircuit;
                        errors.push({
                            instanceLocation,
                            keyword: "additionalItems",
                            keywordLocation,
                            error: `Items did not match additional items schema.`,
                        }, ...result.errors);
                    }
                }
            }
        }
        if ($contains !== undefined) {
            if (length === 0 && $minContains === undefined) {
                errors.push({
                    instanceLocation,
                    keyword: "contains",
                    keywordLocation: `${schemaLocation}/contains`,
                    error: `Array is empty. It must contain at least one item matching the schema.`,
                });
            }
            else if ($minContains !== undefined && length < $minContains) {
                errors.push({
                    instanceLocation,
                    keyword: "minContains",
                    keywordLocation: `${schemaLocation}/minContains`,
                    error: `Array has less items (${length}) than minContains (${$minContains}).`,
                });
            }
            else {
                const keywordLocation = `${schemaLocation}/contains`;
                const errorsLength = errors.length;
                let contained = 0;
                for (let j = 0; j < length; j++) {
                    const result = validate(instance[j], $contains, draft, lookup, shortCircuit, recursiveAnchor, `${instanceLocation}/${j}`, keywordLocation);
                    if (result.valid) {
                        evaluated[j] = true;
                        contained++;
                    }
                    else {
                        errors.push(...result.errors);
                    }
                }
                if (contained >= ($minContains || 0)) {
                    errors.length = errorsLength;
                }
                if ($minContains === undefined &&
                    $maxContains === undefined &&
                    contained === 0) {
                    errors.splice(errorsLength, 0, {
                        instanceLocation,
                        keyword: "contains",
                        keywordLocation,
                        error: `Array does not contain item matching schema.`,
                    });
                }
                else if ($minContains !== undefined && contained < $minContains) {
                    errors.push({
                        instanceLocation,
                        keyword: "minContains",
                        keywordLocation: `${schemaLocation}/minContains`,
                        error: `Array must contain at least ${$minContains} items matching schema. Only ${contained} items were found.`,
                    });
                }
                else if ($maxContains !== undefined && contained > $maxContains) {
                    errors.push({
                        instanceLocation,
                        keyword: "maxContains",
                        keywordLocation: `${schemaLocation}/maxContains`,
                        error: `Array may contain at most ${$maxContains} items matching schema. ${contained} items were found.`,
                    });
                }
            }
        }
        if (!stop && $unevaluatedItems !== undefined) {
            const keywordLocation = `${schemaLocation}/unevaluatedItems`;
            for (i; i < length; i++) {
                if (evaluated[i]) {
                    continue;
                }
                const result = validate(instance[i], $unevaluatedItems, draft, lookup, shortCircuit, recursiveAnchor, `${instanceLocation}/${i}`, keywordLocation);
                evaluated[i] = true;
                if (!result.valid) {
                    errors.push({
                        instanceLocation,
                        keyword: "unevaluatedItems",
                        keywordLocation,
                        error: `Items did not match unevaluated items schema.`,
                    }, ...result.errors);
                }
            }
        }
        if ($uniqueItems) {
            for (let j = 0; j < length; j++) {
                const a = instance[j];
                const ao = typeof a === "object" && a !== null;
                for (let k = 0; k < length; k++) {
                    if (j === k) {
                        continue;
                    }
                    const b = instance[k];
                    const bo = typeof b === "object" && b !== null;
                    if (a === b || (ao && bo && (0,_deep_compare_strict_js__WEBPACK_IMPORTED_MODULE_0__.deepCompareStrict)(a, b))) {
                        errors.push({
                            instanceLocation,
                            keyword: "uniqueItems",
                            keywordLocation: `${schemaLocation}/uniqueItems`,
                            error: `Duplicate items at indexes ${j} and ${k}.`,
                        });
                        j = Number.MAX_SAFE_INTEGER;
                        k = Number.MAX_SAFE_INTEGER;
                    }
                }
            }
        }
    }
    else if (instanceType === "number") {
        if (draft === "4") {
            if ($minimum !== undefined &&
                (($exclusiveMinimum === true && instance <= $minimum) ||
                    instance < $minimum)) {
                errors.push({
                    instanceLocation,
                    keyword: "minimum",
                    keywordLocation: `${schemaLocation}/minimum`,
                    error: `${instance} is less than ${$exclusiveMinimum ? "or equal to " : ""} ${$minimum}.`,
                });
            }
            if ($maximum !== undefined &&
                (($exclusiveMaximum === true && instance >= $maximum) ||
                    instance > $maximum)) {
                errors.push({
                    instanceLocation,
                    keyword: "maximum",
                    keywordLocation: `${schemaLocation}/maximum`,
                    error: `${instance} is greater than ${$exclusiveMaximum ? "or equal to " : ""} ${$maximum}.`,
                });
            }
        }
        else {
            if ($minimum !== undefined && instance < $minimum) {
                errors.push({
                    instanceLocation,
                    keyword: "minimum",
                    keywordLocation: `${schemaLocation}/minimum`,
                    error: `${instance} is less than ${$minimum}.`,
                });
            }
            if ($maximum !== undefined && instance > $maximum) {
                errors.push({
                    instanceLocation,
                    keyword: "maximum",
                    keywordLocation: `${schemaLocation}/maximum`,
                    error: `${instance} is greater than ${$maximum}.`,
                });
            }
            if ($exclusiveMinimum !== undefined && instance <= $exclusiveMinimum) {
                errors.push({
                    instanceLocation,
                    keyword: "exclusiveMinimum",
                    keywordLocation: `${schemaLocation}/exclusiveMinimum`,
                    error: `${instance} is less than ${$exclusiveMinimum}.`,
                });
            }
            if ($exclusiveMaximum !== undefined && instance >= $exclusiveMaximum) {
                errors.push({
                    instanceLocation,
                    keyword: "exclusiveMaximum",
                    keywordLocation: `${schemaLocation}/exclusiveMaximum`,
                    error: `${instance} is greater than or equal to ${$exclusiveMaximum}.`,
                });
            }
        }
        if ($multipleOf !== undefined) {
            const remainder = instance % $multipleOf;
            if (Math.abs(0 - remainder) >= 1.1920929e-7 &&
                Math.abs($multipleOf - remainder) >= 1.1920929e-7) {
                errors.push({
                    instanceLocation,
                    keyword: "multipleOf",
                    keywordLocation: `${schemaLocation}/multipleOf`,
                    error: `${instance} is not a multiple of ${$multipleOf}.`,
                });
            }
        }
    }
    else if (instanceType === "string") {
        const length = $minLength === undefined && $maxLength === undefined
            ? 0
            : (0,_ucs2_length_js__WEBPACK_IMPORTED_MODULE_4__.ucs2length)(instance);
        if ($minLength !== undefined && length < $minLength) {
            errors.push({
                instanceLocation,
                keyword: "minLength",
                keywordLocation: `${schemaLocation}/minLength`,
                error: `String is too short (${length} < ${$minLength}).`,
            });
        }
        if ($maxLength !== undefined && length > $maxLength) {
            errors.push({
                instanceLocation,
                keyword: "maxLength",
                keywordLocation: `${schemaLocation}/maxLength`,
                error: `String is too long (${length} > ${$maxLength}).`,
            });
        }
        if ($pattern !== undefined && !new RegExp($pattern).test(instance)) {
            errors.push({
                instanceLocation,
                keyword: "pattern",
                keywordLocation: `${schemaLocation}/pattern`,
                error: `String does not match pattern.`,
            });
        }
        if ($format !== undefined &&
            _format_js__WEBPACK_IMPORTED_MODULE_2__.fastFormat[$format] &&
            !_format_js__WEBPACK_IMPORTED_MODULE_2__.fastFormat[$format](instance)) {
            errors.push({
                instanceLocation,
                keyword: "format",
                keywordLocation: `${schemaLocation}/format`,
                error: `String does not match format "${$format}".`,
            });
        }
    }
    return { valid: errors.length === 0, errors };
}


/***/ }),

/***/ "./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/validator.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/validator.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Validator: function() { return /* binding */ Validator; }
/* harmony export */ });
/* harmony import */ var _dereference_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dereference.js */ "./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/dereference.js");
/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./validate.js */ "./node_modules/@langchain/core/dist/utils/@cfworker/json-schema/src/validate.js");


class Validator {
    constructor(schema, draft = "2019-09", shortCircuit = true) {
        Object.defineProperty(this, "schema", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: schema
        });
        Object.defineProperty(this, "draft", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: draft
        });
        Object.defineProperty(this, "shortCircuit", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: shortCircuit
        });
        Object.defineProperty(this, "lookup", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.lookup = (0,_dereference_js__WEBPACK_IMPORTED_MODULE_0__.dereference)(schema);
    }
    validate(instance) {
        return (0,_validate_js__WEBPACK_IMPORTED_MODULE_1__.validate)(instance, this.schema, this.draft, this.lookup, this.shortCircuit);
    }
    addSchema(schema, id) {
        if (id) {
            schema = { ...schema, $id: id };
        }
        (0,_dereference_js__WEBPACK_IMPORTED_MODULE_0__.dereference)(schema, this.lookup);
    }
}


/***/ }),

/***/ "./node_modules/@langchain/core/example_selectors.js":
/*!***********************************************************!*\
  !*** ./node_modules/@langchain/core/example_selectors.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseExampleSelector: function() { return /* reexport safe */ _dist_example_selectors_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseExampleSelector; },
/* harmony export */   BasePromptSelector: function() { return /* reexport safe */ _dist_example_selectors_index_js__WEBPACK_IMPORTED_MODULE_0__.BasePromptSelector; },
/* harmony export */   ConditionalPromptSelector: function() { return /* reexport safe */ _dist_example_selectors_index_js__WEBPACK_IMPORTED_MODULE_0__.ConditionalPromptSelector; },
/* harmony export */   LengthBasedExampleSelector: function() { return /* reexport safe */ _dist_example_selectors_index_js__WEBPACK_IMPORTED_MODULE_0__.LengthBasedExampleSelector; },
/* harmony export */   SemanticSimilarityExampleSelector: function() { return /* reexport safe */ _dist_example_selectors_index_js__WEBPACK_IMPORTED_MODULE_0__.SemanticSimilarityExampleSelector; },
/* harmony export */   isChatModel: function() { return /* reexport safe */ _dist_example_selectors_index_js__WEBPACK_IMPORTED_MODULE_0__.isChatModel; },
/* harmony export */   isLLM: function() { return /* reexport safe */ _dist_example_selectors_index_js__WEBPACK_IMPORTED_MODULE_0__.isLLM; }
/* harmony export */ });
/* harmony import */ var _dist_example_selectors_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/example_selectors/index.js */ "./node_modules/@langchain/core/dist/example_selectors/index.js");


/***/ }),

/***/ "./node_modules/@langchain/core/output_parsers.js":
/*!********************************************************!*\
  !*** ./node_modules/@langchain/core/output_parsers.js ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseCumulativeTransformOutputParser: function() { return /* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseCumulativeTransformOutputParser; },
/* harmony export */   BaseLLMOutputParser: function() { return /* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseLLMOutputParser; },
/* harmony export */   BaseOutputParser: function() { return /* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseOutputParser; },
/* harmony export */   BaseTransformOutputParser: function() { return /* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseTransformOutputParser; },
/* harmony export */   BytesOutputParser: function() { return /* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.BytesOutputParser; },
/* harmony export */   CommaSeparatedListOutputParser: function() { return /* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.CommaSeparatedListOutputParser; },
/* harmony export */   CustomListOutputParser: function() { return /* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.CustomListOutputParser; },
/* harmony export */   ListOutputParser: function() { return /* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.ListOutputParser; },
/* harmony export */   OutputParserException: function() { return /* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.OutputParserException; },
/* harmony export */   StringOutputParser: function() { return /* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.StringOutputParser; }
/* harmony export */ });
/* harmony import */ var _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/output_parsers/index.js */ "./node_modules/@langchain/core/dist/output_parsers/index.js");


/***/ }),

/***/ "./node_modules/@langchain/core/prompts.js":
/*!*************************************************!*\
  !*** ./node_modules/@langchain/core/prompts.js ***!
  \*************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AIMessagePromptTemplate: function() { return /* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.AIMessagePromptTemplate; },
/* harmony export */   BaseChatPromptTemplate: function() { return /* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseChatPromptTemplate; },
/* harmony export */   BaseMessagePromptTemplate: function() { return /* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessagePromptTemplate; },
/* harmony export */   BaseMessageStringPromptTemplate: function() { return /* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessageStringPromptTemplate; },
/* harmony export */   BasePromptTemplate: function() { return /* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.BasePromptTemplate; },
/* harmony export */   BaseStringPromptTemplate: function() { return /* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseStringPromptTemplate; },
/* harmony export */   ChatMessagePromptTemplate: function() { return /* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.ChatMessagePromptTemplate; },
/* harmony export */   ChatPromptTemplate: function() { return /* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.ChatPromptTemplate; },
/* harmony export */   DEFAULT_FORMATTER_MAPPING: function() { return /* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_FORMATTER_MAPPING; },
/* harmony export */   DEFAULT_PARSER_MAPPING: function() { return /* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_PARSER_MAPPING; },
/* harmony export */   FewShotChatMessagePromptTemplate: function() { return /* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.FewShotChatMessagePromptTemplate; },
/* harmony export */   FewShotPromptTemplate: function() { return /* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.FewShotPromptTemplate; },
/* harmony export */   HumanMessagePromptTemplate: function() { return /* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.HumanMessagePromptTemplate; },
/* harmony export */   MessagesPlaceholder: function() { return /* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.MessagesPlaceholder; },
/* harmony export */   PipelinePromptTemplate: function() { return /* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.PipelinePromptTemplate; },
/* harmony export */   PromptTemplate: function() { return /* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate; },
/* harmony export */   SystemMessagePromptTemplate: function() { return /* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.SystemMessagePromptTemplate; },
/* harmony export */   checkValidTemplate: function() { return /* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.checkValidTemplate; },
/* harmony export */   interpolateFString: function() { return /* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.interpolateFString; },
/* harmony export */   parseFString: function() { return /* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.parseFString; },
/* harmony export */   parseTemplate: function() { return /* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.parseTemplate; },
/* harmony export */   renderTemplate: function() { return /* reexport safe */ _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__.renderTemplate; }
/* harmony export */ });
/* harmony import */ var _dist_prompts_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/prompts/index.js */ "./node_modules/@langchain/core/dist/prompts/index.js");


/***/ }),

/***/ "./node_modules/@langchain/core/runnables.js":
/*!***************************************************!*\
  !*** ./node_modules/@langchain/core/runnables.js ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RouterRunnable: function() { return /* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RouterRunnable; },
/* harmony export */   Runnable: function() { return /* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.Runnable; },
/* harmony export */   RunnableAssign: function() { return /* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableAssign; },
/* harmony export */   RunnableBinding: function() { return /* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableBinding; },
/* harmony export */   RunnableBranch: function() { return /* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableBranch; },
/* harmony export */   RunnableEach: function() { return /* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableEach; },
/* harmony export */   RunnableLambda: function() { return /* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableLambda; },
/* harmony export */   RunnableMap: function() { return /* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableMap; },
/* harmony export */   RunnableParallel: function() { return /* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableParallel; },
/* harmony export */   RunnablePassthrough: function() { return /* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnablePassthrough; },
/* harmony export */   RunnableRetry: function() { return /* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableRetry; },
/* harmony export */   RunnableSequence: function() { return /* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableSequence; },
/* harmony export */   RunnableWithFallbacks: function() { return /* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableWithFallbacks; },
/* harmony export */   RunnableWithMessageHistory: function() { return /* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableWithMessageHistory; },
/* harmony export */   _coerceToRunnable: function() { return /* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__._coerceToRunnable; }
/* harmony export */ });
/* harmony import */ var _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/runnables/index.js */ "./node_modules/@langchain/core/dist/runnables/index.js");


/***/ }),

/***/ "./node_modules/langchain/dist/chains/llm_chain.js":
/*!*********************************************************!*\
  !*** ./node_modules/langchain/dist/chains/llm_chain.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LLMChain: function() { return /* binding */ LLMChain; }
/* harmony export */ });
/* harmony import */ var _langchain_core_language_models_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/language_models/base */ "./node_modules/@langchain/core/language_models/base.js");
/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ "./node_modules/langchain/dist/chains/base.js");
/* harmony import */ var _prompts_base_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../prompts/base.js */ "./node_modules/langchain/dist/prompts/base.js");
/* harmony import */ var _output_parsers_noop_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../output_parsers/noop.js */ "./node_modules/langchain/dist/output_parsers/noop.js");
/* harmony import */ var _schema_runnable_base_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../schema/runnable/base.js */ "./node_modules/langchain/dist/schema/runnable/base.js");





function isBaseLanguageModel(llmLike) {
    return typeof llmLike._llmType === "function";
}
function _getLanguageModel(llmLike) {
    if (isBaseLanguageModel(llmLike)) {
        return llmLike;
    }
    else if ("bound" in llmLike && _schema_runnable_base_js__WEBPACK_IMPORTED_MODULE_4__.Runnable.isRunnable(llmLike.bound)) {
        return _getLanguageModel(llmLike.bound);
    }
    else if ("runnable" in llmLike &&
        "fallbacks" in llmLike &&
        _schema_runnable_base_js__WEBPACK_IMPORTED_MODULE_4__.Runnable.isRunnable(llmLike.runnable)) {
        return _getLanguageModel(llmLike.runnable);
    }
    else if ("default" in llmLike && _schema_runnable_base_js__WEBPACK_IMPORTED_MODULE_4__.Runnable.isRunnable(llmLike.default)) {
        return _getLanguageModel(llmLike.default);
    }
    else {
        throw new Error("Unable to extract BaseLanguageModel from llmLike object.");
    }
}
/**
 * Chain to run queries against LLMs.
 *
 * @example
 * ```ts
 * import { LLMChain } from "langchain/chains";
 * import { OpenAI } from "langchain/llms/openai";
 * import { PromptTemplate } from "langchain/prompts";
 *
 * const prompt = PromptTemplate.fromTemplate("Tell me a {adjective} joke");
 * const llm = new LLMChain({ llm: new OpenAI(), prompt });
 * ```
 */
class LLMChain extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseChain {
    static lc_name() {
        return "LLMChain";
    }
    get inputKeys() {
        return this.prompt.inputVariables;
    }
    get outputKeys() {
        return [this.outputKey];
    }
    constructor(fields) {
        super(fields);
        Object.defineProperty(this, "lc_serializable", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.defineProperty(this, "prompt", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "llm", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "llmKwargs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "outputKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "text"
        });
        Object.defineProperty(this, "outputParser", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.prompt = fields.prompt;
        this.llm = fields.llm;
        this.llmKwargs = fields.llmKwargs;
        this.outputKey = fields.outputKey ?? this.outputKey;
        this.outputParser =
            fields.outputParser ?? new _output_parsers_noop_js__WEBPACK_IMPORTED_MODULE_3__.NoOpOutputParser();
        if (this.prompt.outputParser) {
            if (fields.outputParser) {
                throw new Error("Cannot set both outputParser and prompt.outputParser");
            }
            this.outputParser = this.prompt.outputParser;
        }
    }
    getCallKeys() {
        const callKeys = "callKeys" in this.llm ? this.llm.callKeys : [];
        return callKeys;
    }
    /** @ignore */
    _selectMemoryInputs(values) {
        const valuesForMemory = super._selectMemoryInputs(values);
        const callKeys = this.getCallKeys();
        for (const key of callKeys) {
            if (key in values) {
                delete valuesForMemory[key];
            }
        }
        return valuesForMemory;
    }
    /** @ignore */
    async _getFinalOutput(generations, promptValue, runManager) {
        let finalCompletion;
        if (this.outputParser) {
            finalCompletion = await this.outputParser.parseResultWithPrompt(generations, promptValue, runManager?.getChild());
        }
        else {
            finalCompletion = generations[0].text;
        }
        return finalCompletion;
    }
    /**
     * Run the core logic of this chain and add to output if desired.
     *
     * Wraps _call and handles memory.
     */
    call(values, config) {
        return super.call(values, config);
    }
    /** @ignore */
    async _call(values, runManager) {
        const valuesForPrompt = { ...values };
        const valuesForLLM = {
            ...this.llmKwargs,
        };
        const callKeys = this.getCallKeys();
        for (const key of callKeys) {
            if (key in values) {
                if (valuesForLLM) {
                    valuesForLLM[key] =
                        values[key];
                    delete valuesForPrompt[key];
                }
            }
        }
        const promptValue = await this.prompt.formatPromptValue(valuesForPrompt);
        if ("generatePrompt" in this.llm) {
            const { generations } = await this.llm.generatePrompt([promptValue], valuesForLLM, runManager?.getChild());
            return {
                [this.outputKey]: await this._getFinalOutput(generations[0], promptValue, runManager),
            };
        }
        const modelWithParser = this.outputParser
            ? this.llm.pipe(this.outputParser)
            : this.llm;
        const response = await modelWithParser.invoke(promptValue, runManager?.getChild());
        return {
            [this.outputKey]: response,
        };
    }
    /**
     * Format prompt with values and pass to LLM
     *
     * @param values - keys to pass to prompt template
     * @param callbackManager - CallbackManager to use
     * @returns Completion from LLM.
     *
     * @example
     * ```ts
     * llm.predict({ adjective: "funny" })
     * ```
     */
    async predict(values, callbackManager) {
        const output = await this.call(values, callbackManager);
        return output[this.outputKey];
    }
    _chainType() {
        return "llm";
    }
    static async deserialize(data) {
        const { llm, prompt } = data;
        if (!llm) {
            throw new Error("LLMChain must have llm");
        }
        if (!prompt) {
            throw new Error("LLMChain must have prompt");
        }
        return new LLMChain({
            llm: await _langchain_core_language_models_base__WEBPACK_IMPORTED_MODULE_0__.BaseLanguageModel.deserialize(llm),
            prompt: await _prompts_base_js__WEBPACK_IMPORTED_MODULE_2__.BasePromptTemplate.deserialize(prompt),
        });
    }
    /** @deprecated */
    serialize() {
        const serialize = "serialize" in this.llm ? this.llm.serialize() : undefined;
        return {
            _type: `${this._chainType()}_chain`,
            llm: serialize,
            prompt: this.prompt.serialize(),
        };
    }
    _getNumTokens(text) {
        return _getLanguageModel(this.llm).getNumTokens(text);
    }
}


/***/ }),

/***/ "./node_modules/langchain/dist/output_parsers/noop.js":
/*!************************************************************!*\
  !*** ./node_modules/langchain/dist/output_parsers/noop.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NoOpOutputParser: function() { return /* binding */ NoOpOutputParser; }
/* harmony export */ });
/* harmony import */ var _schema_output_parser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../schema/output_parser.js */ "./node_modules/langchain/dist/schema/output_parser.js");

/**
 * The NoOpOutputParser class is a type of output parser that does not
 * perform any operations on the output. It extends the BaseOutputParser
 * class and is part of the LangChain's output parsers module. This class
 * is useful in scenarios where the raw output of the Large Language
 * Models (LLMs) is required.
 */
class NoOpOutputParser extends _schema_output_parser_js__WEBPACK_IMPORTED_MODULE_0__.BaseOutputParser {
    constructor() {
        super(...arguments);
        Object.defineProperty(this, "lc_namespace", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ["langchain", "output_parsers", "default"]
        });
        Object.defineProperty(this, "lc_serializable", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
    }
    static lc_name() {
        return "NoOpOutputParser";
    }
    /**
     * This method takes a string as input and returns the same string as
     * output. It does not perform any operations on the input string.
     * @param text The input string to be parsed.
     * @returns The same input string without any operations performed on it.
     */
    parse(text) {
        return Promise.resolve(text);
    }
    /**
     * This method returns an empty string. It does not provide any formatting
     * instructions.
     * @returns An empty string, indicating no formatting instructions.
     */
    getFormatInstructions() {
        return "";
    }
}


/***/ }),

/***/ "./node_modules/langchain/dist/prompts/base.js":
/*!*****************************************************!*\
  !*** ./node_modules/langchain/dist/prompts/base.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseExampleSelector: function() { return /* reexport safe */ _langchain_core_example_selectors__WEBPACK_IMPORTED_MODULE_2__.BaseExampleSelector; },
/* harmony export */   BasePromptTemplate: function() { return /* reexport safe */ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.BasePromptTemplate; },
/* harmony export */   BaseStringPromptTemplate: function() { return /* reexport safe */ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.BaseStringPromptTemplate; },
/* harmony export */   StringPromptValue: function() { return /* reexport safe */ _langchain_core_prompt_values__WEBPACK_IMPORTED_MODULE_1__.StringPromptValue; }
/* harmony export */ });
/* harmony import */ var _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/prompts */ "./node_modules/@langchain/core/prompts.js");
/* harmony import */ var _langchain_core_prompt_values__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/prompt_values */ "./node_modules/@langchain/core/prompt_values.js");
/* harmony import */ var _langchain_core_example_selectors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @langchain/core/example_selectors */ "./node_modules/@langchain/core/example_selectors.js");





/***/ }),

/***/ "./node_modules/langchain/dist/schema/output_parser.js":
/*!*************************************************************!*\
  !*** ./node_modules/langchain/dist/schema/output_parser.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseCumulativeTransformOutputParser: function() { return /* reexport safe */ _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__.BaseCumulativeTransformOutputParser; },
/* harmony export */   BaseLLMOutputParser: function() { return /* reexport safe */ _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__.BaseLLMOutputParser; },
/* harmony export */   BaseOutputParser: function() { return /* reexport safe */ _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__.BaseOutputParser; },
/* harmony export */   BaseTransformOutputParser: function() { return /* reexport safe */ _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__.BaseTransformOutputParser; },
/* harmony export */   BytesOutputParser: function() { return /* reexport safe */ _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__.BytesOutputParser; },
/* harmony export */   CommaSeparatedListOutputParser: function() { return /* reexport safe */ _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__.CommaSeparatedListOutputParser; },
/* harmony export */   CustomListOutputParser: function() { return /* reexport safe */ _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__.CustomListOutputParser; },
/* harmony export */   ListOutputParser: function() { return /* reexport safe */ _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__.ListOutputParser; },
/* harmony export */   OutputParserException: function() { return /* reexport safe */ _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__.OutputParserException; },
/* harmony export */   StringOutputParser: function() { return /* reexport safe */ _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__.StringOutputParser; }
/* harmony export */ });
/* harmony import */ var _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/output_parsers */ "./node_modules/@langchain/core/output_parsers.js");



/***/ }),

/***/ "./node_modules/langchain/dist/schema/runnable/base.js":
/*!*************************************************************!*\
  !*** ./node_modules/langchain/dist/schema/runnable/base.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Runnable: function() { return /* reexport safe */ _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_0__.Runnable; },
/* harmony export */   RunnableBinding: function() { return /* reexport safe */ _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_0__.RunnableBinding; },
/* harmony export */   RunnableEach: function() { return /* reexport safe */ _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_0__.RunnableEach; },
/* harmony export */   RunnableLambda: function() { return /* reexport safe */ _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_0__.RunnableLambda; },
/* harmony export */   RunnableMap: function() { return /* reexport safe */ _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_0__.RunnableMap; },
/* harmony export */   RunnableParallel: function() { return /* reexport safe */ _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_0__.RunnableParallel; },
/* harmony export */   RunnableRetry: function() { return /* reexport safe */ _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_0__.RunnableRetry; },
/* harmony export */   RunnableSequence: function() { return /* reexport safe */ _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_0__.RunnableSequence; },
/* harmony export */   RunnableWithFallbacks: function() { return /* reexport safe */ _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_0__.RunnableWithFallbacks; },
/* harmony export */   _coerceToRunnable: function() { return /* reexport safe */ _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_0__._coerceToRunnable; }
/* harmony export */ });
/* harmony import */ var _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/runnables */ "./node_modules/@langchain/core/runnables.js");



/***/ })

}]);
//# sourceMappingURL=vendors-node_modules_langchain_dist_chains_llm_chain_js.js.map