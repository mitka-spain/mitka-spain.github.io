{"version":3,"file":"315.js","mappings":"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","sources":["webpack://inqviz-excel/./node_modules/@langchain/core/dist/prompts/chat.js","webpack://inqviz-excel/./node_modules/@langchain/core/dist/prompts/few_shot.js"],"sourcesContent":["// Default generic \"any\" values are for backwards compatibility.\n// Replace with \"string\" when we are comfortable with a breaking change.\nimport { AIMessage, HumanMessage, SystemMessage, BaseMessage, ChatMessage, coerceMessageLikeToMessage, isBaseMessage, } from \"../messages/index.js\";\nimport { ChatPromptValue, } from \"../prompt_values.js\";\nimport { Runnable } from \"../runnables/base.js\";\nimport { BasePromptTemplate, } from \"./base.js\";\nimport { PromptTemplate } from \"./prompt.js\";\n/**\n * Abstract class that serves as a base for creating message prompt\n * templates. It defines how to format messages for different roles in a\n * conversation.\n */\nexport class BaseMessagePromptTemplate extends Runnable {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"prompts\", \"chat\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n    }\n    /**\n     * Calls the formatMessages method with the provided input and options.\n     * @param input Input for the formatMessages method\n     * @param options Optional BaseCallbackConfig\n     * @returns Formatted output messages\n     */\n    async invoke(input, options) {\n        return this._callWithConfig((input) => this.formatMessages(input), input, { ...options, runType: \"prompt\" });\n    }\n}\n/**\n * Class that represents a placeholder for messages in a chat prompt. It\n * extends the BaseMessagePromptTemplate.\n */\nexport class MessagesPlaceholder extends BaseMessagePromptTemplate {\n    static lc_name() {\n        return \"MessagesPlaceholder\";\n    }\n    constructor(fields) {\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign\n            fields = { variableName: fields };\n        }\n        super(fields);\n        Object.defineProperty(this, \"variableName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"optional\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.variableName = fields.variableName;\n        this.optional = fields.optional ?? false;\n    }\n    get inputVariables() {\n        return [this.variableName];\n    }\n    validateInputOrThrow(input, variableName) {\n        if (this.optional && !input) {\n            return false;\n        }\n        else if (!input) {\n            const error = new Error(`Error: Field \"${variableName}\" in prompt uses a MessagesPlaceholder, which expects an array of BaseMessages as an input value. Received: undefined`);\n            error.name = \"InputFormatError\";\n            throw error;\n        }\n        let isInputBaseMessage = false;\n        if (Array.isArray(input)) {\n            isInputBaseMessage = input.every((message) => isBaseMessage(message));\n        }\n        else {\n            isInputBaseMessage = isBaseMessage(input);\n        }\n        if (!isInputBaseMessage) {\n            const readableInput = typeof input === \"string\" ? input : JSON.stringify(input, null, 2);\n            const error = new Error(`Error: Field \"${variableName}\" in prompt uses a MessagesPlaceholder, which expects an array of BaseMessages as an input value. Received: ${readableInput}`);\n            error.name = \"InputFormatError\";\n            throw error;\n        }\n        return true;\n    }\n    async formatMessages(values) {\n        this.validateInputOrThrow(values[this.variableName], this.variableName);\n        return values[this.variableName] ?? [];\n    }\n}\n/**\n * Abstract class that serves as a base for creating message string prompt\n * templates. It extends the BaseMessagePromptTemplate.\n */\nexport class BaseMessageStringPromptTemplate extends BaseMessagePromptTemplate {\n    constructor(fields) {\n        if (!(\"prompt\" in fields)) {\n            // eslint-disable-next-line no-param-reassign\n            fields = { prompt: fields };\n        }\n        super(fields);\n        Object.defineProperty(this, \"prompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.prompt = fields.prompt;\n    }\n    get inputVariables() {\n        return this.prompt.inputVariables;\n    }\n    async formatMessages(values) {\n        return [await this.format(values)];\n    }\n}\n/**\n * Abstract class that serves as a base for creating chat prompt\n * templates. It extends the BasePromptTemplate.\n */\nexport class BaseChatPromptTemplate extends BasePromptTemplate {\n    constructor(input) {\n        super(input);\n    }\n    async format(values) {\n        return (await this.formatPromptValue(values)).toString();\n    }\n    async formatPromptValue(values) {\n        const resultMessages = await this.formatMessages(values);\n        return new ChatPromptValue(resultMessages);\n    }\n}\n/**\n * Class that represents a chat message prompt template. It extends the\n * BaseMessageStringPromptTemplate.\n */\nexport class ChatMessagePromptTemplate extends BaseMessageStringPromptTemplate {\n    static lc_name() {\n        return \"ChatMessagePromptTemplate\";\n    }\n    constructor(fields, role) {\n        if (!(\"prompt\" in fields)) {\n            // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n            fields = { prompt: fields, role: role };\n        }\n        super(fields);\n        Object.defineProperty(this, \"role\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.role = fields.role;\n    }\n    async format(values) {\n        return new ChatMessage(await this.prompt.format(values), this.role);\n    }\n    static fromTemplate(template, role) {\n        return new this(PromptTemplate.fromTemplate(template), role);\n    }\n}\n/**\n * Class that represents a human message prompt template. It extends the\n * BaseMessageStringPromptTemplate.\n * @example\n * ```typescript\n * const message = HumanMessagePromptTemplate.fromTemplate(\"{text}\");\n * const formatted = await message.format({ text: \"Hello world!\" });\n *\n * const chatPrompt = ChatPromptTemplate.fromMessages([message]);\n * const formattedChatPrompt = await chatPrompt.invoke({\n *   text: \"Hello world!\",\n * });\n * ```\n */\nexport class HumanMessagePromptTemplate extends BaseMessageStringPromptTemplate {\n    static lc_name() {\n        return \"HumanMessagePromptTemplate\";\n    }\n    async format(values) {\n        return new HumanMessage(await this.prompt.format(values));\n    }\n    static fromTemplate(template) {\n        return new this(PromptTemplate.fromTemplate(template));\n    }\n}\n/**\n * Class that represents an AI message prompt template. It extends the\n * BaseMessageStringPromptTemplate.\n */\nexport class AIMessagePromptTemplate extends BaseMessageStringPromptTemplate {\n    static lc_name() {\n        return \"AIMessagePromptTemplate\";\n    }\n    async format(values) {\n        return new AIMessage(await this.prompt.format(values));\n    }\n    static fromTemplate(template) {\n        return new this(PromptTemplate.fromTemplate(template));\n    }\n}\n/**\n * Class that represents a system message prompt template. It extends the\n * BaseMessageStringPromptTemplate.\n * @example\n * ```typescript\n * const message = SystemMessagePromptTemplate.fromTemplate(\"{text}\");\n * const formatted = await message.format({ text: \"Hello world!\" });\n *\n * const chatPrompt = ChatPromptTemplate.fromMessages([message]);\n * const formattedChatPrompt = await chatPrompt.invoke({\n *   text: \"Hello world!\",\n * });\n * ```\n */\nexport class SystemMessagePromptTemplate extends BaseMessageStringPromptTemplate {\n    static lc_name() {\n        return \"SystemMessagePromptTemplate\";\n    }\n    async format(values) {\n        return new SystemMessage(await this.prompt.format(values));\n    }\n    static fromTemplate(template) {\n        return new this(PromptTemplate.fromTemplate(template));\n    }\n}\nfunction _isBaseMessagePromptTemplate(baseMessagePromptTemplateLike) {\n    return (typeof baseMessagePromptTemplateLike\n        .formatMessages === \"function\");\n}\nfunction _coerceMessagePromptTemplateLike(messagePromptTemplateLike) {\n    if (_isBaseMessagePromptTemplate(messagePromptTemplateLike) ||\n        isBaseMessage(messagePromptTemplateLike)) {\n        return messagePromptTemplateLike;\n    }\n    const message = coerceMessageLikeToMessage(messagePromptTemplateLike);\n    if (message._getType() === \"human\") {\n        return HumanMessagePromptTemplate.fromTemplate(message.content);\n    }\n    else if (message._getType() === \"ai\") {\n        return AIMessagePromptTemplate.fromTemplate(message.content);\n    }\n    else if (message._getType() === \"system\") {\n        return SystemMessagePromptTemplate.fromTemplate(message.content);\n    }\n    else if (ChatMessage.isInstance(message)) {\n        return ChatMessagePromptTemplate.fromTemplate(message.content, message.role);\n    }\n    else {\n        throw new Error(`Could not coerce message prompt template from input. Received message type: \"${message._getType()}\".`);\n    }\n}\nfunction isMessagesPlaceholder(x) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return x.constructor.lc_name() === \"MessagesPlaceholder\";\n}\n/**\n * Class that represents a chat prompt. It extends the\n * BaseChatPromptTemplate and uses an array of BaseMessagePromptTemplate\n * instances to format a series of messages for a conversation.\n * @example\n * ```typescript\n * const message = SystemMessagePromptTemplate.fromTemplate(\"{text}\");\n * const chatPrompt = ChatPromptTemplate.fromMessages([\n *   [\"ai\", \"You are a helpful assistant.\"],\n *   message,\n * ]);\n * const formattedChatPrompt = await chatPrompt.invoke({\n *   text: \"Hello world!\",\n * });\n * ```\n */\nexport class ChatPromptTemplate extends BaseChatPromptTemplate {\n    static lc_name() {\n        return \"ChatPromptTemplate\";\n    }\n    get lc_aliases() {\n        return {\n            promptMessages: \"messages\",\n        };\n    }\n    constructor(input) {\n        super(input);\n        Object.defineProperty(this, \"promptMessages\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"validateTemplate\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.assign(this, input);\n        if (this.validateTemplate) {\n            const inputVariablesMessages = new Set();\n            for (const promptMessage of this.promptMessages) {\n                // eslint-disable-next-line no-instanceof/no-instanceof\n                if (promptMessage instanceof BaseMessage)\n                    continue;\n                for (const inputVariable of promptMessage.inputVariables) {\n                    inputVariablesMessages.add(inputVariable);\n                }\n            }\n            const totalInputVariables = this.inputVariables;\n            const inputVariablesInstance = new Set(this.partialVariables\n                ? totalInputVariables.concat(Object.keys(this.partialVariables))\n                : totalInputVariables);\n            const difference = new Set([...inputVariablesInstance].filter((x) => !inputVariablesMessages.has(x)));\n            if (difference.size > 0) {\n                throw new Error(`Input variables \\`${[\n                    ...difference,\n                ]}\\` are not used in any of the prompt messages.`);\n            }\n            const otherDifference = new Set([...inputVariablesMessages].filter((x) => !inputVariablesInstance.has(x)));\n            if (otherDifference.size > 0) {\n                throw new Error(`Input variables \\`${[\n                    ...otherDifference,\n                ]}\\` are used in prompt messages but not in the prompt template.`);\n            }\n        }\n    }\n    _getPromptType() {\n        return \"chat\";\n    }\n    async _parseImagePrompts(message, inputValues) {\n        if (typeof message.content === \"string\") {\n            return message;\n        }\n        const formattedMessageContent = await Promise.all(message.content.map(async (item) => {\n            if (item.type !== \"image_url\" ||\n                typeof item.image_url === \"string\" ||\n                !item.image_url?.url) {\n                return item;\n            }\n            const imageUrl = item.image_url.url;\n            const promptTemplatePlaceholder = PromptTemplate.fromTemplate(imageUrl);\n            const formattedUrl = await promptTemplatePlaceholder.format(inputValues);\n            // eslint-disable-next-line no-param-reassign\n            item.image_url.url = formattedUrl;\n            return item;\n        }));\n        // eslint-disable-next-line no-param-reassign\n        message.content = formattedMessageContent;\n        return message;\n    }\n    async formatMessages(values) {\n        const allValues = await this.mergePartialAndUserVariables(values);\n        let resultMessages = [];\n        for (const promptMessage of this.promptMessages) {\n            // eslint-disable-next-line no-instanceof/no-instanceof\n            if (promptMessage instanceof BaseMessage) {\n                resultMessages.push(await this._parseImagePrompts(promptMessage, allValues));\n            }\n            else {\n                const inputValues = promptMessage.inputVariables.reduce((acc, inputVariable) => {\n                    if (!(inputVariable in allValues) &&\n                        !(isMessagesPlaceholder(promptMessage) && promptMessage.optional)) {\n                        throw new Error(`Missing value for input variable \\`${inputVariable.toString()}\\``);\n                    }\n                    acc[inputVariable] = allValues[inputVariable];\n                    return acc;\n                }, {});\n                const message = await promptMessage.formatMessages(inputValues);\n                resultMessages = resultMessages.concat(message);\n            }\n        }\n        return resultMessages;\n    }\n    async partial(values) {\n        // This is implemented in a way it doesn't require making\n        // BaseMessagePromptTemplate aware of .partial()\n        const newInputVariables = this.inputVariables.filter((iv) => !(iv in values));\n        const newPartialVariables = {\n            ...(this.partialVariables ?? {}),\n            ...values,\n        };\n        const promptDict = {\n            ...this,\n            inputVariables: newInputVariables,\n            partialVariables: newPartialVariables,\n        };\n        return new ChatPromptTemplate(promptDict);\n    }\n    /**\n     * Load prompt template from a template f-string\n     */\n    static fromTemplate(template) {\n        const prompt = PromptTemplate.fromTemplate(template);\n        const humanTemplate = new HumanMessagePromptTemplate({ prompt });\n        return this.fromMessages([humanTemplate]);\n    }\n    /**\n     * Create a chat model-specific prompt from individual chat messages\n     * or message-like tuples.\n     * @param promptMessages Messages to be passed to the chat model\n     * @returns A new ChatPromptTemplate\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static fromMessages(promptMessages) {\n        const flattenedMessages = promptMessages.reduce((acc, promptMessage) => acc.concat(\n        // eslint-disable-next-line no-instanceof/no-instanceof\n        promptMessage instanceof ChatPromptTemplate\n            ? promptMessage.promptMessages\n            : [_coerceMessagePromptTemplateLike(promptMessage)]), []);\n        const flattenedPartialVariables = promptMessages.reduce((acc, promptMessage) => \n        // eslint-disable-next-line no-instanceof/no-instanceof\n        promptMessage instanceof ChatPromptTemplate\n            ? Object.assign(acc, promptMessage.partialVariables)\n            : acc, Object.create(null));\n        const inputVariables = new Set();\n        for (const promptMessage of flattenedMessages) {\n            // eslint-disable-next-line no-instanceof/no-instanceof\n            if (promptMessage instanceof BaseMessage)\n                continue;\n            for (const inputVariable of promptMessage.inputVariables) {\n                if (inputVariable in flattenedPartialVariables) {\n                    continue;\n                }\n                inputVariables.add(inputVariable);\n            }\n        }\n        return new ChatPromptTemplate({\n            inputVariables: [...inputVariables],\n            promptMessages: flattenedMessages,\n            partialVariables: flattenedPartialVariables,\n        });\n    }\n    /** @deprecated Renamed to .fromMessages */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static fromPromptMessages(promptMessages) {\n        return this.fromMessages(promptMessages);\n    }\n}\n","import { BaseStringPromptTemplate } from \"./string.js\";\nimport { checkValidTemplate, renderTemplate, } from \"./template.js\";\nimport { PromptTemplate } from \"./prompt.js\";\nimport { BaseChatPromptTemplate, } from \"./chat.js\";\n/**\n * Prompt template that contains few-shot examples.\n * @augments BasePromptTemplate\n * @augments FewShotPromptTemplateInput\n * @example\n * ```typescript\n * const examplePrompt = PromptTemplate.fromTemplate(\n *   \"Input: {input}\\nOutput: {output}\",\n * );\n *\n * const exampleSelector = await SemanticSimilarityExampleSelector.fromExamples(\n *   [\n *     { input: \"happy\", output: \"sad\" },\n *     { input: \"tall\", output: \"short\" },\n *     { input: \"energetic\", output: \"lethargic\" },\n *     { input: \"sunny\", output: \"gloomy\" },\n *     { input: \"windy\", output: \"calm\" },\n *   ],\n *   new OpenAIEmbeddings(),\n *   HNSWLib,\n *   { k: 1 },\n * );\n *\n * const dynamicPrompt = new FewShotPromptTemplate({\n *   exampleSelector,\n *   examplePrompt,\n *   prefix: \"Give the antonym of every input\",\n *   suffix: \"Input: {adjective}\\nOutput:\",\n *   inputVariables: [\"adjective\"],\n * });\n *\n * // Format the dynamic prompt with the input 'rainy'\n * console.log(await dynamicPrompt.format({ adjective: \"rainy\" }));\n *\n * ```\n */\nexport class FewShotPromptTemplate extends BaseStringPromptTemplate {\n    constructor(input) {\n        super(input);\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"examples\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"exampleSelector\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"examplePrompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"suffix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\"\n        });\n        Object.defineProperty(this, \"exampleSeparator\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\\n\\n\"\n        });\n        Object.defineProperty(this, \"prefix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\"\n        });\n        Object.defineProperty(this, \"templateFormat\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"f-string\"\n        });\n        Object.defineProperty(this, \"validateTemplate\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.assign(this, input);\n        if (this.examples !== undefined && this.exampleSelector !== undefined) {\n            throw new Error(\"Only one of 'examples' and 'example_selector' should be provided\");\n        }\n        if (this.examples === undefined && this.exampleSelector === undefined) {\n            throw new Error(\"One of 'examples' and 'example_selector' should be provided\");\n        }\n        if (this.validateTemplate) {\n            let totalInputVariables = this.inputVariables;\n            if (this.partialVariables) {\n                totalInputVariables = totalInputVariables.concat(Object.keys(this.partialVariables));\n            }\n            checkValidTemplate(this.prefix + this.suffix, this.templateFormat, totalInputVariables);\n        }\n    }\n    _getPromptType() {\n        return \"few_shot\";\n    }\n    static lc_name() {\n        return \"FewShotPromptTemplate\";\n    }\n    async getExamples(inputVariables) {\n        if (this.examples !== undefined) {\n            return this.examples;\n        }\n        if (this.exampleSelector !== undefined) {\n            return this.exampleSelector.selectExamples(inputVariables);\n        }\n        throw new Error(\"One of 'examples' and 'example_selector' should be provided\");\n    }\n    async partial(values) {\n        const newInputVariables = this.inputVariables.filter((iv) => !(iv in values));\n        const newPartialVariables = {\n            ...(this.partialVariables ?? {}),\n            ...values,\n        };\n        const promptDict = {\n            ...this,\n            inputVariables: newInputVariables,\n            partialVariables: newPartialVariables,\n        };\n        return new FewShotPromptTemplate(promptDict);\n    }\n    /**\n     * Formats the prompt with the given values.\n     * @param values The values to format the prompt with.\n     * @returns A promise that resolves to a string representing the formatted prompt.\n     */\n    async format(values) {\n        const allValues = await this.mergePartialAndUserVariables(values);\n        const examples = await this.getExamples(allValues);\n        const exampleStrings = await Promise.all(examples.map((example) => this.examplePrompt.format(example)));\n        const template = [this.prefix, ...exampleStrings, this.suffix].join(this.exampleSeparator);\n        return renderTemplate(template, this.templateFormat, allValues);\n    }\n    serialize() {\n        if (this.exampleSelector || !this.examples) {\n            throw new Error(\"Serializing an example selector is not currently supported\");\n        }\n        if (this.outputParser !== undefined) {\n            throw new Error(\"Serializing an output parser is not currently supported\");\n        }\n        return {\n            _type: this._getPromptType(),\n            input_variables: this.inputVariables,\n            example_prompt: this.examplePrompt.serialize(),\n            example_separator: this.exampleSeparator,\n            suffix: this.suffix,\n            prefix: this.prefix,\n            template_format: this.templateFormat,\n            examples: this.examples,\n        };\n    }\n    static async deserialize(data) {\n        const { example_prompt } = data;\n        if (!example_prompt) {\n            throw new Error(\"Missing example prompt\");\n        }\n        const examplePrompt = await PromptTemplate.deserialize(example_prompt);\n        let examples;\n        if (Array.isArray(data.examples)) {\n            examples = data.examples;\n        }\n        else {\n            throw new Error(\"Invalid examples format. Only list or string are supported.\");\n        }\n        return new FewShotPromptTemplate({\n            inputVariables: data.input_variables,\n            examplePrompt,\n            examples,\n            exampleSeparator: data.example_separator,\n            prefix: data.prefix,\n            suffix: data.suffix,\n            templateFormat: data.template_format,\n        });\n    }\n}\n/**\n * Chat prompt template that contains few-shot examples.\n * @augments BasePromptTemplateInput\n * @augments FewShotChatMessagePromptTemplateInput\n */\nexport class FewShotChatMessagePromptTemplate extends BaseChatPromptTemplate {\n    _getPromptType() {\n        return \"few_shot_chat\";\n    }\n    static lc_name() {\n        return \"FewShotChatMessagePromptTemplate\";\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"examples\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"exampleSelector\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"examplePrompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"suffix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\"\n        });\n        Object.defineProperty(this, \"exampleSeparator\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\\n\\n\"\n        });\n        Object.defineProperty(this, \"prefix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\"\n        });\n        Object.defineProperty(this, \"templateFormat\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"f-string\"\n        });\n        Object.defineProperty(this, \"validateTemplate\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        this.examples = fields.examples;\n        this.examplePrompt = fields.examplePrompt;\n        this.exampleSeparator = fields.exampleSeparator ?? \"\\n\\n\";\n        this.exampleSelector = fields.exampleSelector;\n        this.prefix = fields.prefix ?? \"\";\n        this.suffix = fields.suffix ?? \"\";\n        this.templateFormat = fields.templateFormat ?? \"f-string\";\n        this.validateTemplate = fields.validateTemplate ?? true;\n        if (this.examples !== undefined && this.exampleSelector !== undefined) {\n            throw new Error(\"Only one of 'examples' and 'example_selector' should be provided\");\n        }\n        if (this.examples === undefined && this.exampleSelector === undefined) {\n            throw new Error(\"One of 'examples' and 'example_selector' should be provided\");\n        }\n        if (this.validateTemplate) {\n            let totalInputVariables = this.inputVariables;\n            if (this.partialVariables) {\n                totalInputVariables = totalInputVariables.concat(Object.keys(this.partialVariables));\n            }\n            checkValidTemplate(this.prefix + this.suffix, this.templateFormat, totalInputVariables);\n        }\n    }\n    async getExamples(inputVariables) {\n        if (this.examples !== undefined) {\n            return this.examples;\n        }\n        if (this.exampleSelector !== undefined) {\n            return this.exampleSelector.selectExamples(inputVariables);\n        }\n        throw new Error(\"One of 'examples' and 'example_selector' should be provided\");\n    }\n    /**\n     * Formats the list of values and returns a list of formatted messages.\n     * @param values The values to format the prompt with.\n     * @returns A promise that resolves to a string representing the formatted prompt.\n     */\n    async formatMessages(values) {\n        const allValues = await this.mergePartialAndUserVariables(values);\n        let examples = await this.getExamples(allValues);\n        examples = examples.map((example) => {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const result = {};\n            this.examplePrompt.inputVariables.forEach((inputVariable) => {\n                result[inputVariable] = example[inputVariable];\n            });\n            return result;\n        });\n        const messages = [];\n        for (const example of examples) {\n            const exampleMessages = await this.examplePrompt.formatMessages(example);\n            messages.push(...exampleMessages);\n        }\n        return messages;\n    }\n    /**\n     * Formats the prompt with the given values.\n     * @param values The values to format the prompt with.\n     * @returns A promise that resolves to a string representing the formatted prompt.\n     */\n    async format(values) {\n        const allValues = await this.mergePartialAndUserVariables(values);\n        const examples = await this.getExamples(allValues);\n        const exampleMessages = await Promise.all(examples.map((example) => this.examplePrompt.formatMessages(example)));\n        const exampleStrings = exampleMessages\n            .flat()\n            .map((message) => message.content);\n        const template = [this.prefix, ...exampleStrings, this.suffix].join(this.exampleSeparator);\n        return renderTemplate(template, this.templateFormat, allValues);\n    }\n    /**\n     * Partially formats the prompt with the given values.\n     * @param values The values to partially format the prompt with.\n     * @returns A promise that resolves to an instance of `FewShotChatMessagePromptTemplate` with the given values partially formatted.\n     */\n    async partial(values) {\n        const newInputVariables = this.inputVariables.filter((variable) => !(variable in values));\n        const newPartialVariables = {\n            ...(this.partialVariables ?? {}),\n            ...values,\n        };\n        const promptDict = {\n            ...this,\n            inputVariables: newInputVariables,\n            partialVariables: newPartialVariables,\n        };\n        return new FewShotChatMessagePromptTemplate(promptDict);\n    }\n}\n"],"names":["BaseMessagePromptTemplate","constructor","super","arguments","Object","defineProperty","this","enumerable","configurable","writable","value","invoke","input","options","_callWithConfig","formatMessages","runType","BaseMessageStringPromptTemplate","fields","prompt","inputVariables","values","format","BaseChatPromptTemplate","formatPromptValue","toString","resultMessages","ChatMessagePromptTemplate","lc_name","role","fromTemplate","template","PromptTemplate","HumanMessagePromptTemplate","AIMessagePromptTemplate","SystemMessagePromptTemplate","_coerceMessagePromptTemplateLike","messagePromptTemplateLike","message","_getType","content","isInstance","Error","ChatPromptTemplate","lc_aliases","promptMessages","assign","validateTemplate","inputVariablesMessages","Set","promptMessage","inputVariable","add","totalInputVariables","inputVariablesInstance","partialVariables","concat","keys","difference","filter","x","has","size","otherDifference","_getPromptType","_parseImagePrompts","inputValues","formattedMessageContent","Promise","all","map","async","item","type","image_url","url","imageUrl","promptTemplatePlaceholder","formattedUrl","allValues","mergePartialAndUserVariables","push","reduce","acc","optional","partial","newInputVariables","iv","newPartialVariables","promptDict","humanTemplate","fromMessages","flattenedMessages","flattenedPartialVariables","create","fromPromptMessages","FewShotPromptTemplate","undefined","examples","exampleSelector","prefix","suffix","templateFormat","getExamples","selectExamples","exampleStrings","example","examplePrompt","join","exampleSeparator","serialize","outputParser","_type","input_variables","example_prompt","example_separator","template_format","deserialize","data","Array","isArray"],"sourceRoot":""}