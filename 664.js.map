{"version":3,"file":"664.js","mappings":"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","sources":["webpack://inqviz-excel/./node_modules/langchain/dist/chains/combine_docs_chain.js"],"sourcesContent":["import { BaseChain } from \"./base.js\";\nimport { LLMChain } from \"./llm_chain.js\";\nimport { PromptTemplate } from \"../prompts/prompt.js\";\n/**\n * Chain that combines documents by stuffing into context.\n * @augments BaseChain\n * @augments StuffDocumentsChainInput\n */\nexport class StuffDocumentsChain extends BaseChain {\n    static lc_name() {\n        return \"StuffDocumentsChain\";\n    }\n    get inputKeys() {\n        return [this.inputKey, ...this.llmChain.inputKeys].filter((key) => key !== this.documentVariableName);\n    }\n    get outputKeys() {\n        return this.llmChain.outputKeys;\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"llmChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"input_documents\"\n        });\n        Object.defineProperty(this, \"documentVariableName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"context\"\n        });\n        this.llmChain = fields.llmChain;\n        this.documentVariableName =\n            fields.documentVariableName ?? this.documentVariableName;\n        this.inputKey = fields.inputKey ?? this.inputKey;\n    }\n    /** @ignore */\n    _prepInputs(values) {\n        if (!(this.inputKey in values)) {\n            throw new Error(`Document key ${this.inputKey} not found.`);\n        }\n        const { [this.inputKey]: docs, ...rest } = values;\n        const texts = docs.map(({ pageContent }) => pageContent);\n        const text = texts.join(\"\\n\\n\");\n        return {\n            ...rest,\n            [this.documentVariableName]: text,\n        };\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        const result = await this.llmChain.call(this._prepInputs(values), runManager?.getChild(\"combine_documents\"));\n        return result;\n    }\n    _chainType() {\n        return \"stuff_documents_chain\";\n    }\n    static async deserialize(data) {\n        if (!data.llm_chain) {\n            throw new Error(\"Missing llm_chain\");\n        }\n        return new StuffDocumentsChain({\n            llmChain: await LLMChain.deserialize(data.llm_chain),\n        });\n    }\n    serialize() {\n        return {\n            _type: this._chainType(),\n            llm_chain: this.llmChain.serialize(),\n        };\n    }\n}\n/**\n * Combine documents by mapping a chain over them, then combining results.\n * @augments BaseChain\n * @augments StuffDocumentsChainInput\n */\nexport class MapReduceDocumentsChain extends BaseChain {\n    static lc_name() {\n        return \"MapReduceDocumentsChain\";\n    }\n    get inputKeys() {\n        return [this.inputKey, ...this.combineDocumentChain.inputKeys];\n    }\n    get outputKeys() {\n        return this.combineDocumentChain.outputKeys;\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"llmChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"input_documents\"\n        });\n        Object.defineProperty(this, \"documentVariableName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"context\"\n        });\n        Object.defineProperty(this, \"returnIntermediateSteps\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"maxTokens\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 3000\n        });\n        Object.defineProperty(this, \"maxIterations\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 10\n        });\n        Object.defineProperty(this, \"ensureMapStep\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"combineDocumentChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.llmChain = fields.llmChain;\n        this.combineDocumentChain = fields.combineDocumentChain;\n        this.documentVariableName =\n            fields.documentVariableName ?? this.documentVariableName;\n        this.ensureMapStep = fields.ensureMapStep ?? this.ensureMapStep;\n        this.inputKey = fields.inputKey ?? this.inputKey;\n        this.maxTokens = fields.maxTokens ?? this.maxTokens;\n        this.maxIterations = fields.maxIterations ?? this.maxIterations;\n        this.returnIntermediateSteps = fields.returnIntermediateSteps ?? false;\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        if (!(this.inputKey in values)) {\n            throw new Error(`Document key ${this.inputKey} not found.`);\n        }\n        const { [this.inputKey]: docs, ...rest } = values;\n        let currentDocs = docs;\n        let intermediateSteps = [];\n        // For each iteration, we'll use the `llmChain` to get a new result\n        for (let i = 0; i < this.maxIterations; i += 1) {\n            const inputs = currentDocs.map((d) => ({\n                [this.documentVariableName]: d.pageContent,\n                ...rest,\n            }));\n            const canSkipMapStep = i !== 0 || !this.ensureMapStep;\n            if (canSkipMapStep) {\n                // Calculate the total tokens required in the input\n                const formatted = await this.combineDocumentChain.llmChain.prompt.format(this.combineDocumentChain._prepInputs({\n                    [this.combineDocumentChain.inputKey]: currentDocs,\n                    ...rest,\n                }));\n                const length = await this.combineDocumentChain.llmChain._getNumTokens(formatted);\n                const withinTokenLimit = length < this.maxTokens;\n                // If we can skip the map step, and we're within the token limit, we don't\n                // need to run the map step, so just break out of the loop.\n                if (withinTokenLimit) {\n                    break;\n                }\n            }\n            const results = await this.llmChain.apply(inputs, \n            // If we have a runManager, then we need to create a child for each input\n            // so that we can track the progress of each input.\n            runManager\n                ? Array.from({ length: inputs.length }, (_, i) => runManager.getChild(`map_${i + 1}`))\n                : undefined);\n            const { outputKey } = this.llmChain;\n            // If the flag is set, then concat that to the intermediate steps\n            if (this.returnIntermediateSteps) {\n                intermediateSteps = intermediateSteps.concat(results.map((r) => r[outputKey]));\n            }\n            currentDocs = results.map((r) => ({\n                pageContent: r[outputKey],\n                metadata: {},\n            }));\n        }\n        // Now, with the final result of all the inputs from the `llmChain`, we can\n        // run the `combineDocumentChain` over them.\n        const newInputs = {\n            [this.combineDocumentChain.inputKey]: currentDocs,\n            ...rest,\n        };\n        const result = await this.combineDocumentChain.call(newInputs, runManager?.getChild(\"combine_documents\"));\n        // Return the intermediate steps results if the flag is set\n        if (this.returnIntermediateSteps) {\n            return { ...result, intermediateSteps };\n        }\n        return result;\n    }\n    _chainType() {\n        return \"map_reduce_documents_chain\";\n    }\n    static async deserialize(data) {\n        if (!data.llm_chain) {\n            throw new Error(\"Missing llm_chain\");\n        }\n        if (!data.combine_document_chain) {\n            throw new Error(\"Missing combine_document_chain\");\n        }\n        return new MapReduceDocumentsChain({\n            llmChain: await LLMChain.deserialize(data.llm_chain),\n            combineDocumentChain: await StuffDocumentsChain.deserialize(data.combine_document_chain),\n        });\n    }\n    serialize() {\n        return {\n            _type: this._chainType(),\n            llm_chain: this.llmChain.serialize(),\n            combine_document_chain: this.combineDocumentChain.serialize(),\n        };\n    }\n}\n/**\n * Combine documents by doing a first pass and then refining on more documents.\n * @augments BaseChain\n * @augments RefineDocumentsChainInput\n */\nexport class RefineDocumentsChain extends BaseChain {\n    static lc_name() {\n        return \"RefineDocumentsChain\";\n    }\n    get defaultDocumentPrompt() {\n        return new PromptTemplate({\n            inputVariables: [\"page_content\"],\n            template: \"{page_content}\",\n        });\n    }\n    get inputKeys() {\n        return [\n            ...new Set([\n                this.inputKey,\n                ...this.llmChain.inputKeys,\n                ...this.refineLLMChain.inputKeys,\n            ]),\n        ].filter((key) => key !== this.documentVariableName && key !== this.initialResponseName);\n    }\n    get outputKeys() {\n        return [this.outputKey];\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"llmChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"input_documents\"\n        });\n        Object.defineProperty(this, \"outputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"output_text\"\n        });\n        Object.defineProperty(this, \"documentVariableName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"context\"\n        });\n        Object.defineProperty(this, \"initialResponseName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"existing_answer\"\n        });\n        Object.defineProperty(this, \"refineLLMChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"documentPrompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: this.defaultDocumentPrompt\n        });\n        this.llmChain = fields.llmChain;\n        this.refineLLMChain = fields.refineLLMChain;\n        this.documentVariableName =\n            fields.documentVariableName ?? this.documentVariableName;\n        this.inputKey = fields.inputKey ?? this.inputKey;\n        this.outputKey = fields.outputKey ?? this.outputKey;\n        this.documentPrompt = fields.documentPrompt ?? this.documentPrompt;\n        this.initialResponseName =\n            fields.initialResponseName ?? this.initialResponseName;\n    }\n    /** @ignore */\n    async _constructInitialInputs(doc, rest) {\n        const baseInfo = {\n            page_content: doc.pageContent,\n            ...doc.metadata,\n        };\n        const documentInfo = {};\n        this.documentPrompt.inputVariables.forEach((value) => {\n            documentInfo[value] = baseInfo[value];\n        });\n        const baseInputs = {\n            [this.documentVariableName]: await this.documentPrompt.format({\n                ...documentInfo,\n            }),\n        };\n        const inputs = { ...baseInputs, ...rest };\n        return inputs;\n    }\n    /** @ignore */\n    async _constructRefineInputs(doc, res) {\n        const baseInfo = {\n            page_content: doc.pageContent,\n            ...doc.metadata,\n        };\n        const documentInfo = {};\n        this.documentPrompt.inputVariables.forEach((value) => {\n            documentInfo[value] = baseInfo[value];\n        });\n        const baseInputs = {\n            [this.documentVariableName]: await this.documentPrompt.format({\n                ...documentInfo,\n            }),\n        };\n        const inputs = { [this.initialResponseName]: res, ...baseInputs };\n        return inputs;\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        if (!(this.inputKey in values)) {\n            throw new Error(`Document key ${this.inputKey} not found.`);\n        }\n        const { [this.inputKey]: docs, ...rest } = values;\n        const currentDocs = docs;\n        const initialInputs = await this._constructInitialInputs(currentDocs[0], rest);\n        let res = await this.llmChain.predict({ ...initialInputs }, runManager?.getChild(\"answer\"));\n        const refineSteps = [res];\n        for (let i = 1; i < currentDocs.length; i += 1) {\n            const refineInputs = await this._constructRefineInputs(currentDocs[i], res);\n            const inputs = { ...refineInputs, ...rest };\n            res = await this.refineLLMChain.predict({ ...inputs }, runManager?.getChild(\"refine\"));\n            refineSteps.push(res);\n        }\n        return { [this.outputKey]: res };\n    }\n    _chainType() {\n        return \"refine_documents_chain\";\n    }\n    static async deserialize(data) {\n        const SerializedLLMChain = data.llm_chain;\n        if (!SerializedLLMChain) {\n            throw new Error(\"Missing llm_chain\");\n        }\n        const SerializedRefineDocumentChain = data.refine_llm_chain;\n        if (!SerializedRefineDocumentChain) {\n            throw new Error(\"Missing refine_llm_chain\");\n        }\n        return new RefineDocumentsChain({\n            llmChain: await LLMChain.deserialize(SerializedLLMChain),\n            refineLLMChain: await LLMChain.deserialize(SerializedRefineDocumentChain),\n        });\n    }\n    serialize() {\n        return {\n            _type: this._chainType(),\n            llm_chain: this.llmChain.serialize(),\n            refine_llm_chain: this.refineLLMChain.serialize(),\n        };\n    }\n}\n"],"names":["StuffDocumentsChain","lc_name","inputKeys","this","inputKey","llmChain","filter","key","documentVariableName","outputKeys","constructor","fields","super","Object","defineProperty","enumerable","configurable","writable","value","_prepInputs","values","Error","docs","rest","text","map","pageContent","join","_call","runManager","call","getChild","_chainType","deserialize","data","llm_chain","LLMChain","serialize","_type","MapReduceDocumentsChain","combineDocumentChain","ensureMapStep","maxTokens","maxIterations","returnIntermediateSteps","currentDocs","intermediateSteps","i","inputs","d","formatted","prompt","format","_getNumTokens","results","apply","Array","from","length","_","undefined","outputKey","concat","r","metadata","newInputs","result","combine_document_chain","RefineDocumentsChain","defaultDocumentPrompt","P","inputVariables","template","Set","refineLLMChain","initialResponseName","documentPrompt","_constructInitialInputs","doc","baseInfo","page_content","documentInfo","forEach","_constructRefineInputs","res","baseInputs","initialInputs","predict","refineSteps","push","SerializedLLMChain","SerializedRefineDocumentChain","refine_llm_chain"],"sourceRoot":""}