{"version":3,"file":"functions.js","mappings":"m8CAMA,SAAsBA,EAAOC,EAAwBC,G,uGAE5C,OADDC,EAAeF,EAASG,OAAOA,OAAOC,KAAK,MAC1C,GAAMC,OAAOC,UACjBC,SAASL,GACTM,MAAK,SAAOC,GAAI,OAAAC,EAAAC,OAAA,qB,kDACf,SAAMC,EAAiBH,EAAKV,OAAQE,EAAWY,U,OAC/C,OADAC,EAAAC,OACO,CAAP,EAAON,EAAKO,a,UAEbC,OAAM,SAACC,GAAM,OAAAC,QAAQC,OAAO,IAAIC,gBAAgBC,MAAMD,gBAAgBE,UAAUC,iBAAkBN,GAArF,K,OANhB,MAAO,CAAP,EAAOJ,EAAAC,Q,OAcT,SAAsBU,EAAczB,EAAwBC,G,uGAEnD,OADDC,EAAeF,EAASG,OAAOA,OAAOC,KAAK,MAC1C,GAAMC,OAAOC,UACjBC,SAASL,GACTM,MAAK,SAAOC,GAAI,OAAAC,EAAAC,OAAA,qB,kDACf,SAAMC,EAAiBH,EAAKV,OAAQE,EAAWY,U,OAC/C,OADAC,EAAAC,OACO,CAAP,EAAON,EAAKV,Q,UAEbkB,OAAM,SAACC,GAAM,OAAAC,QAAQC,OAAO,IAAIC,gBAAgBC,MAAMD,gBAAgBE,UAAUC,iBAAkBN,GAArF,K,OANhB,MAAO,CAAP,EAAOJ,EAAAC,Q,OAST,SAAeH,EAAiBb,EAAgBc,G,uGAE9C,OAAQd,EAAO2B,eACb,IAAK,MACHC,EAAQ,QACR,MACF,IAAK,KACHA,EAAQ,MACR,MACF,IAAK,UACHA,EAAQ,SACR,MACF,QACEA,EAAQ,QAEZ,SAAMC,MAAMC,KAAI,SAAOC,GAAO,OAAApB,EAAAC,OAAA,qB,4DAI5B,OAHMG,EAAqBD,EAAQkB,MAAM,KAAKC,KAAI,SAACC,GAAM,OAAAA,EAAEC,QAAQ,WAAY,GAAtB,IAAlDC,EAASrB,EAAA,GAAEsB,EAAKtB,EAAA,GACDgB,EAAQO,SAASC,WAAWC,QAAQJ,GAAWK,SAASJ,GAChEK,OAAOC,KAAKf,MAAQA,EAClC,GAAMG,EAAQa,Q,cAAdC,EAAA7B,O,6BAJFD,EAAAC,O,4FA1CF8B,EAAAA,OAAA9C,EAgBA8C,EAAAA,cAAApB,EAiCAJ,gBAAgByB,UAAU,SAAU/C,GACpCsB,gBAAgByB,UAAU,gBAAiBrB,E,ICpDvB,OAAO,EADD,CAAC,E","sources":["webpack://inqviz-excel/./src/functions/functions.ts","webpack://inqviz-excel/webpack/startup"],"sourcesContent":["/* global window */\r\n\r\n/**\r\n * @customfunction\r\n * @requiresAddress\r\n */\r\nexport async function answer(question: string[][][], invocation: CustomFunctions.Invocation): Promise<string> {\r\n  const fullQuestion = question.flat().flat().join(\"\\n\");\r\n  return await window.responder\r\n    .response(fullQuestion)\r\n    .then(async (resp) => {\r\n      await applyAnswerColor(resp.answer, invocation.address);\r\n      return resp.explanation;\r\n    })\r\n    .catch((e) => Promise.reject(new CustomFunctions.Error(CustomFunctions.ErrorCode.invalidReference, e)));\r\n}\r\n\r\n\r\n/**\r\n * @customfunction\r\n * @requiresAddress\r\n */\r\nexport async function answer_yes_no(question: string[][][], invocation: CustomFunctions.Invocation): Promise<string> {\r\n  const fullQuestion = question.flat().flat().join(\"\\n\");\r\n  return await window.responder\r\n    .response(fullQuestion)\r\n    .then(async (resp) => {\r\n      await applyAnswerColor(resp.answer, invocation.address);\r\n      return resp.answer;\r\n    })\r\n    .catch((e) => Promise.reject(new CustomFunctions.Error(CustomFunctions.ErrorCode.invalidReference, e)));\r\n}\r\n\r\nasync function applyAnswerColor(answer: string, address: string) {\r\n  let color: string;\r\n  switch (answer.toLowerCase()) {\r\n    case \"yes\":\r\n      color = \"green\";\r\n      break;\r\n    case \"no\":\r\n      color = \"red\";\r\n      break;\r\n    case \"unknown\":\r\n      color = \"yellow\";\r\n      break;\r\n    default:\r\n      color = \"white\";\r\n  }\r\n  await Excel.run(async (context) => {\r\n    const [worksheet, range] = address.split(\"!\").map((s) => s.replace(/^'+|'+$/g, \"\"));\r\n    const functionRange = context.workbook.worksheets.getItem(worksheet).getRange(range);\r\n    functionRange.format.fill.color = color;\r\n    await context.sync();\r\n  });\r\n}\nCustomFunctions.associate(\"ANSWER\", answer);\nCustomFunctions.associate(\"ANSWER_YES_NO\", answer_yes_no);","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[26098](0, __webpack_exports__);\n"],"names":["answer","question","invocation","fullQuestion","flat","join","window","responder","response","then","resp","__awaiter","_this","applyAnswerColor","address","_a","sent","explanation","catch","e","Promise","reject","CustomFunctions","Error","ErrorCode","invalidReference","answer_yes_no","toLowerCase","color","Excel","run","context","split","map","s","replace","worksheet","range","workbook","worksheets","getItem","getRange","format","fill","sync","_b","exports","associate"],"sourceRoot":""}