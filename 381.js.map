{"version":3,"file":"381.js","mappings":"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","sources":["webpack://inqviz-excel/./node_modules/@langchain/core/dist/outputs.js","webpack://inqviz-excel/./node_modules/@langchain/core/dist/runnables/passthrough.js","webpack://inqviz-excel/./node_modules/@langchain/core/dist/runnables/router.js","webpack://inqviz-excel/./node_modules/@langchain/core/dist/runnables/branch.js","webpack://inqviz-excel/./node_modules/@langchain/core/dist/runnables/history.js","webpack://inqviz-excel/./node_modules/@langchain/core/dist/utils/js-sha1/hash.js","webpack://inqviz-excel/./node_modules/@langchain/core/dist/caches.js","webpack://inqviz-excel/./node_modules/js-tiktoken/dist/chunk-P6KNE6HN.js","webpack://inqviz-excel/./node_modules/@langchain/core/dist/utils/tiktoken.js","webpack://inqviz-excel/./node_modules/@langchain/core/dist/language_models/base.js","webpack://inqviz-excel/./node_modules/langchain/dist/chains/base.js"],"sourcesContent":["export const RUN_KEY = \"__run\";\n/**\n * Chunk of a single generation. Used for streaming.\n */\nexport class GenerationChunk {\n    constructor(fields) {\n        Object.defineProperty(this, \"text\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"generationInfo\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.text = fields.text;\n        this.generationInfo = fields.generationInfo;\n    }\n    concat(chunk) {\n        return new GenerationChunk({\n            text: this.text + chunk.text,\n            generationInfo: {\n                ...this.generationInfo,\n                ...chunk.generationInfo,\n            },\n        });\n    }\n}\nexport class ChatGenerationChunk extends GenerationChunk {\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"message\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.message = fields.message;\n    }\n    concat(chunk) {\n        return new ChatGenerationChunk({\n            text: this.text + chunk.text,\n            generationInfo: {\n                ...this.generationInfo,\n                ...chunk.generationInfo,\n            },\n            message: this.message.concat(chunk.message),\n        });\n    }\n}\n","import { concat } from \"../utils/stream.js\";\nimport { Runnable, RunnableAssign, RunnableMap, } from \"./base.js\";\nimport { ensureConfig } from \"./config.js\";\n/**\n * A runnable to passthrough inputs unchanged or with additional keys.\n *\n * This runnable behaves almost like the identity function, except that it\n * can be configured to add additional keys to the output, if the input is\n * an object.\n *\n * The example below demonstrates how to use `RunnablePassthrough to\n * passthrough the input from the `.invoke()`\n *\n * @example\n * ```typescript\n * const chain = RunnableSequence.from([\n *   {\n *     question: new RunnablePassthrough(),\n *     context: async () => loadContextFromStore(),\n *   },\n *   prompt,\n *   llm,\n *   outputParser,\n * ]);\n * const response = await chain.invoke(\n *   \"I can pass a single string instead of an object since I'm using `RunnablePassthrough`.\"\n * );\n * ```\n */\nexport class RunnablePassthrough extends Runnable {\n    static lc_name() {\n        return \"RunnablePassthrough\";\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"runnables\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"func\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        if (fields) {\n            this.func = fields.func;\n        }\n    }\n    async invoke(input, options) {\n        const config = ensureConfig(options);\n        if (this.func) {\n            await this.func(input, config);\n        }\n        return this._callWithConfig((input) => Promise.resolve(input), input, config);\n    }\n    async *transform(generator, options) {\n        const config = ensureConfig(options);\n        let finalOutput;\n        let finalOutputSupported = true;\n        for await (const chunk of this._transformStreamWithConfig(generator, (input) => input, config)) {\n            yield chunk;\n            if (finalOutputSupported) {\n                if (finalOutput === undefined) {\n                    finalOutput = chunk;\n                }\n                else {\n                    try {\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        finalOutput = concat(finalOutput, chunk);\n                    }\n                    catch {\n                        finalOutput = undefined;\n                        finalOutputSupported = false;\n                    }\n                }\n            }\n        }\n        if (this.func && finalOutput !== undefined) {\n            await this.func(finalOutput, config);\n        }\n    }\n    /**\n     * A runnable that assigns key-value pairs to the input.\n     *\n     * The example below shows how you could use it with an inline function.\n     *\n     * @example\n     * ```typescript\n     * const prompt =\n     *   PromptTemplate.fromTemplate(`Write a SQL query to answer the question using the following schema: {schema}\n     * Question: {question}\n     * SQL Query:`);\n     *\n     * // The `RunnablePassthrough.assign()` is used here to passthrough the input from the `.invoke()`\n     * // call (in this example it's the question), along with any inputs passed to the `.assign()` method.\n     * // In this case, we're passing the schema.\n     * const sqlQueryGeneratorChain = RunnableSequence.from([\n     *   RunnablePassthrough.assign({\n     *     schema: async () => db.getTableInfo(),\n     *   }),\n     *   prompt,\n     *   new ChatOpenAI({}).bind({ stop: [\"\\nSQLResult:\"] }),\n     *   new StringOutputParser(),\n     * ]);\n     * const result = await sqlQueryGeneratorChain.invoke({\n     *   question: \"How many employees are there?\",\n     * });\n     * ```\n     */\n    static assign(mapping) {\n        return new RunnableAssign(new RunnableMap({ steps: mapping }));\n    }\n}\n","import { Runnable } from \"./base.js\";\nimport { ensureConfig } from \"./config.js\";\n/**\n * A runnable that routes to a set of runnables based on Input['key'].\n * Returns the output of the selected runnable.\n */\nexport class RouterRunnable extends Runnable {\n    static lc_name() {\n        return \"RouterRunnable\";\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"runnables\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"runnables\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.runnables = fields.runnables;\n    }\n    async invoke(input, options) {\n        const { key, input: actualInput } = input;\n        const runnable = this.runnables[key];\n        if (runnable === undefined) {\n            throw new Error(`No runnable associated with key \"${key}\".`);\n        }\n        return runnable.invoke(actualInput, ensureConfig(options));\n    }\n    async batch(inputs, options, batchOptions) {\n        const keys = inputs.map((input) => input.key);\n        const actualInputs = inputs.map((input) => input.input);\n        const missingKey = keys.find((key) => this.runnables[key] === undefined);\n        if (missingKey !== undefined) {\n            throw new Error(`One or more keys do not have a corresponding runnable.`);\n        }\n        const runnables = keys.map((key) => this.runnables[key]);\n        const optionsList = this._getOptionsList(options ?? {}, inputs.length);\n        const maxConcurrency = optionsList[0]?.maxConcurrency ?? batchOptions?.maxConcurrency;\n        const batchSize = maxConcurrency && maxConcurrency > 0 ? maxConcurrency : inputs.length;\n        const batchResults = [];\n        for (let i = 0; i < actualInputs.length; i += batchSize) {\n            const batchPromises = actualInputs\n                .slice(i, i + batchSize)\n                .map((actualInput, i) => runnables[i].invoke(actualInput, optionsList[i]));\n            const batchResult = await Promise.all(batchPromises);\n            batchResults.push(batchResult);\n        }\n        return batchResults.flat();\n    }\n    async stream(input, options) {\n        const { key, input: actualInput } = input;\n        const runnable = this.runnables[key];\n        if (runnable === undefined) {\n            throw new Error(`No runnable associated with key \"${key}\".`);\n        }\n        return runnable.stream(actualInput, options);\n    }\n}\n","import { Runnable, _coerceToDict, _coerceToRunnable, } from \"./base.js\";\nimport { getCallbackManagerForConfig, patchConfig, } from \"./config.js\";\nimport { concat } from \"../utils/stream.js\";\n/**\n * Class that represents a runnable branch. The RunnableBranch is\n * initialized with an array of branches and a default branch. When invoked,\n * it evaluates the condition of each branch in order and executes the\n * corresponding branch if the condition is true. If none of the conditions\n * are true, it executes the default branch.\n * @example\n * ```typescript\n * const branch = RunnableBranch.from([\n *   [\n *     (x: { topic: string; question: string }) =>\n *       x.topic.toLowerCase().includes(\"anthropic\"),\n *     anthropicChain,\n *   ],\n *   [\n *     (x: { topic: string; question: string }) =>\n *       x.topic.toLowerCase().includes(\"langchain\"),\n *     langChainChain,\n *   ],\n *   generalChain,\n * ]);\n *\n * const fullChain = RunnableSequence.from([\n *   {\n *     topic: classificationChain,\n *     question: (input: { question: string }) => input.question,\n *   },\n *   branch,\n * ]);\n *\n * const result = await fullChain.invoke({\n *   question: \"how do I use LangChain?\",\n * });\n * ```\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport class RunnableBranch extends Runnable {\n    static lc_name() {\n        return \"RunnableBranch\";\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"runnables\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"default\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"branches\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.branches = fields.branches;\n        this.default = fields.default;\n    }\n    /**\n     * Convenience method for instantiating a RunnableBranch from\n     * RunnableLikes (objects, functions, or Runnables).\n     *\n     * Each item in the input except for the last one should be a\n     * tuple with two items. The first is a \"condition\" RunnableLike that\n     * returns \"true\" if the second RunnableLike in the tuple should run.\n     *\n     * The final item in the input should be a RunnableLike that acts as a\n     * default branch if no other branches match.\n     *\n     * @example\n     * ```ts\n     * import { RunnableBranch } from \"@langchain/core/runnables\";\n     *\n     * const branch = RunnableBranch.from([\n     *   [(x: number) => x > 0, (x: number) => x + 1],\n     *   [(x: number) => x < 0, (x: number) => x - 1],\n     *   (x: number) => x\n     * ]);\n     * ```\n     * @param branches An array where the every item except the last is a tuple of [condition, runnable]\n     *   pairs. The last item is a default runnable which is invoked if no other condition matches.\n     * @returns A new RunnableBranch.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static from(branches) {\n        if (branches.length < 1) {\n            throw new Error(\"RunnableBranch requires at least one branch\");\n        }\n        const branchLikes = branches.slice(0, -1);\n        const coercedBranches = branchLikes.map(([condition, runnable]) => [\n            _coerceToRunnable(condition),\n            _coerceToRunnable(runnable),\n        ]);\n        const defaultBranch = _coerceToRunnable(branches[branches.length - 1]);\n        return new this({\n            branches: coercedBranches,\n            default: defaultBranch,\n        });\n    }\n    async _invoke(input, config, runManager) {\n        let result;\n        for (let i = 0; i < this.branches.length; i += 1) {\n            const [condition, branchRunnable] = this.branches[i];\n            const conditionValue = await condition.invoke(input, patchConfig(config, {\n                callbacks: runManager?.getChild(`condition:${i + 1}`),\n            }));\n            if (conditionValue) {\n                result = await branchRunnable.invoke(input, patchConfig(config, {\n                    callbacks: runManager?.getChild(`branch:${i + 1}`),\n                }));\n                break;\n            }\n        }\n        if (!result) {\n            result = await this.default.invoke(input, patchConfig(config, {\n                callbacks: runManager?.getChild(\"branch:default\"),\n            }));\n        }\n        return result;\n    }\n    async invoke(input, config = {}) {\n        return this._callWithConfig(this._invoke, input, config);\n    }\n    async *_streamIterator(input, config) {\n        const callbackManager_ = await getCallbackManagerForConfig(config);\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), _coerceToDict(input, \"input\"), config?.runId, undefined, undefined, undefined, config?.runName);\n        let finalOutput;\n        let finalOutputSupported = true;\n        let stream;\n        try {\n            for (let i = 0; i < this.branches.length; i += 1) {\n                const [condition, branchRunnable] = this.branches[i];\n                const conditionValue = await condition.invoke(input, patchConfig(config, {\n                    callbacks: runManager?.getChild(`condition:${i + 1}`),\n                }));\n                if (conditionValue) {\n                    stream = await branchRunnable.stream(input, patchConfig(config, {\n                        callbacks: runManager?.getChild(`branch:${i + 1}`),\n                    }));\n                    for await (const chunk of stream) {\n                        yield chunk;\n                        if (finalOutputSupported) {\n                            if (finalOutput === undefined) {\n                                finalOutput = chunk;\n                            }\n                            else {\n                                try {\n                                    finalOutput = concat(finalOutput, chunk);\n                                }\n                                catch (e) {\n                                    finalOutput = undefined;\n                                    finalOutputSupported = false;\n                                }\n                            }\n                        }\n                    }\n                    break;\n                }\n            }\n            if (stream === undefined) {\n                stream = await this.default.stream(input, patchConfig(config, {\n                    callbacks: runManager?.getChild(\"branch:default\"),\n                }));\n                for await (const chunk of stream) {\n                    yield chunk;\n                    if (finalOutputSupported) {\n                        if (finalOutput === undefined) {\n                            finalOutput = chunk;\n                        }\n                        else {\n                            try {\n                                finalOutput = concat(finalOutput, chunk);\n                            }\n                            catch (e) {\n                                finalOutput = undefined;\n                                finalOutputSupported = false;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        await runManager?.handleChainEnd(finalOutput ?? {});\n    }\n}\n","import { AIMessage, HumanMessage, isBaseMessage, } from \"../messages/index.js\";\nimport { RunnableBinding, RunnableLambda, } from \"./base.js\";\nimport { RunnablePassthrough } from \"./passthrough.js\";\n/**\n * Wraps a LCEL chain and manages history. It appends input messages\n * and chain outputs as history, and adds the current history messages to\n * the chain input.\n * @example\n * ```typescript\n * // yarn add @langchain/anthropic @langchain/community @upstash/redis\n *\n * import {\n *   ChatPromptTemplate,\n *   MessagesPlaceholder,\n * } from \"@langchain/core/prompts\";\n * import { ChatAnthropic } from \"@langchain/anthropic\";\n * import { UpstashRedisChatMessageHistory } from \"@langchain/community/stores/message/upstash_redis\";\n * // For demos, you can also use an in-memory store:\n * // import { ChatMessageHistory } from \"langchain/stores/message/in_memory\";\n *\n * const prompt = ChatPromptTemplate.fromMessages([\n *   [\"system\", \"You're an assistant who's good at {ability}\"],\n *   new MessagesPlaceholder(\"history\"),\n *   [\"human\", \"{question}\"],\n * ]);\n *\n * const chain = prompt.pipe(new ChatAnthropic({}));\n *\n * const chainWithHistory = new RunnableWithMessageHistory({\n *   runnable: chain,\n *   getMessageHistory: (sessionId) =>\n *     new UpstashRedisChatMessageHistory({\n *       sessionId,\n *       config: {\n *         url: process.env.UPSTASH_REDIS_REST_URL!,\n *         token: process.env.UPSTASH_REDIS_REST_TOKEN!,\n *       },\n *     }),\n *   inputMessagesKey: \"question\",\n *   historyMessagesKey: \"history\",\n * });\n *\n * const result = await chainWithHistory.invoke(\n *   {\n *     ability: \"math\",\n *     question: \"What does cosine mean?\",\n *   },\n *   {\n *     configurable: {\n *       sessionId: \"some_string_identifying_a_user\",\n *     },\n *   }\n * );\n *\n * const result2 = await chainWithHistory.invoke(\n *   {\n *     ability: \"math\",\n *     question: \"What's its inverse?\",\n *   },\n *   {\n *     configurable: {\n *       sessionId: \"some_string_identifying_a_user\",\n *     },\n *   }\n * );\n * ```\n */\nexport class RunnableWithMessageHistory extends RunnableBinding {\n    constructor(fields) {\n        let historyChain = new RunnableLambda({\n            func: (input, options) => this._enterHistory(input, options ?? {}),\n        }).withConfig({ runName: \"loadHistory\" });\n        const messagesKey = fields.historyMessagesKey ?? fields.inputMessagesKey;\n        if (messagesKey) {\n            historyChain = RunnablePassthrough.assign({\n                [messagesKey]: historyChain,\n            }).withConfig({ runName: \"insertHistory\" });\n        }\n        const bound = historyChain\n            .pipe(fields.runnable.withListeners({\n            onEnd: (run, config) => this._exitHistory(run, config ?? {}),\n        }))\n            .withConfig({ runName: \"RunnableWithMessageHistory\" });\n        const config = fields.config ?? {};\n        super({\n            ...fields,\n            config,\n            bound,\n        });\n        Object.defineProperty(this, \"runnable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputMessagesKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"outputMessagesKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"historyMessagesKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"getMessageHistory\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.runnable = fields.runnable;\n        this.getMessageHistory = fields.getMessageHistory;\n        this.inputMessagesKey = fields.inputMessagesKey;\n        this.outputMessagesKey = fields.outputMessagesKey;\n        this.historyMessagesKey = fields.historyMessagesKey;\n    }\n    _getInputMessages(inputValue) {\n        if (typeof inputValue === \"string\") {\n            return [new HumanMessage(inputValue)];\n        }\n        else if (Array.isArray(inputValue)) {\n            return inputValue;\n        }\n        else {\n            return [inputValue];\n        }\n    }\n    _getOutputMessages(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    outputValue) {\n        let newOutputValue = outputValue;\n        if (!Array.isArray(outputValue) &&\n            !isBaseMessage(outputValue) &&\n            typeof outputValue !== \"string\") {\n            newOutputValue = outputValue[this.outputMessagesKey ?? \"output\"];\n        }\n        if (typeof newOutputValue === \"string\") {\n            return [new AIMessage(newOutputValue)];\n        }\n        else if (Array.isArray(newOutputValue)) {\n            return newOutputValue;\n        }\n        else if (isBaseMessage(newOutputValue)) {\n            return [newOutputValue];\n        }\n        throw new Error(`Expected a string, BaseMessage, or array of BaseMessages. Received: ${JSON.stringify(newOutputValue, null, 2)}`);\n    }\n    async _enterHistory(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    input, kwargs) {\n        const history = kwargs?.config?.configurable?.messageHistory;\n        if (this.historyMessagesKey) {\n            return history.getMessages();\n        }\n        const inputVal = input ||\n            (this.inputMessagesKey ? input[this.inputMessagesKey] : undefined);\n        const historyMessages = history ? await history.getMessages() : [];\n        const returnType = [\n            ...historyMessages,\n            ...this._getInputMessages(inputVal),\n        ];\n        return returnType;\n    }\n    async _exitHistory(run, config) {\n        const history = config.configurable?.messageHistory;\n        // Get input messages\n        const { inputs } = run;\n        const inputValue = inputs[this.inputMessagesKey ?? \"input\"];\n        const inputMessages = this._getInputMessages(inputValue);\n        // Get output messages\n        const outputValue = run.outputs;\n        if (!outputValue) {\n            throw new Error(`Output values from 'Run' undefined. Run: ${JSON.stringify(run, null, 2)}`);\n        }\n        const outputMessages = this._getOutputMessages(outputValue);\n        for await (const message of [...inputMessages, ...outputMessages]) {\n            await history.addMessage(message);\n        }\n    }\n    async _mergeConfig(...configs) {\n        const config = await super._mergeConfig(...configs);\n        // Extract sessionId\n        if (!config.configurable || !config.configurable.sessionId) {\n            const exampleInput = {\n                [this.inputMessagesKey ?? \"input\"]: \"foo\",\n            };\n            const exampleConfig = { configurable: { sessionId: \"123\" } };\n            throw new Error(`sessionId is required. Pass it in as part of the config argument to .invoke() or .stream()\\n` +\n                `eg. chain.invoke(${JSON.stringify(exampleInput)}, ${JSON.stringify(exampleConfig)})`);\n        }\n        // attach messageHistory\n        const { sessionId } = config.configurable;\n        config.configurable.messageHistory = await this.getMessageHistory(sessionId);\n        return config;\n    }\n}\n","// @ts-nocheck\n// Inlined to deal with portability issues with importing crypto module\n/*\n * [js-sha1]{@link https://github.com/emn178/js-sha1}\n *\n * @version 0.6.0\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n/*jslint bitwise: true */\n\"use strict\";\nvar root = typeof window === \"object\" ? window : {};\nvar HEX_CHARS = \"0123456789abcdef\".split(\"\");\nvar EXTRA = [-2147483648, 8388608, 32768, 128];\nvar SHIFT = [24, 16, 8, 0];\nvar OUTPUT_TYPES = [\"hex\", \"array\", \"digest\", \"arrayBuffer\"];\nvar blocks = [];\nfunction Sha1(sharedMemory) {\n    if (sharedMemory) {\n        blocks[0] =\n            blocks[16] =\n                blocks[1] =\n                    blocks[2] =\n                        blocks[3] =\n                            blocks[4] =\n                                blocks[5] =\n                                    blocks[6] =\n                                        blocks[7] =\n                                            blocks[8] =\n                                                blocks[9] =\n                                                    blocks[10] =\n                                                        blocks[11] =\n                                                            blocks[12] =\n                                                                blocks[13] =\n                                                                    blocks[14] =\n                                                                        blocks[15] =\n                                                                            0;\n        this.blocks = blocks;\n    }\n    else {\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    }\n    this.h0 = 0x67452301;\n    this.h1 = 0xefcdab89;\n    this.h2 = 0x98badcfe;\n    this.h3 = 0x10325476;\n    this.h4 = 0xc3d2e1f0;\n    this.block = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n}\nSha1.prototype.update = function (message) {\n    if (this.finalized) {\n        return;\n    }\n    var notString = typeof message !== \"string\";\n    if (notString && message.constructor === root.ArrayBuffer) {\n        message = new Uint8Array(message);\n    }\n    var code, index = 0, i, length = message.length || 0, blocks = this.blocks;\n    while (index < length) {\n        if (this.hashed) {\n            this.hashed = false;\n            blocks[0] = this.block;\n            blocks[16] =\n                blocks[1] =\n                    blocks[2] =\n                        blocks[3] =\n                            blocks[4] =\n                                blocks[5] =\n                                    blocks[6] =\n                                        blocks[7] =\n                                            blocks[8] =\n                                                blocks[9] =\n                                                    blocks[10] =\n                                                        blocks[11] =\n                                                            blocks[12] =\n                                                                blocks[13] =\n                                                                    blocks[14] =\n                                                                        blocks[15] =\n                                                                            0;\n        }\n        if (notString) {\n            for (i = this.start; index < length && i < 64; ++index) {\n                blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n            }\n        }\n        else {\n            for (i = this.start; index < length && i < 64; ++index) {\n                code = message.charCodeAt(index);\n                if (code < 0x80) {\n                    blocks[i >> 2] |= code << SHIFT[i++ & 3];\n                }\n                else if (code < 0x800) {\n                    blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n                }\n                else if (code < 0xd800 || code >= 0xe000) {\n                    blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n                }\n                else {\n                    code =\n                        0x10000 +\n                            (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n                    blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n                }\n            }\n        }\n        this.lastByteIndex = i;\n        this.bytes += i - this.start;\n        if (i >= 64) {\n            this.block = blocks[16];\n            this.start = i - 64;\n            this.hash();\n            this.hashed = true;\n        }\n        else {\n            this.start = i;\n        }\n    }\n    if (this.bytes > 4294967295) {\n        this.hBytes += (this.bytes / 4294967296) << 0;\n        this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n};\nSha1.prototype.finalize = function () {\n    if (this.finalized) {\n        return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[16] = this.block;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    this.block = blocks[16];\n    if (i >= 56) {\n        if (!this.hashed) {\n            this.hash();\n        }\n        blocks[0] = this.block;\n        blocks[16] =\n            blocks[1] =\n                blocks[2] =\n                    blocks[3] =\n                        blocks[4] =\n                            blocks[5] =\n                                blocks[6] =\n                                    blocks[7] =\n                                        blocks[8] =\n                                            blocks[9] =\n                                                blocks[10] =\n                                                    blocks[11] =\n                                                        blocks[12] =\n                                                            blocks[13] =\n                                                                blocks[14] =\n                                                                    blocks[15] =\n                                                                        0;\n    }\n    blocks[14] = (this.hBytes << 3) | (this.bytes >>> 29);\n    blocks[15] = this.bytes << 3;\n    this.hash();\n};\nSha1.prototype.hash = function () {\n    var a = this.h0, b = this.h1, c = this.h2, d = this.h3, e = this.h4;\n    var f, j, t, blocks = this.blocks;\n    for (j = 16; j < 80; ++j) {\n        t = blocks[j - 3] ^ blocks[j - 8] ^ blocks[j - 14] ^ blocks[j - 16];\n        blocks[j] = (t << 1) | (t >>> 31);\n    }\n    for (j = 0; j < 20; j += 5) {\n        f = (b & c) | (~b & d);\n        t = (a << 5) | (a >>> 27);\n        e = (t + f + e + 1518500249 + blocks[j]) << 0;\n        b = (b << 30) | (b >>> 2);\n        f = (a & b) | (~a & c);\n        t = (e << 5) | (e >>> 27);\n        d = (t + f + d + 1518500249 + blocks[j + 1]) << 0;\n        a = (a << 30) | (a >>> 2);\n        f = (e & a) | (~e & b);\n        t = (d << 5) | (d >>> 27);\n        c = (t + f + c + 1518500249 + blocks[j + 2]) << 0;\n        e = (e << 30) | (e >>> 2);\n        f = (d & e) | (~d & a);\n        t = (c << 5) | (c >>> 27);\n        b = (t + f + b + 1518500249 + blocks[j + 3]) << 0;\n        d = (d << 30) | (d >>> 2);\n        f = (c & d) | (~c & e);\n        t = (b << 5) | (b >>> 27);\n        a = (t + f + a + 1518500249 + blocks[j + 4]) << 0;\n        c = (c << 30) | (c >>> 2);\n    }\n    for (; j < 40; j += 5) {\n        f = b ^ c ^ d;\n        t = (a << 5) | (a >>> 27);\n        e = (t + f + e + 1859775393 + blocks[j]) << 0;\n        b = (b << 30) | (b >>> 2);\n        f = a ^ b ^ c;\n        t = (e << 5) | (e >>> 27);\n        d = (t + f + d + 1859775393 + blocks[j + 1]) << 0;\n        a = (a << 30) | (a >>> 2);\n        f = e ^ a ^ b;\n        t = (d << 5) | (d >>> 27);\n        c = (t + f + c + 1859775393 + blocks[j + 2]) << 0;\n        e = (e << 30) | (e >>> 2);\n        f = d ^ e ^ a;\n        t = (c << 5) | (c >>> 27);\n        b = (t + f + b + 1859775393 + blocks[j + 3]) << 0;\n        d = (d << 30) | (d >>> 2);\n        f = c ^ d ^ e;\n        t = (b << 5) | (b >>> 27);\n        a = (t + f + a + 1859775393 + blocks[j + 4]) << 0;\n        c = (c << 30) | (c >>> 2);\n    }\n    for (; j < 60; j += 5) {\n        f = (b & c) | (b & d) | (c & d);\n        t = (a << 5) | (a >>> 27);\n        e = (t + f + e - 1894007588 + blocks[j]) << 0;\n        b = (b << 30) | (b >>> 2);\n        f = (a & b) | (a & c) | (b & c);\n        t = (e << 5) | (e >>> 27);\n        d = (t + f + d - 1894007588 + blocks[j + 1]) << 0;\n        a = (a << 30) | (a >>> 2);\n        f = (e & a) | (e & b) | (a & b);\n        t = (d << 5) | (d >>> 27);\n        c = (t + f + c - 1894007588 + blocks[j + 2]) << 0;\n        e = (e << 30) | (e >>> 2);\n        f = (d & e) | (d & a) | (e & a);\n        t = (c << 5) | (c >>> 27);\n        b = (t + f + b - 1894007588 + blocks[j + 3]) << 0;\n        d = (d << 30) | (d >>> 2);\n        f = (c & d) | (c & e) | (d & e);\n        t = (b << 5) | (b >>> 27);\n        a = (t + f + a - 1894007588 + blocks[j + 4]) << 0;\n        c = (c << 30) | (c >>> 2);\n    }\n    for (; j < 80; j += 5) {\n        f = b ^ c ^ d;\n        t = (a << 5) | (a >>> 27);\n        e = (t + f + e - 899497514 + blocks[j]) << 0;\n        b = (b << 30) | (b >>> 2);\n        f = a ^ b ^ c;\n        t = (e << 5) | (e >>> 27);\n        d = (t + f + d - 899497514 + blocks[j + 1]) << 0;\n        a = (a << 30) | (a >>> 2);\n        f = e ^ a ^ b;\n        t = (d << 5) | (d >>> 27);\n        c = (t + f + c - 899497514 + blocks[j + 2]) << 0;\n        e = (e << 30) | (e >>> 2);\n        f = d ^ e ^ a;\n        t = (c << 5) | (c >>> 27);\n        b = (t + f + b - 899497514 + blocks[j + 3]) << 0;\n        d = (d << 30) | (d >>> 2);\n        f = c ^ d ^ e;\n        t = (b << 5) | (b >>> 27);\n        a = (t + f + a - 899497514 + blocks[j + 4]) << 0;\n        c = (c << 30) | (c >>> 2);\n    }\n    this.h0 = (this.h0 + a) << 0;\n    this.h1 = (this.h1 + b) << 0;\n    this.h2 = (this.h2 + c) << 0;\n    this.h3 = (this.h3 + d) << 0;\n    this.h4 = (this.h4 + e) << 0;\n};\nSha1.prototype.hex = function () {\n    this.finalize();\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4;\n    return (HEX_CHARS[(h0 >> 28) & 0x0f] +\n        HEX_CHARS[(h0 >> 24) & 0x0f] +\n        HEX_CHARS[(h0 >> 20) & 0x0f] +\n        HEX_CHARS[(h0 >> 16) & 0x0f] +\n        HEX_CHARS[(h0 >> 12) & 0x0f] +\n        HEX_CHARS[(h0 >> 8) & 0x0f] +\n        HEX_CHARS[(h0 >> 4) & 0x0f] +\n        HEX_CHARS[h0 & 0x0f] +\n        HEX_CHARS[(h1 >> 28) & 0x0f] +\n        HEX_CHARS[(h1 >> 24) & 0x0f] +\n        HEX_CHARS[(h1 >> 20) & 0x0f] +\n        HEX_CHARS[(h1 >> 16) & 0x0f] +\n        HEX_CHARS[(h1 >> 12) & 0x0f] +\n        HEX_CHARS[(h1 >> 8) & 0x0f] +\n        HEX_CHARS[(h1 >> 4) & 0x0f] +\n        HEX_CHARS[h1 & 0x0f] +\n        HEX_CHARS[(h2 >> 28) & 0x0f] +\n        HEX_CHARS[(h2 >> 24) & 0x0f] +\n        HEX_CHARS[(h2 >> 20) & 0x0f] +\n        HEX_CHARS[(h2 >> 16) & 0x0f] +\n        HEX_CHARS[(h2 >> 12) & 0x0f] +\n        HEX_CHARS[(h2 >> 8) & 0x0f] +\n        HEX_CHARS[(h2 >> 4) & 0x0f] +\n        HEX_CHARS[h2 & 0x0f] +\n        HEX_CHARS[(h3 >> 28) & 0x0f] +\n        HEX_CHARS[(h3 >> 24) & 0x0f] +\n        HEX_CHARS[(h3 >> 20) & 0x0f] +\n        HEX_CHARS[(h3 >> 16) & 0x0f] +\n        HEX_CHARS[(h3 >> 12) & 0x0f] +\n        HEX_CHARS[(h3 >> 8) & 0x0f] +\n        HEX_CHARS[(h3 >> 4) & 0x0f] +\n        HEX_CHARS[h3 & 0x0f] +\n        HEX_CHARS[(h4 >> 28) & 0x0f] +\n        HEX_CHARS[(h4 >> 24) & 0x0f] +\n        HEX_CHARS[(h4 >> 20) & 0x0f] +\n        HEX_CHARS[(h4 >> 16) & 0x0f] +\n        HEX_CHARS[(h4 >> 12) & 0x0f] +\n        HEX_CHARS[(h4 >> 8) & 0x0f] +\n        HEX_CHARS[(h4 >> 4) & 0x0f] +\n        HEX_CHARS[h4 & 0x0f]);\n};\nSha1.prototype.toString = Sha1.prototype.hex;\nSha1.prototype.digest = function () {\n    this.finalize();\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4;\n    return [\n        (h0 >> 24) & 0xff,\n        (h0 >> 16) & 0xff,\n        (h0 >> 8) & 0xff,\n        h0 & 0xff,\n        (h1 >> 24) & 0xff,\n        (h1 >> 16) & 0xff,\n        (h1 >> 8) & 0xff,\n        h1 & 0xff,\n        (h2 >> 24) & 0xff,\n        (h2 >> 16) & 0xff,\n        (h2 >> 8) & 0xff,\n        h2 & 0xff,\n        (h3 >> 24) & 0xff,\n        (h3 >> 16) & 0xff,\n        (h3 >> 8) & 0xff,\n        h3 & 0xff,\n        (h4 >> 24) & 0xff,\n        (h4 >> 16) & 0xff,\n        (h4 >> 8) & 0xff,\n        h4 & 0xff,\n    ];\n};\nSha1.prototype.array = Sha1.prototype.digest;\nSha1.prototype.arrayBuffer = function () {\n    this.finalize();\n    var buffer = new ArrayBuffer(20);\n    var dataView = new DataView(buffer);\n    dataView.setUint32(0, this.h0);\n    dataView.setUint32(4, this.h1);\n    dataView.setUint32(8, this.h2);\n    dataView.setUint32(12, this.h3);\n    dataView.setUint32(16, this.h4);\n    return buffer;\n};\nexport const insecureHash = (message) => {\n    return new Sha1(true).update(message)[\"hex\"]();\n};\n","import { insecureHash } from \"./utils/hash.js\";\nimport { mapStoredMessageToChatMessage, } from \"./messages/index.js\";\n/**\n * This cache key should be consistent across all versions of langchain.\n * It is currently NOT consistent across versions of langchain.\n *\n * A huge benefit of having a remote cache (like redis) is that you can\n * access the cache from different processes/machines. The allows you to\n * seperate concerns and scale horizontally.\n *\n * TODO: Make cache key consistent across versions of langchain.\n */\nexport const getCacheKey = (...strings) => insecureHash(strings.join(\"_\"));\nexport function deserializeStoredGeneration(storedGeneration) {\n    if (storedGeneration.message !== undefined) {\n        return {\n            text: storedGeneration.text,\n            message: mapStoredMessageToChatMessage(storedGeneration.message),\n        };\n    }\n    else {\n        return { text: storedGeneration.text };\n    }\n}\nexport function serializeGeneration(generation) {\n    const serializedValue = {\n        text: generation.text,\n    };\n    if (generation.message !== undefined) {\n        serializedValue.message = generation.message.toDict();\n    }\n    return serializedValue;\n}\n/**\n * Base class for all caches. All caches should extend this class.\n */\nexport class BaseCache {\n}\nconst GLOBAL_MAP = new Map();\n/**\n * A cache for storing LLM generations that stores data in memory.\n */\nexport class InMemoryCache extends BaseCache {\n    constructor(map) {\n        super();\n        Object.defineProperty(this, \"cache\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.cache = map ?? new Map();\n    }\n    /**\n     * Retrieves data from the cache using a prompt and an LLM key. If the\n     * data is not found, it returns null.\n     * @param prompt The prompt used to find the data.\n     * @param llmKey The LLM key used to find the data.\n     * @returns The data corresponding to the prompt and LLM key, or null if not found.\n     */\n    lookup(prompt, llmKey) {\n        return Promise.resolve(this.cache.get(getCacheKey(prompt, llmKey)) ?? null);\n    }\n    /**\n     * Updates the cache with new data using a prompt and an LLM key.\n     * @param prompt The prompt used to store the data.\n     * @param llmKey The LLM key used to store the data.\n     * @param value The data to be stored.\n     */\n    async update(prompt, llmKey, value) {\n        this.cache.set(getCacheKey(prompt, llmKey), value);\n    }\n    /**\n     * Returns a global instance of InMemoryCache using a predefined global\n     * map as the initial cache.\n     * @returns A global instance of InMemoryCache.\n     */\n    static global() {\n        return new InMemoryCache(GLOBAL_MAP);\n    }\n}\n","import base64 from 'base64-js';\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\n\n// src/utils.ts\nfunction never(_) {\n}\nfunction bytePairMerge(piece, ranks) {\n  let parts = Array.from(\n    { length: piece.length },\n    (_, i) => ({ start: i, end: i + 1 })\n  );\n  while (parts.length > 1) {\n    let minRank = null;\n    for (let i = 0; i < parts.length - 1; i++) {\n      const slice = piece.slice(parts[i].start, parts[i + 1].end);\n      const rank = ranks.get(slice.join(\",\"));\n      if (rank == null)\n        continue;\n      if (minRank == null || rank < minRank[0]) {\n        minRank = [rank, i];\n      }\n    }\n    if (minRank != null) {\n      const i = minRank[1];\n      parts[i] = { start: parts[i].start, end: parts[i + 1].end };\n      parts.splice(i + 1, 1);\n    } else {\n      break;\n    }\n  }\n  return parts;\n}\nfunction bytePairEncode(piece, ranks) {\n  if (piece.length === 1)\n    return [ranks.get(piece.join(\",\"))];\n  return bytePairMerge(piece, ranks).map((p) => ranks.get(piece.slice(p.start, p.end).join(\",\"))).filter((x) => x != null);\n}\nfunction escapeRegex(str) {\n  return str.replace(/[\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n}\nvar _Tiktoken = class {\n  /** @internal */\n  specialTokens;\n  /** @internal */\n  inverseSpecialTokens;\n  /** @internal */\n  patStr;\n  /** @internal */\n  textEncoder = new TextEncoder();\n  /** @internal */\n  textDecoder = new TextDecoder(\"utf-8\");\n  /** @internal */\n  rankMap = /* @__PURE__ */ new Map();\n  /** @internal */\n  textMap = /* @__PURE__ */ new Map();\n  constructor(ranks, extendedSpecialTokens) {\n    this.patStr = ranks.pat_str;\n    const uncompressed = ranks.bpe_ranks.split(\"\\n\").filter(Boolean).reduce((memo, x) => {\n      const [_, offsetStr, ...tokens] = x.split(\" \");\n      const offset = Number.parseInt(offsetStr, 10);\n      tokens.forEach((token, i) => memo[token] = offset + i);\n      return memo;\n    }, {});\n    for (const [token, rank] of Object.entries(uncompressed)) {\n      const bytes = base64.toByteArray(token);\n      this.rankMap.set(bytes.join(\",\"), rank);\n      this.textMap.set(rank, bytes);\n    }\n    this.specialTokens = { ...ranks.special_tokens, ...extendedSpecialTokens };\n    this.inverseSpecialTokens = Object.entries(this.specialTokens).reduce((memo, [text, rank]) => {\n      memo[rank] = this.textEncoder.encode(text);\n      return memo;\n    }, {});\n  }\n  encode(text, allowedSpecial = [], disallowedSpecial = \"all\") {\n    const regexes = new RegExp(this.patStr, \"ug\");\n    const specialRegex = _Tiktoken.specialTokenRegex(\n      Object.keys(this.specialTokens)\n    );\n    const ret = [];\n    const allowedSpecialSet = new Set(\n      allowedSpecial === \"all\" ? Object.keys(this.specialTokens) : allowedSpecial\n    );\n    const disallowedSpecialSet = new Set(\n      disallowedSpecial === \"all\" ? Object.keys(this.specialTokens).filter(\n        (x) => !allowedSpecialSet.has(x)\n      ) : disallowedSpecial\n    );\n    if (disallowedSpecialSet.size > 0) {\n      const disallowedSpecialRegex = _Tiktoken.specialTokenRegex([\n        ...disallowedSpecialSet\n      ]);\n      const specialMatch = text.match(disallowedSpecialRegex);\n      if (specialMatch != null) {\n        throw new Error(\n          `The text contains a special token that is not allowed: ${specialMatch[0]}`\n        );\n      }\n    }\n    let start = 0;\n    while (true) {\n      let nextSpecial = null;\n      let startFind = start;\n      while (true) {\n        specialRegex.lastIndex = startFind;\n        nextSpecial = specialRegex.exec(text);\n        if (nextSpecial == null || allowedSpecialSet.has(nextSpecial[0]))\n          break;\n        startFind = nextSpecial.index + 1;\n      }\n      const end = nextSpecial?.index ?? text.length;\n      for (const match of text.substring(start, end).matchAll(regexes)) {\n        const piece = this.textEncoder.encode(match[0]);\n        const token2 = this.rankMap.get(piece.join(\",\"));\n        if (token2 != null) {\n          ret.push(token2);\n          continue;\n        }\n        ret.push(...bytePairEncode(piece, this.rankMap));\n      }\n      if (nextSpecial == null)\n        break;\n      let token = this.specialTokens[nextSpecial[0]];\n      ret.push(token);\n      start = nextSpecial.index + nextSpecial[0].length;\n    }\n    return ret;\n  }\n  decode(tokens) {\n    const res = [];\n    let length = 0;\n    for (let i2 = 0; i2 < tokens.length; ++i2) {\n      const token = tokens[i2];\n      const bytes = this.textMap.get(token) ?? this.inverseSpecialTokens[token];\n      if (bytes != null) {\n        res.push(bytes);\n        length += bytes.length;\n      }\n    }\n    const mergedArray = new Uint8Array(length);\n    let i = 0;\n    for (const bytes of res) {\n      mergedArray.set(bytes, i);\n      i += bytes.length;\n    }\n    return this.textDecoder.decode(mergedArray);\n  }\n};\nvar Tiktoken = _Tiktoken;\n__publicField(Tiktoken, \"specialTokenRegex\", (tokens) => {\n  return new RegExp(tokens.map((i) => escapeRegex(i)).join(\"|\"), \"g\");\n});\nfunction getEncodingNameForModel(model) {\n  switch (model) {\n    case \"gpt2\": {\n      return \"gpt2\";\n    }\n    case \"code-cushman-001\":\n    case \"code-cushman-002\":\n    case \"code-davinci-001\":\n    case \"code-davinci-002\":\n    case \"cushman-codex\":\n    case \"davinci-codex\":\n    case \"davinci-002\":\n    case \"text-davinci-002\":\n    case \"text-davinci-003\": {\n      return \"p50k_base\";\n    }\n    case \"code-davinci-edit-001\":\n    case \"text-davinci-edit-001\": {\n      return \"p50k_edit\";\n    }\n    case \"ada\":\n    case \"babbage\":\n    case \"babbage-002\":\n    case \"code-search-ada-code-001\":\n    case \"code-search-babbage-code-001\":\n    case \"curie\":\n    case \"davinci\":\n    case \"text-ada-001\":\n    case \"text-babbage-001\":\n    case \"text-curie-001\":\n    case \"text-davinci-001\":\n    case \"text-search-ada-doc-001\":\n    case \"text-search-babbage-doc-001\":\n    case \"text-search-curie-doc-001\":\n    case \"text-search-davinci-doc-001\":\n    case \"text-similarity-ada-001\":\n    case \"text-similarity-babbage-001\":\n    case \"text-similarity-curie-001\":\n    case \"text-similarity-davinci-001\": {\n      return \"r50k_base\";\n    }\n    case \"gpt-3.5-turbo-instruct-0914\":\n    case \"gpt-3.5-turbo-instruct\":\n    case \"gpt-3.5-turbo-16k-0613\":\n    case \"gpt-3.5-turbo-16k\":\n    case \"gpt-3.5-turbo-0613\":\n    case \"gpt-3.5-turbo-0301\":\n    case \"gpt-3.5-turbo\":\n    case \"gpt-4-32k-0613\":\n    case \"gpt-4-32k-0314\":\n    case \"gpt-4-32k\":\n    case \"gpt-4-0613\":\n    case \"gpt-4-0314\":\n    case \"gpt-4\":\n    case \"gpt-3.5-turbo-1106\":\n    case \"gpt-35-turbo\":\n    case \"gpt-4-1106-preview\":\n    case \"gpt-4-vision-preview\":\n    case \"gpt-3.5-turbo-0125\":\n    case \"gpt-4-turbo\":\n    case \"gpt-4-turbo-2024-04-09\":\n    case \"gpt-4-turbo-preview\":\n    case \"gpt-4-0125-preview\":\n    case \"text-embedding-ada-002\": {\n      return \"cl100k_base\";\n    }\n    default:\n      throw new Error(\"Unknown model\");\n  }\n}\n\nexport { Tiktoken, getEncodingNameForModel, never };\n","import { Tiktoken, getEncodingNameForModel, } from \"js-tiktoken/lite\";\nimport { AsyncCaller } from \"./async_caller.js\";\nconst cache = {};\nconst caller = /* #__PURE__ */ new AsyncCaller({});\nexport async function getEncoding(encoding) {\n    if (!(encoding in cache)) {\n        cache[encoding] = caller\n            .fetch(`https://tiktoken.pages.dev/js/${encoding}.json`)\n            .then((res) => res.json())\n            .then((data) => new Tiktoken(data))\n            .catch((e) => {\n            delete cache[encoding];\n            throw e;\n        });\n    }\n    return await cache[encoding];\n}\nexport async function encodingForModel(model) {\n    return getEncoding(getEncodingNameForModel(model));\n}\n","import { InMemoryCache } from \"../caches.js\";\nimport { StringPromptValue, ChatPromptValue, } from \"../prompt_values.js\";\nimport { coerceMessageLikeToMessage, } from \"../messages/index.js\";\nimport { AsyncCaller } from \"../utils/async_caller.js\";\nimport { encodingForModel } from \"../utils/tiktoken.js\";\nimport { Runnable } from \"../runnables/base.js\";\n// https://www.npmjs.com/package/js-tiktoken\nexport const getModelNameForTiktoken = (modelName) => {\n    if (modelName.startsWith(\"gpt-3.5-turbo-16k\")) {\n        return \"gpt-3.5-turbo-16k\";\n    }\n    if (modelName.startsWith(\"gpt-3.5-turbo-\")) {\n        return \"gpt-3.5-turbo\";\n    }\n    if (modelName.startsWith(\"gpt-4-32k\")) {\n        return \"gpt-4-32k\";\n    }\n    if (modelName.startsWith(\"gpt-4-\")) {\n        return \"gpt-4\";\n    }\n    return modelName;\n};\nexport const getEmbeddingContextSize = (modelName) => {\n    switch (modelName) {\n        case \"text-embedding-ada-002\":\n            return 8191;\n        default:\n            return 2046;\n    }\n};\nexport const getModelContextSize = (modelName) => {\n    switch (getModelNameForTiktoken(modelName)) {\n        case \"gpt-3.5-turbo-16k\":\n            return 16384;\n        case \"gpt-3.5-turbo\":\n            return 4096;\n        case \"gpt-4-32k\":\n            return 32768;\n        case \"gpt-4\":\n            return 8192;\n        case \"text-davinci-003\":\n            return 4097;\n        case \"text-curie-001\":\n            return 2048;\n        case \"text-babbage-001\":\n            return 2048;\n        case \"text-ada-001\":\n            return 2048;\n        case \"code-davinci-002\":\n            return 8000;\n        case \"code-cushman-001\":\n            return 2048;\n        default:\n            return 4097;\n    }\n};\nexport const calculateMaxTokens = async ({ prompt, modelName, }) => {\n    let numTokens;\n    try {\n        numTokens = (await encodingForModel(getModelNameForTiktoken(modelName))).encode(prompt).length;\n    }\n    catch (error) {\n        console.warn(\"Failed to calculate number of tokens, falling back to approximate count\");\n        // fallback to approximate calculation if tiktoken is not available\n        // each token is ~4 characters: https://help.openai.com/en/articles/4936856-what-are-tokens-and-how-to-count-them#\n        numTokens = Math.ceil(prompt.length / 4);\n    }\n    const maxTokens = getModelContextSize(modelName);\n    return maxTokens - numTokens;\n};\nconst getVerbosity = () => false;\n/**\n * Base class for language models, chains, tools.\n */\nexport class BaseLangChain extends Runnable {\n    get lc_attributes() {\n        return {\n            callbacks: undefined,\n            verbose: undefined,\n        };\n    }\n    constructor(params) {\n        super(params);\n        /**\n         * Whether to print out response text.\n         */\n        Object.defineProperty(this, \"verbose\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"callbacks\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"tags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.verbose = params.verbose ?? getVerbosity();\n        this.callbacks = params.callbacks;\n        this.tags = params.tags ?? [];\n        this.metadata = params.metadata ?? {};\n    }\n}\n/**\n * Base class for language models.\n */\nexport class BaseLanguageModel extends BaseLangChain {\n    /**\n     * Keys that the language model accepts as call options.\n     */\n    get callKeys() {\n        return [\"stop\", \"timeout\", \"signal\", \"tags\", \"metadata\", \"callbacks\"];\n    }\n    constructor({ callbacks, callbackManager, ...params }) {\n        super({\n            callbacks: callbacks ?? callbackManager,\n            ...params,\n        });\n        /**\n         * The async caller should be used by subclasses to make any async calls,\n         * which will thus benefit from the concurrency and retry logic.\n         */\n        Object.defineProperty(this, \"caller\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"cache\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_encoding\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        if (typeof params.cache === \"object\") {\n            this.cache = params.cache;\n        }\n        else if (params.cache) {\n            this.cache = InMemoryCache.global();\n        }\n        else {\n            this.cache = undefined;\n        }\n        this.caller = new AsyncCaller(params ?? {});\n    }\n    async getNumTokens(content) {\n        // TODO: Figure out correct value.\n        if (typeof content !== \"string\") {\n            return 0;\n        }\n        // fallback to approximate calculation if tiktoken is not available\n        let numTokens = Math.ceil(content.length / 4);\n        if (!this._encoding) {\n            try {\n                this._encoding = await encodingForModel(\"modelName\" in this\n                    ? getModelNameForTiktoken(this.modelName)\n                    : \"gpt2\");\n            }\n            catch (error) {\n                console.warn(\"Failed to calculate number of tokens, falling back to approximate count\", error);\n            }\n        }\n        if (this._encoding) {\n            try {\n                numTokens = this._encoding.encode(content).length;\n            }\n            catch (error) {\n                console.warn(\"Failed to calculate number of tokens, falling back to approximate count\", error);\n            }\n        }\n        return numTokens;\n    }\n    static _convertInputToPromptValue(input) {\n        if (typeof input === \"string\") {\n            return new StringPromptValue(input);\n        }\n        else if (Array.isArray(input)) {\n            return new ChatPromptValue(input.map(coerceMessageLikeToMessage));\n        }\n        else {\n            return input;\n        }\n    }\n    /**\n     * Get the identifying parameters of the LLM.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _identifyingParams() {\n        return {};\n    }\n    /**\n     * Create a unique cache key for a specific call to a specific language model.\n     * @param callOptions Call options for the model\n     * @returns A unique cache key.\n     */\n    _getSerializedCacheKeyParametersForCall(\n    // TODO: Fix when we remove the RunnableLambda backwards compatibility shim.\n    { config, ...callOptions }) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const params = {\n            ...this._identifyingParams(),\n            ...callOptions,\n            _type: this._llmType(),\n            _model: this._modelType(),\n        };\n        const filteredEntries = Object.entries(params).filter(([_, value]) => value !== undefined);\n        const serializedEntries = filteredEntries\n            .map(([key, value]) => `${key}:${JSON.stringify(value)}`)\n            .sort()\n            .join(\",\");\n        return serializedEntries;\n    }\n    /**\n     * @deprecated\n     * Return a json-like object representing this LLM.\n     */\n    serialize() {\n        return {\n            ...this._identifyingParams(),\n            _type: this._llmType(),\n            _model: this._modelType(),\n        };\n    }\n    /**\n     * @deprecated\n     * Load an LLM from a json-like object describing it.\n     */\n    static async deserialize(_data) {\n        throw new Error(\"Use .toJSON() instead\");\n    }\n}\n","import { RUN_KEY } from \"@langchain/core/outputs\";\nimport { CallbackManager, parseCallbackConfigArg, } from \"@langchain/core/callbacks/manager\";\nimport { ensureConfig } from \"@langchain/core/runnables\";\nimport { BaseLangChain, } from \"@langchain/core/language_models/base\";\n/**\n * Base interface that all chains must implement.\n */\nexport class BaseChain extends BaseLangChain {\n    get lc_namespace() {\n        return [\"langchain\", \"chains\", this._chainType()];\n    }\n    constructor(fields, \n    /** @deprecated */\n    verbose, \n    /** @deprecated */\n    callbacks) {\n        if (arguments.length === 1 &&\n            typeof fields === \"object\" &&\n            !(\"saveContext\" in fields)) {\n            // fields is not a BaseMemory\n            const { memory, callbackManager, ...rest } = fields;\n            super({ ...rest, callbacks: callbackManager ?? rest.callbacks });\n            this.memory = memory;\n        }\n        else {\n            // fields is a BaseMemory\n            super({ verbose, callbacks });\n            this.memory = fields;\n        }\n    }\n    /** @ignore */\n    _selectMemoryInputs(values) {\n        const valuesForMemory = { ...values };\n        if (\"signal\" in valuesForMemory) {\n            delete valuesForMemory.signal;\n        }\n        if (\"timeout\" in valuesForMemory) {\n            delete valuesForMemory.timeout;\n        }\n        return valuesForMemory;\n    }\n    /**\n     * Invoke the chain with the provided input and returns the output.\n     * @param input Input values for the chain run.\n     * @param config Optional configuration for the Runnable.\n     * @returns Promise that resolves with the output of the chain run.\n     */\n    async invoke(input, options) {\n        const config = ensureConfig(options);\n        const fullValues = await this._formatValues(input);\n        const callbackManager_ = await CallbackManager.configure(config?.callbacks, this.callbacks, config?.tags, this.tags, config?.metadata, this.metadata, { verbose: this.verbose });\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), fullValues, undefined, undefined, undefined, undefined, config?.runName);\n        let outputValues;\n        try {\n            outputValues = await (fullValues.signal\n                ? Promise.race([\n                    this._call(fullValues, runManager, config),\n                    new Promise((_, reject) => {\n                        fullValues.signal?.addEventListener(\"abort\", () => {\n                            reject(new Error(\"AbortError\"));\n                        });\n                    }),\n                ])\n                : this._call(fullValues, runManager, config));\n        }\n        catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        if (!(this.memory == null)) {\n            await this.memory.saveContext(this._selectMemoryInputs(input), outputValues);\n        }\n        await runManager?.handleChainEnd(outputValues);\n        // add the runManager's currentRunId to the outputValues\n        Object.defineProperty(outputValues, RUN_KEY, {\n            value: runManager ? { runId: runManager?.runId } : undefined,\n            configurable: true,\n        });\n        return outputValues;\n    }\n    _validateOutputs(outputs) {\n        const missingKeys = this.outputKeys.filter((k) => !(k in outputs));\n        if (missingKeys.length) {\n            throw new Error(`Missing output keys: ${missingKeys.join(\", \")} from chain ${this._chainType()}`);\n        }\n    }\n    async prepOutputs(inputs, outputs, returnOnlyOutputs = false) {\n        this._validateOutputs(outputs);\n        if (this.memory) {\n            await this.memory.saveContext(inputs, outputs);\n        }\n        if (returnOnlyOutputs) {\n            return outputs;\n        }\n        return { ...inputs, ...outputs };\n    }\n    /**\n     * Return a json-like object representing this chain.\n     */\n    serialize() {\n        throw new Error(\"Method not implemented.\");\n    }\n    /** @deprecated Use .invoke() instead. Will be removed in 0.2.0. */\n    async run(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    input, config) {\n        const inputKeys = this.inputKeys.filter((k) => !this.memory?.memoryKeys.includes(k) ?? true);\n        const isKeylessInput = inputKeys.length <= 1;\n        if (!isKeylessInput) {\n            throw new Error(`Chain ${this._chainType()} expects multiple inputs, cannot use 'run' `);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const values = inputKeys.length ? { [inputKeys[0]]: input } : {};\n        const returnValues = await this.call(values, config);\n        const keys = Object.keys(returnValues);\n        if (keys.length === 1) {\n            return returnValues[keys[0]];\n        }\n        throw new Error(\"return values have multiple keys, `run` only supported when one key currently\");\n    }\n    async _formatValues(values) {\n        const fullValues = { ...values };\n        if (fullValues.timeout && !fullValues.signal) {\n            fullValues.signal = AbortSignal.timeout(fullValues.timeout);\n            delete fullValues.timeout;\n        }\n        if (!(this.memory == null)) {\n            const newValues = await this.memory.loadMemoryVariables(this._selectMemoryInputs(values));\n            for (const [key, value] of Object.entries(newValues)) {\n                fullValues[key] = value;\n            }\n        }\n        return fullValues;\n    }\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.2.0.\n     *\n     * Run the core logic of this chain and add to output if desired.\n     *\n     * Wraps _call and handles memory.\n     */\n    async call(values, config, \n    /** @deprecated */\n    tags) {\n        const parsedConfig = { tags, ...parseCallbackConfigArg(config) };\n        return this.invoke(values, parsedConfig);\n    }\n    /**\n     * @deprecated Use .batch() instead. Will be removed in 0.2.0.\n     *\n     * Call the chain on all inputs in the list\n     */\n    async apply(inputs, config) {\n        return Promise.all(inputs.map(async (i, idx) => this.call(i, config?.[idx])));\n    }\n    /**\n     * Load a chain from a json-like object describing it.\n     */\n    static async deserialize(data, values = {}) {\n        switch (data._type) {\n            case \"llm_chain\": {\n                const { LLMChain } = await import(\"./llm_chain.js\");\n                return LLMChain.deserialize(data);\n            }\n            case \"sequential_chain\": {\n                const { SequentialChain } = await import(\"./sequential_chain.js\");\n                return SequentialChain.deserialize(data);\n            }\n            case \"simple_sequential_chain\": {\n                const { SimpleSequentialChain } = await import(\"./sequential_chain.js\");\n                return SimpleSequentialChain.deserialize(data);\n            }\n            case \"stuff_documents_chain\": {\n                const { StuffDocumentsChain } = await import(\"./combine_docs_chain.js\");\n                return StuffDocumentsChain.deserialize(data);\n            }\n            case \"map_reduce_documents_chain\": {\n                const { MapReduceDocumentsChain } = await import(\"./combine_docs_chain.js\");\n                return MapReduceDocumentsChain.deserialize(data);\n            }\n            case \"refine_documents_chain\": {\n                const { RefineDocumentsChain } = await import(\"./combine_docs_chain.js\");\n                return RefineDocumentsChain.deserialize(data);\n            }\n            case \"vector_db_qa\": {\n                const { VectorDBQAChain } = await import(\"./vector_db_qa.js\");\n                return VectorDBQAChain.deserialize(data, values);\n            }\n            case \"api_chain\": {\n                const { APIChain } = await import(\"./api/api_chain.js\");\n                return APIChain.deserialize(data);\n            }\n            default:\n                throw new Error(`Invalid prompt type in config: ${data._type}`);\n        }\n    }\n}\n"],"names":["RUN_KEY","GenerationChunk","constructor","fields","Object","defineProperty","this","enumerable","configurable","writable","value","text","generationInfo","concat","chunk","ChatGenerationChunk","super","message","root","window","HEX_CHARS","split","EXTRA","SHIFT","blocks","Sha1","sharedMemory","h0","h1","h2","h3","h4","block","start","bytes","hBytes","finalized","hashed","first","prototype","update","notString","ArrayBuffer","Uint8Array","code","i","index","length","charCodeAt","lastByteIndex","hash","finalize","j","t","a","b","c","d","e","hex","toString","digest","array","arrayBuffer","buffer","dataView","DataView","setUint32","getCacheKey","strings","insecureHash","join","BaseCache","GLOBAL_MAP","Map","InMemoryCache","map","cache","lookup","prompt","llmKey","Promise","resolve","get","set","global","__defProp","bytePairEncode","piece","ranks","parts","Array","from","_","end","minRank","slice","rank","splice","bytePairMerge","p","filter","x","key","_Tiktoken","specialTokens","inverseSpecialTokens","patStr","textEncoder","TextEncoder","textDecoder","TextDecoder","rankMap","textMap","extendedSpecialTokens","pat_str","uncompressed","bpe_ranks","Boolean","reduce","memo","offsetStr","tokens","offset","Number","parseInt","forEach","token","entries","special_tokens","encode","allowedSpecial","disallowedSpecial","regexes","RegExp","specialRegex","specialTokenRegex","keys","ret","allowedSpecialSet","Set","disallowedSpecialSet","has","size","disallowedSpecialRegex","specialMatch","match","Error","nextSpecial","startFind","lastIndex","exec","substring","matchAll","token2","push","decode","res","i2","mergedArray","Tiktoken","obj","__defNormalProp","replace","caller","BaseLangChain","lc_attributes","callbacks","undefined","verbose","params","tags","metadata","BaseLanguageModel","callKeys","callbackManager","getNumTokens","content","numTokens","Math","ceil","_encoding","async","model","encoding","fetch","then","json","data","catch","getEncoding","getEncodingNameForModel","modelName","startsWith","error","console","warn","_convertInputToPromptValue","input","isArray","_identifyingParams","_getSerializedCacheKeyParametersForCall","config","callOptions","_type","_llmType","_model","_modelType","serializedEntries","JSON","stringify","sort","serialize","deserialize","_data","BaseChain","lc_namespace","_chainType","arguments","memory","rest","_selectMemoryInputs","values","valuesForMemory","signal","timeout","invoke","options","fullValues","_formatValues","callbackManager_","configure","runManager","handleChainStart","toJSON","runName","outputValues","race","_call","reject","addEventListener","handleChainError","saveContext","handleChainEnd","runId","_validateOutputs","outputs","missingKeys","outputKeys","k","prepOutputs","inputs","returnOnlyOutputs","run","inputKeys","memoryKeys","includes","returnValues","call","AbortSignal","newValues","loadMemoryVariables","parsedConfig","apply","all","idx","LLMChain","SequentialChain","SimpleSequentialChain","StuffDocumentsChain","MapReduceDocumentsChain","RefineDocumentsChain","VectorDBQAChain","APIChain"],"sourceRoot":""}