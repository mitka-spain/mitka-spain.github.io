{"version":3,"file":"771.js","mappings":"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","sources":["webpack://inqviz-excel/./node_modules/@langchain/core/dist/prompts/chat.js","webpack://inqviz-excel/./node_modules/@langchain/core/dist/prompts/few_shot.js","webpack://inqviz-excel/./node_modules/@langchain/core/dist/prompts/image.js"],"sourcesContent":["// Default generic \"any\" values are for backwards compatibility.\n// Replace with \"string\" when we are comfortable with a breaking change.\nimport { AIMessage, HumanMessage, SystemMessage, BaseMessage, ChatMessage, coerceMessageLikeToMessage, isBaseMessage, } from \"../messages/index.js\";\nimport { ChatPromptValue, } from \"../prompt_values.js\";\nimport { Runnable } from \"../runnables/base.js\";\nimport { BaseStringPromptTemplate } from \"./string.js\";\nimport { BasePromptTemplate, } from \"./base.js\";\nimport { PromptTemplate, } from \"./prompt.js\";\nimport { ImagePromptTemplate } from \"./image.js\";\nimport { parseFString } from \"./template.js\";\n/**\n * Abstract class that serves as a base for creating message prompt\n * templates. It defines how to format messages for different roles in a\n * conversation.\n */\nexport class BaseMessagePromptTemplate extends Runnable {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"prompts\", \"chat\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n    }\n    /**\n     * Calls the formatMessages method with the provided input and options.\n     * @param input Input for the formatMessages method\n     * @param options Optional BaseCallbackConfig\n     * @returns Formatted output messages\n     */\n    async invoke(input, options) {\n        return this._callWithConfig((input) => this.formatMessages(input), input, { ...options, runType: \"prompt\" });\n    }\n}\n/**\n * Class that represents a placeholder for messages in a chat prompt. It\n * extends the BaseMessagePromptTemplate.\n */\nexport class MessagesPlaceholder extends BaseMessagePromptTemplate {\n    static lc_name() {\n        return \"MessagesPlaceholder\";\n    }\n    constructor(fields) {\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign\n            fields = { variableName: fields };\n        }\n        super(fields);\n        Object.defineProperty(this, \"variableName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"optional\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.variableName = fields.variableName;\n        this.optional = fields.optional ?? false;\n    }\n    get inputVariables() {\n        return [this.variableName];\n    }\n    validateInputOrThrow(input, variableName) {\n        if (this.optional && !input) {\n            return false;\n        }\n        else if (!input) {\n            const error = new Error(`Error: Field \"${variableName}\" in prompt uses a MessagesPlaceholder, which expects an array of BaseMessages as an input value. Received: undefined`);\n            error.name = \"InputFormatError\";\n            throw error;\n        }\n        let isInputBaseMessage = false;\n        if (Array.isArray(input)) {\n            isInputBaseMessage = input.every((message) => isBaseMessage(message));\n        }\n        else {\n            isInputBaseMessage = isBaseMessage(input);\n        }\n        if (!isInputBaseMessage) {\n            const readableInput = typeof input === \"string\" ? input : JSON.stringify(input, null, 2);\n            const error = new Error(`Error: Field \"${variableName}\" in prompt uses a MessagesPlaceholder, which expects an array of BaseMessages as an input value. Received: ${readableInput}`);\n            error.name = \"InputFormatError\";\n            throw error;\n        }\n        return true;\n    }\n    async formatMessages(values) {\n        this.validateInputOrThrow(values[this.variableName], this.variableName);\n        return values[this.variableName] ?? [];\n    }\n}\n/**\n * Abstract class that serves as a base for creating message string prompt\n * templates. It extends the BaseMessagePromptTemplate.\n */\nexport class BaseMessageStringPromptTemplate extends BaseMessagePromptTemplate {\n    constructor(fields) {\n        if (!(\"prompt\" in fields)) {\n            // eslint-disable-next-line no-param-reassign\n            fields = { prompt: fields };\n        }\n        super(fields);\n        Object.defineProperty(this, \"prompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.prompt = fields.prompt;\n    }\n    get inputVariables() {\n        return this.prompt.inputVariables;\n    }\n    async formatMessages(values) {\n        return [await this.format(values)];\n    }\n}\n/**\n * Abstract class that serves as a base for creating chat prompt\n * templates. It extends the BasePromptTemplate.\n */\nexport class BaseChatPromptTemplate extends BasePromptTemplate {\n    constructor(input) {\n        super(input);\n    }\n    async format(values) {\n        return (await this.formatPromptValue(values)).toString();\n    }\n    async formatPromptValue(values) {\n        const resultMessages = await this.formatMessages(values);\n        return new ChatPromptValue(resultMessages);\n    }\n}\n/**\n * Class that represents a chat message prompt template. It extends the\n * BaseMessageStringPromptTemplate.\n */\nexport class ChatMessagePromptTemplate extends BaseMessageStringPromptTemplate {\n    static lc_name() {\n        return \"ChatMessagePromptTemplate\";\n    }\n    constructor(fields, role) {\n        if (!(\"prompt\" in fields)) {\n            // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n            fields = { prompt: fields, role: role };\n        }\n        super(fields);\n        Object.defineProperty(this, \"role\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.role = fields.role;\n    }\n    async format(values) {\n        return new ChatMessage(await this.prompt.format(values), this.role);\n    }\n    static fromTemplate(template, role, options) {\n        return new this(PromptTemplate.fromTemplate(template, {\n            templateFormat: options?.templateFormat,\n        }), role);\n    }\n}\nclass _StringImageMessagePromptTemplate extends BaseMessagePromptTemplate {\n    static _messageClass() {\n        throw new Error(\"Can not invoke _messageClass from inside _StringImageMessagePromptTemplate\");\n    }\n    constructor(\n    /** @TODO When we come up with a better way to type prompt templates, fix this */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    fields, additionalOptions) {\n        if (!(\"prompt\" in fields)) {\n            // eslint-disable-next-line no-param-reassign\n            fields = { prompt: fields };\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"prompts\", \"chat\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"inputVariables\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"additionalOptions\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"prompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"messageClass\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        // ChatMessage contains role field, others don't.\n        // Because of this, we have a separate class property for ChatMessage.\n        Object.defineProperty(this, \"chatMessageClass\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.prompt = fields.prompt;\n        if (Array.isArray(this.prompt)) {\n            let inputVariables = [];\n            this.prompt.forEach((prompt) => {\n                if (\"inputVariables\" in prompt) {\n                    inputVariables = inputVariables.concat(prompt.inputVariables);\n                }\n            });\n            this.inputVariables = inputVariables;\n        }\n        else {\n            this.inputVariables = this.prompt.inputVariables;\n        }\n        this.additionalOptions = additionalOptions ?? this.additionalOptions;\n    }\n    createMessage(content) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const constructor = this.constructor;\n        if (constructor._messageClass()) {\n            const MsgClass = constructor._messageClass();\n            return new MsgClass({ content });\n        }\n        else if (constructor.chatMessageClass) {\n            const MsgClass = constructor.chatMessageClass();\n            // Assuming ChatMessage constructor also takes a content argument\n            return new MsgClass({\n                content,\n                role: this.getRoleFromMessageClass(MsgClass.lc_name()),\n            });\n        }\n        else {\n            throw new Error(\"No message class defined\");\n        }\n    }\n    getRoleFromMessageClass(name) {\n        switch (name) {\n            case \"HumanMessage\":\n                return \"human\";\n            case \"AIMessage\":\n                return \"ai\";\n            case \"SystemMessage\":\n                return \"system\";\n            case \"ChatMessage\":\n                return \"chat\";\n            default:\n                throw new Error(\"Invalid message class name\");\n        }\n    }\n    static fromTemplate(template, additionalOptions) {\n        if (typeof template === \"string\") {\n            return new this(PromptTemplate.fromTemplate(template, additionalOptions));\n        }\n        const prompt = [];\n        for (const item of template) {\n            if (typeof item === \"string\" ||\n                (typeof item === \"object\" && \"text\" in item)) {\n                let text = \"\";\n                if (typeof item === \"string\") {\n                    text = item;\n                }\n                else if (typeof item.text === \"string\") {\n                    text = item.text ?? \"\";\n                }\n                prompt.push(PromptTemplate.fromTemplate(text));\n            }\n            else if (typeof item === \"object\" && \"image_url\" in item) {\n                let imgTemplate = item.image_url ?? \"\";\n                let imgTemplateObject;\n                let inputVariables = [];\n                if (typeof imgTemplate === \"string\") {\n                    const parsedTemplate = parseFString(imgTemplate);\n                    const variables = parsedTemplate.flatMap((item) => item.type === \"variable\" ? [item.name] : []);\n                    if ((variables?.length ?? 0) > 0) {\n                        if (variables.length > 1) {\n                            throw new Error(`Only one format variable allowed per image template.\\nGot: ${variables}\\nFrom: ${imgTemplate}`);\n                        }\n                        inputVariables = [variables[0]];\n                    }\n                    else {\n                        inputVariables = [];\n                    }\n                    imgTemplate = { url: imgTemplate };\n                    imgTemplateObject = new ImagePromptTemplate({\n                        template: imgTemplate,\n                        inputVariables,\n                    });\n                }\n                else if (typeof imgTemplate === \"object\") {\n                    if (\"url\" in imgTemplate) {\n                        const parsedTemplate = parseFString(imgTemplate.url);\n                        inputVariables = parsedTemplate.flatMap((item) => item.type === \"variable\" ? [item.name] : []);\n                    }\n                    else {\n                        inputVariables = [];\n                    }\n                    imgTemplateObject = new ImagePromptTemplate({\n                        template: imgTemplate,\n                        inputVariables,\n                    });\n                }\n                else {\n                    throw new Error(\"Invalid image template\");\n                }\n                prompt.push(imgTemplateObject);\n            }\n        }\n        return new this({ prompt, additionalOptions });\n    }\n    async format(input) {\n        // eslint-disable-next-line no-instanceof/no-instanceof\n        if (this.prompt instanceof BaseStringPromptTemplate) {\n            const text = await this.prompt.format(input);\n            return this.createMessage(text);\n        }\n        else {\n            const content = [];\n            for (const prompt of this.prompt) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                let inputs = {};\n                if (!(\"inputVariables\" in prompt)) {\n                    throw new Error(`Prompt ${prompt} does not have inputVariables defined.`);\n                }\n                for (const item of prompt.inputVariables) {\n                    if (!inputs) {\n                        inputs = { [item]: input[item] };\n                    }\n                    inputs = { ...inputs, [item]: input[item] };\n                }\n                // eslint-disable-next-line no-instanceof/no-instanceof\n                if (prompt instanceof BaseStringPromptTemplate) {\n                    const formatted = await prompt.format(inputs);\n                    content.push({ type: \"text\", text: formatted });\n                    /** @TODO replace this */\n                    // eslint-disable-next-line no-instanceof/no-instanceof\n                }\n                else if (prompt instanceof ImagePromptTemplate) {\n                    const formatted = await prompt.format(inputs);\n                    content.push({ type: \"image_url\", image_url: formatted });\n                }\n            }\n            return this.createMessage(content);\n        }\n    }\n    async formatMessages(values) {\n        return [await this.format(values)];\n    }\n}\n/**\n * Class that represents a human message prompt template. It extends the\n * BaseMessageStringPromptTemplate.\n * @example\n * ```typescript\n * const message = HumanMessagePromptTemplate.fromTemplate(\"{text}\");\n * const formatted = await message.format({ text: \"Hello world!\" });\n *\n * const chatPrompt = ChatPromptTemplate.fromMessages([message]);\n * const formattedChatPrompt = await chatPrompt.invoke({\n *   text: \"Hello world!\",\n * });\n * ```\n */\nexport class HumanMessagePromptTemplate extends _StringImageMessagePromptTemplate {\n    static _messageClass() {\n        return HumanMessage;\n    }\n    static lc_name() {\n        return \"HumanMessagePromptTemplate\";\n    }\n}\n/**\n * Class that represents an AI message prompt template. It extends the\n * BaseMessageStringPromptTemplate.\n */\nexport class AIMessagePromptTemplate extends _StringImageMessagePromptTemplate {\n    static _messageClass() {\n        return AIMessage;\n    }\n    static lc_name() {\n        return \"AIMessagePromptTemplate\";\n    }\n}\n/**\n * Class that represents a system message prompt template. It extends the\n * BaseMessageStringPromptTemplate.\n * @example\n * ```typescript\n * const message = SystemMessagePromptTemplate.fromTemplate(\"{text}\");\n * const formatted = await message.format({ text: \"Hello world!\" });\n *\n * const chatPrompt = ChatPromptTemplate.fromMessages([message]);\n * const formattedChatPrompt = await chatPrompt.invoke({\n *   text: \"Hello world!\",\n * });\n * ```\n */\nexport class SystemMessagePromptTemplate extends _StringImageMessagePromptTemplate {\n    static _messageClass() {\n        return SystemMessage;\n    }\n    static lc_name() {\n        return \"SystemMessagePromptTemplate\";\n    }\n}\nfunction _isBaseMessagePromptTemplate(baseMessagePromptTemplateLike) {\n    return (typeof baseMessagePromptTemplateLike\n        .formatMessages === \"function\");\n}\nfunction _coerceMessagePromptTemplateLike(messagePromptTemplateLike, extra) {\n    if (_isBaseMessagePromptTemplate(messagePromptTemplateLike) ||\n        isBaseMessage(messagePromptTemplateLike)) {\n        return messagePromptTemplateLike;\n    }\n    if (Array.isArray(messagePromptTemplateLike) &&\n        messagePromptTemplateLike[0] === \"placeholder\") {\n        const messageContent = messagePromptTemplateLike[1];\n        if (typeof messageContent !== \"string\" ||\n            messageContent[0] !== \"{\" ||\n            messageContent[messageContent.length - 1] !== \"}\") {\n            throw new Error(`Invalid placeholder template: \"${messagePromptTemplateLike[1]}\". Expected a variable name surrounded by curly braces.`);\n        }\n        const variableName = messageContent.slice(1, -1);\n        return new MessagesPlaceholder({ variableName, optional: true });\n    }\n    const message = coerceMessageLikeToMessage(messagePromptTemplateLike);\n    let templateData;\n    if (typeof message.content === \"string\") {\n        templateData = message.content;\n    }\n    else {\n        // Assuming message.content is an array of complex objects, transform it.\n        templateData = message.content.map((item) => {\n            if (\"text\" in item) {\n                return { text: item.text };\n            }\n            else if (\"image_url\" in item) {\n                return { image_url: item.image_url };\n            }\n            else {\n                return item;\n            }\n        });\n    }\n    if (message._getType() === \"human\") {\n        return HumanMessagePromptTemplate.fromTemplate(templateData, extra);\n    }\n    else if (message._getType() === \"ai\") {\n        return AIMessagePromptTemplate.fromTemplate(templateData, extra);\n    }\n    else if (message._getType() === \"system\") {\n        return SystemMessagePromptTemplate.fromTemplate(templateData, extra);\n    }\n    else if (ChatMessage.isInstance(message)) {\n        return ChatMessagePromptTemplate.fromTemplate(message.content, message.role, extra);\n    }\n    else {\n        throw new Error(`Could not coerce message prompt template from input. Received message type: \"${message._getType()}\".`);\n    }\n}\nfunction isMessagesPlaceholder(x) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return x.constructor.lc_name() === \"MessagesPlaceholder\";\n}\n/**\n * Class that represents a chat prompt. It extends the\n * BaseChatPromptTemplate and uses an array of BaseMessagePromptTemplate\n * instances to format a series of messages for a conversation.\n * @example\n * ```typescript\n * const message = SystemMessagePromptTemplate.fromTemplate(\"{text}\");\n * const chatPrompt = ChatPromptTemplate.fromMessages([\n *   [\"ai\", \"You are a helpful assistant.\"],\n *   message,\n * ]);\n * const formattedChatPrompt = await chatPrompt.invoke({\n *   text: \"Hello world!\",\n * });\n * ```\n */\nexport class ChatPromptTemplate extends BaseChatPromptTemplate {\n    static lc_name() {\n        return \"ChatPromptTemplate\";\n    }\n    get lc_aliases() {\n        return {\n            promptMessages: \"messages\",\n        };\n    }\n    constructor(input) {\n        super(input);\n        Object.defineProperty(this, \"promptMessages\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"validateTemplate\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"templateFormat\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"f-string\"\n        });\n        // If input is mustache and validateTemplate is not defined, set it to false\n        if (input.templateFormat === \"mustache\" &&\n            input.validateTemplate === undefined) {\n            this.validateTemplate = false;\n        }\n        Object.assign(this, input);\n        if (this.validateTemplate) {\n            const inputVariablesMessages = new Set();\n            for (const promptMessage of this.promptMessages) {\n                // eslint-disable-next-line no-instanceof/no-instanceof\n                if (promptMessage instanceof BaseMessage)\n                    continue;\n                for (const inputVariable of promptMessage.inputVariables) {\n                    inputVariablesMessages.add(inputVariable);\n                }\n            }\n            const totalInputVariables = this.inputVariables;\n            const inputVariablesInstance = new Set(this.partialVariables\n                ? totalInputVariables.concat(Object.keys(this.partialVariables))\n                : totalInputVariables);\n            const difference = new Set([...inputVariablesInstance].filter((x) => !inputVariablesMessages.has(x)));\n            if (difference.size > 0) {\n                throw new Error(`Input variables \\`${[\n                    ...difference,\n                ]}\\` are not used in any of the prompt messages.`);\n            }\n            const otherDifference = new Set([...inputVariablesMessages].filter((x) => !inputVariablesInstance.has(x)));\n            if (otherDifference.size > 0) {\n                throw new Error(`Input variables \\`${[\n                    ...otherDifference,\n                ]}\\` are used in prompt messages but not in the prompt template.`);\n            }\n        }\n    }\n    _getPromptType() {\n        return \"chat\";\n    }\n    async _parseImagePrompts(message, inputValues) {\n        if (typeof message.content === \"string\") {\n            return message;\n        }\n        const formattedMessageContent = await Promise.all(message.content.map(async (item) => {\n            if (item.type !== \"image_url\") {\n                return item;\n            }\n            let imageUrl = \"\";\n            if (typeof item.image_url === \"string\") {\n                imageUrl = item.image_url;\n            }\n            else {\n                imageUrl = item.image_url.url;\n            }\n            const promptTemplatePlaceholder = PromptTemplate.fromTemplate(imageUrl);\n            const formattedUrl = await promptTemplatePlaceholder.format(inputValues);\n            if (typeof item.image_url !== \"string\" && \"url\" in item.image_url) {\n                // eslint-disable-next-line no-param-reassign\n                item.image_url.url = formattedUrl;\n            }\n            else {\n                // eslint-disable-next-line no-param-reassign\n                item.image_url = formattedUrl;\n            }\n            return item;\n        }));\n        // eslint-disable-next-line no-param-reassign\n        message.content = formattedMessageContent;\n        return message;\n    }\n    async formatMessages(values) {\n        const allValues = await this.mergePartialAndUserVariables(values);\n        let resultMessages = [];\n        for (const promptMessage of this.promptMessages) {\n            // eslint-disable-next-line no-instanceof/no-instanceof\n            if (promptMessage instanceof BaseMessage) {\n                resultMessages.push(await this._parseImagePrompts(promptMessage, allValues));\n            }\n            else {\n                const inputValues = promptMessage.inputVariables.reduce((acc, inputVariable) => {\n                    if (!(inputVariable in allValues) &&\n                        !(isMessagesPlaceholder(promptMessage) && promptMessage.optional)) {\n                        throw new Error(`Missing value for input variable \\`${inputVariable.toString()}\\``);\n                    }\n                    acc[inputVariable] = allValues[inputVariable];\n                    return acc;\n                }, {});\n                const message = await promptMessage.formatMessages(inputValues);\n                resultMessages = resultMessages.concat(message);\n            }\n        }\n        return resultMessages;\n    }\n    async partial(values) {\n        // This is implemented in a way it doesn't require making\n        // BaseMessagePromptTemplate aware of .partial()\n        const newInputVariables = this.inputVariables.filter((iv) => !(iv in values));\n        const newPartialVariables = {\n            ...(this.partialVariables ?? {}),\n            ...values,\n        };\n        const promptDict = {\n            ...this,\n            inputVariables: newInputVariables,\n            partialVariables: newPartialVariables,\n        };\n        return new ChatPromptTemplate(promptDict);\n    }\n    static fromTemplate(template, options) {\n        const prompt = PromptTemplate.fromTemplate(template, options);\n        const humanTemplate = new HumanMessagePromptTemplate({ prompt });\n        return this.fromMessages([humanTemplate]);\n    }\n    /**\n     * Create a chat model-specific prompt from individual chat messages\n     * or message-like tuples.\n     * @param promptMessages Messages to be passed to the chat model\n     * @returns A new ChatPromptTemplate\n     */\n    static fromMessages(promptMessages, extra) {\n        const flattenedMessages = promptMessages.reduce((acc, promptMessage) => acc.concat(\n        // eslint-disable-next-line no-instanceof/no-instanceof\n        promptMessage instanceof ChatPromptTemplate\n            ? promptMessage.promptMessages\n            : [\n                _coerceMessagePromptTemplateLike(promptMessage, extra),\n            ]), []);\n        const flattenedPartialVariables = promptMessages.reduce((acc, promptMessage) => \n        // eslint-disable-next-line no-instanceof/no-instanceof\n        promptMessage instanceof ChatPromptTemplate\n            ? Object.assign(acc, promptMessage.partialVariables)\n            : acc, Object.create(null));\n        const inputVariables = new Set();\n        for (const promptMessage of flattenedMessages) {\n            // eslint-disable-next-line no-instanceof/no-instanceof\n            if (promptMessage instanceof BaseMessage)\n                continue;\n            for (const inputVariable of promptMessage.inputVariables) {\n                if (inputVariable in flattenedPartialVariables) {\n                    continue;\n                }\n                inputVariables.add(inputVariable);\n            }\n        }\n        return new this({\n            ...extra,\n            inputVariables: [...inputVariables],\n            promptMessages: flattenedMessages,\n            partialVariables: flattenedPartialVariables,\n            templateFormat: extra?.templateFormat,\n        });\n    }\n    /** @deprecated Renamed to .fromMessages */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static fromPromptMessages(promptMessages) {\n        return this.fromMessages(promptMessages);\n    }\n}\n","import { BaseStringPromptTemplate } from \"./string.js\";\nimport { checkValidTemplate, renderTemplate, } from \"./template.js\";\nimport { PromptTemplate } from \"./prompt.js\";\nimport { BaseChatPromptTemplate, } from \"./chat.js\";\n/**\n * Prompt template that contains few-shot examples.\n * @augments BasePromptTemplate\n * @augments FewShotPromptTemplateInput\n * @example\n * ```typescript\n * const examplePrompt = PromptTemplate.fromTemplate(\n *   \"Input: {input}\\nOutput: {output}\",\n * );\n *\n * const exampleSelector = await SemanticSimilarityExampleSelector.fromExamples(\n *   [\n *     { input: \"happy\", output: \"sad\" },\n *     { input: \"tall\", output: \"short\" },\n *     { input: \"energetic\", output: \"lethargic\" },\n *     { input: \"sunny\", output: \"gloomy\" },\n *     { input: \"windy\", output: \"calm\" },\n *   ],\n *   new OpenAIEmbeddings(),\n *   HNSWLib,\n *   { k: 1 },\n * );\n *\n * const dynamicPrompt = new FewShotPromptTemplate({\n *   exampleSelector,\n *   examplePrompt,\n *   prefix: \"Give the antonym of every input\",\n *   suffix: \"Input: {adjective}\\nOutput:\",\n *   inputVariables: [\"adjective\"],\n * });\n *\n * // Format the dynamic prompt with the input 'rainy'\n * console.log(await dynamicPrompt.format({ adjective: \"rainy\" }));\n *\n * ```\n */\nexport class FewShotPromptTemplate extends BaseStringPromptTemplate {\n    constructor(input) {\n        super(input);\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"examples\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"exampleSelector\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"examplePrompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"suffix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\"\n        });\n        Object.defineProperty(this, \"exampleSeparator\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\\n\\n\"\n        });\n        Object.defineProperty(this, \"prefix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\"\n        });\n        Object.defineProperty(this, \"templateFormat\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"f-string\"\n        });\n        Object.defineProperty(this, \"validateTemplate\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.assign(this, input);\n        if (this.examples !== undefined && this.exampleSelector !== undefined) {\n            throw new Error(\"Only one of 'examples' and 'example_selector' should be provided\");\n        }\n        if (this.examples === undefined && this.exampleSelector === undefined) {\n            throw new Error(\"One of 'examples' and 'example_selector' should be provided\");\n        }\n        if (this.validateTemplate) {\n            let totalInputVariables = this.inputVariables;\n            if (this.partialVariables) {\n                totalInputVariables = totalInputVariables.concat(Object.keys(this.partialVariables));\n            }\n            checkValidTemplate(this.prefix + this.suffix, this.templateFormat, totalInputVariables);\n        }\n    }\n    _getPromptType() {\n        return \"few_shot\";\n    }\n    static lc_name() {\n        return \"FewShotPromptTemplate\";\n    }\n    async getExamples(inputVariables) {\n        if (this.examples !== undefined) {\n            return this.examples;\n        }\n        if (this.exampleSelector !== undefined) {\n            return this.exampleSelector.selectExamples(inputVariables);\n        }\n        throw new Error(\"One of 'examples' and 'example_selector' should be provided\");\n    }\n    async partial(values) {\n        const newInputVariables = this.inputVariables.filter((iv) => !(iv in values));\n        const newPartialVariables = {\n            ...(this.partialVariables ?? {}),\n            ...values,\n        };\n        const promptDict = {\n            ...this,\n            inputVariables: newInputVariables,\n            partialVariables: newPartialVariables,\n        };\n        return new FewShotPromptTemplate(promptDict);\n    }\n    /**\n     * Formats the prompt with the given values.\n     * @param values The values to format the prompt with.\n     * @returns A promise that resolves to a string representing the formatted prompt.\n     */\n    async format(values) {\n        const allValues = await this.mergePartialAndUserVariables(values);\n        const examples = await this.getExamples(allValues);\n        const exampleStrings = await Promise.all(examples.map((example) => this.examplePrompt.format(example)));\n        const template = [this.prefix, ...exampleStrings, this.suffix].join(this.exampleSeparator);\n        return renderTemplate(template, this.templateFormat, allValues);\n    }\n    serialize() {\n        if (this.exampleSelector || !this.examples) {\n            throw new Error(\"Serializing an example selector is not currently supported\");\n        }\n        if (this.outputParser !== undefined) {\n            throw new Error(\"Serializing an output parser is not currently supported\");\n        }\n        return {\n            _type: this._getPromptType(),\n            input_variables: this.inputVariables,\n            example_prompt: this.examplePrompt.serialize(),\n            example_separator: this.exampleSeparator,\n            suffix: this.suffix,\n            prefix: this.prefix,\n            template_format: this.templateFormat,\n            examples: this.examples,\n        };\n    }\n    static async deserialize(data) {\n        const { example_prompt } = data;\n        if (!example_prompt) {\n            throw new Error(\"Missing example prompt\");\n        }\n        const examplePrompt = await PromptTemplate.deserialize(example_prompt);\n        let examples;\n        if (Array.isArray(data.examples)) {\n            examples = data.examples;\n        }\n        else {\n            throw new Error(\"Invalid examples format. Only list or string are supported.\");\n        }\n        return new FewShotPromptTemplate({\n            inputVariables: data.input_variables,\n            examplePrompt,\n            examples,\n            exampleSeparator: data.example_separator,\n            prefix: data.prefix,\n            suffix: data.suffix,\n            templateFormat: data.template_format,\n        });\n    }\n}\n/**\n * Chat prompt template that contains few-shot examples.\n * @augments BasePromptTemplateInput\n * @augments FewShotChatMessagePromptTemplateInput\n */\nexport class FewShotChatMessagePromptTemplate extends BaseChatPromptTemplate {\n    _getPromptType() {\n        return \"few_shot_chat\";\n    }\n    static lc_name() {\n        return \"FewShotChatMessagePromptTemplate\";\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"examples\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"exampleSelector\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"examplePrompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"suffix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\"\n        });\n        Object.defineProperty(this, \"exampleSeparator\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\\n\\n\"\n        });\n        Object.defineProperty(this, \"prefix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\"\n        });\n        Object.defineProperty(this, \"templateFormat\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"f-string\"\n        });\n        Object.defineProperty(this, \"validateTemplate\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        this.examples = fields.examples;\n        this.examplePrompt = fields.examplePrompt;\n        this.exampleSeparator = fields.exampleSeparator ?? \"\\n\\n\";\n        this.exampleSelector = fields.exampleSelector;\n        this.prefix = fields.prefix ?? \"\";\n        this.suffix = fields.suffix ?? \"\";\n        this.templateFormat = fields.templateFormat ?? \"f-string\";\n        this.validateTemplate = fields.validateTemplate ?? true;\n        if (this.examples !== undefined && this.exampleSelector !== undefined) {\n            throw new Error(\"Only one of 'examples' and 'example_selector' should be provided\");\n        }\n        if (this.examples === undefined && this.exampleSelector === undefined) {\n            throw new Error(\"One of 'examples' and 'example_selector' should be provided\");\n        }\n        if (this.validateTemplate) {\n            let totalInputVariables = this.inputVariables;\n            if (this.partialVariables) {\n                totalInputVariables = totalInputVariables.concat(Object.keys(this.partialVariables));\n            }\n            checkValidTemplate(this.prefix + this.suffix, this.templateFormat, totalInputVariables);\n        }\n    }\n    async getExamples(inputVariables) {\n        if (this.examples !== undefined) {\n            return this.examples;\n        }\n        if (this.exampleSelector !== undefined) {\n            return this.exampleSelector.selectExamples(inputVariables);\n        }\n        throw new Error(\"One of 'examples' and 'example_selector' should be provided\");\n    }\n    /**\n     * Formats the list of values and returns a list of formatted messages.\n     * @param values The values to format the prompt with.\n     * @returns A promise that resolves to a string representing the formatted prompt.\n     */\n    async formatMessages(values) {\n        const allValues = await this.mergePartialAndUserVariables(values);\n        let examples = await this.getExamples(allValues);\n        examples = examples.map((example) => {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const result = {};\n            this.examplePrompt.inputVariables.forEach((inputVariable) => {\n                result[inputVariable] = example[inputVariable];\n            });\n            return result;\n        });\n        const messages = [];\n        for (const example of examples) {\n            const exampleMessages = await this.examplePrompt.formatMessages(example);\n            messages.push(...exampleMessages);\n        }\n        return messages;\n    }\n    /**\n     * Formats the prompt with the given values.\n     * @param values The values to format the prompt with.\n     * @returns A promise that resolves to a string representing the formatted prompt.\n     */\n    async format(values) {\n        const allValues = await this.mergePartialAndUserVariables(values);\n        const examples = await this.getExamples(allValues);\n        const exampleMessages = await Promise.all(examples.map((example) => this.examplePrompt.formatMessages(example)));\n        const exampleStrings = exampleMessages\n            .flat()\n            .map((message) => message.content);\n        const template = [this.prefix, ...exampleStrings, this.suffix].join(this.exampleSeparator);\n        return renderTemplate(template, this.templateFormat, allValues);\n    }\n    /**\n     * Partially formats the prompt with the given values.\n     * @param values The values to partially format the prompt with.\n     * @returns A promise that resolves to an instance of `FewShotChatMessagePromptTemplate` with the given values partially formatted.\n     */\n    async partial(values) {\n        const newInputVariables = this.inputVariables.filter((variable) => !(variable in values));\n        const newPartialVariables = {\n            ...(this.partialVariables ?? {}),\n            ...values,\n        };\n        const promptDict = {\n            ...this,\n            inputVariables: newInputVariables,\n            partialVariables: newPartialVariables,\n        };\n        return new FewShotChatMessagePromptTemplate(promptDict);\n    }\n}\n","import { ImagePromptValue } from \"../prompt_values.js\";\nimport { BasePromptTemplate, } from \"./base.js\";\nimport { checkValidTemplate } from \"./template.js\";\n/**\n * An image prompt template for a multimodal model.\n */\nexport class ImagePromptTemplate extends BasePromptTemplate {\n    static lc_name() {\n        return \"ImagePromptTemplate\";\n    }\n    constructor(input) {\n        super(input);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"prompts\", \"image\"]\n        });\n        Object.defineProperty(this, \"template\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"templateFormat\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"f-string\"\n        });\n        Object.defineProperty(this, \"validateTemplate\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        this.template = input.template;\n        this.templateFormat = input.templateFormat ?? this.templateFormat;\n        this.validateTemplate = input.validateTemplate ?? this.validateTemplate;\n        if (this.validateTemplate) {\n            let totalInputVariables = this.inputVariables;\n            if (this.partialVariables) {\n                totalInputVariables = totalInputVariables.concat(Object.keys(this.partialVariables));\n            }\n            checkValidTemplate([\n                { type: \"image_url\", image_url: this.template },\n            ], this.templateFormat, totalInputVariables);\n        }\n    }\n    _getPromptType() {\n        return \"prompt\";\n    }\n    /**\n     * Partially applies values to the prompt template.\n     * @param values The values to be partially applied to the prompt template.\n     * @returns A new instance of ImagePromptTemplate with the partially applied values.\n     */\n    async partial(values) {\n        const newInputVariables = this.inputVariables.filter((iv) => !(iv in values));\n        const newPartialVariables = {\n            ...(this.partialVariables ?? {}),\n            ...values,\n        };\n        const promptDict = {\n            ...this,\n            inputVariables: newInputVariables,\n            partialVariables: newPartialVariables,\n        };\n        return new ImagePromptTemplate(promptDict);\n    }\n    /**\n     * Formats the prompt template with the provided values.\n     * @param values The values to be used to format the prompt template.\n     * @returns A promise that resolves to a string which is the formatted prompt.\n     */\n    async format(values) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const formatted = {};\n        for (const [key, value] of Object.entries(this.template)) {\n            if (typeof value === \"string\") {\n                formatted[key] = value.replace(/{([^{}]*)}/g, (match, group) => {\n                    const replacement = values[group];\n                    return typeof replacement === \"string\" ||\n                        typeof replacement === \"number\"\n                        ? String(replacement)\n                        : match;\n                });\n            }\n            else {\n                formatted[key] = value;\n            }\n        }\n        const url = values.url || formatted.url;\n        const detail = values.detail || formatted.detail;\n        if (!url) {\n            throw new Error(\"Must provide either an image URL.\");\n        }\n        if (typeof url !== \"string\") {\n            throw new Error(\"url must be a string.\");\n        }\n        const output = { url };\n        if (detail) {\n            output.detail = detail;\n        }\n        return output;\n    }\n    /**\n     * Formats the prompt given the input values and returns a formatted\n     * prompt value.\n     * @param values The input values to format the prompt.\n     * @returns A Promise that resolves to a formatted prompt value.\n     */\n    async formatPromptValue(values) {\n        const formattedPrompt = await this.format(values);\n        return new ImagePromptValue(formattedPrompt);\n    }\n}\n"],"names":["BaseMessagePromptTemplate","constructor","super","arguments","Object","defineProperty","this","enumerable","configurable","writable","value","invoke","input","options","_callWithConfig","formatMessages","runType","MessagesPlaceholder","lc_name","fields","variableName","optional","inputVariables","validateInputOrThrow","error","Error","name","isInputBaseMessage","Array","isArray","every","message","readableInput","JSON","stringify","values","BaseMessageStringPromptTemplate","prompt","format","BaseChatPromptTemplate","formatPromptValue","toString","resultMessages","ChatMessagePromptTemplate","role","fromTemplate","template","PromptTemplate","templateFormat","_StringImageMessagePromptTemplate","_messageClass","additionalOptions","forEach","concat","createMessage","content","chatMessageClass","MsgClass","getRoleFromMessageClass","item","text","push","imgTemplateObject","imgTemplate","image_url","variables","flatMap","type","length","url","inputs","formatted","HumanMessagePromptTemplate","AIMessagePromptTemplate","SystemMessagePromptTemplate","_coerceMessagePromptTemplateLike","messagePromptTemplateLike","extra","messageContent","slice","templateData","map","_getType","isInstance","ChatPromptTemplate","lc_aliases","promptMessages","undefined","validateTemplate","assign","inputVariablesMessages","Set","promptMessage","inputVariable","add","totalInputVariables","inputVariablesInstance","partialVariables","keys","difference","filter","x","has","size","otherDifference","_getPromptType","_parseImagePrompts","inputValues","formattedMessageContent","Promise","all","async","imageUrl","promptTemplatePlaceholder","formattedUrl","allValues","mergePartialAndUserVariables","reduce","acc","partial","newInputVariables","iv","newPartialVariables","promptDict","humanTemplate","fromMessages","flattenedMessages","flattenedPartialVariables","create","fromPromptMessages","FewShotPromptTemplate","examples","exampleSelector","prefix","suffix","getExamples","selectExamples","exampleStrings","example","examplePrompt","join","exampleSeparator","serialize","outputParser","_type","input_variables","example_prompt","example_separator","template_format","deserialize","data","ImagePromptTemplate","key","entries","replace","match","group","replacement","String","detail","output","formattedPrompt"],"sourceRoot":""}